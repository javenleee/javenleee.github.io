<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/1018.html</url>
    <content><![CDATA[<h2 id="区块链白皮书"><a href="#区块链白皮书" class="headerlink" title="区块链白皮书"></a>区块链白皮书</h2><p>交易——挖矿，奖励 coinbase，coinbase transaction——</p>
<p>每次交易中都使用一个新的密钥对能够保证这些密钥和一个人联系起来。（椭圆曲线加密算法是能被量子计算暴力破解的）</p>
<h2 id="Challenge-and-future-research-directions"><a href="#Challenge-and-future-research-directions" class="headerlink" title="Challenge and future research directions"></a>Challenge and future research directions</h2><ol>
<li>Weaker Assumption</li>
<li>Incorporation of Different Mechanisms</li>
<li>Efficiency Optimization</li>
<li>Strong Linear Version of Proof</li>
<li>Other Mathematical Problem</li>
<li>Cryptographic Tools</li>
<li>Lattice-Based Cryptography 基于格的加密</li>
</ol>
<p>公钥和地址</p>
<p><img src="1018/image-20211018125415043.png" alt="image-20211018125415043"></p>
<p>HD钱包</p>
<p><img src="1018/image-20211018125350511.png" alt="image-20211018125350511"></p>
<h2 id="P2PKH-P2PK-MS-P2SH-OP-RETURN"><a href="#P2PKH-P2PK-MS-P2SH-OP-RETURN" class="headerlink" title="P2PKH,P2PK,MS,P2SH,OP_RETURN"></a>P2PKH,P2PK,MS,P2SH,OP_RETURN</h2><p>​    逆波兰表达式    </p>
<p>​    M-of-N multisig     2-of-2</p>
<p>​    &lt;&gt;&lt;&gt;<sig>M &lt;&gt; &lt;&gt;&lt;&gt;&lt;&gt;<pk> N multisig</pk></sig></p>
<p><a href="https://blog.csdn.net/jerry81333/article/details/56824166" target="_blank" rel="noopener">比特币 区块链 几种交易标准详解 P2PKH、P2PK、MS、P2SH加密方式</a></p>
<h2 id="Base58Check"><a href="#Base58Check" class="headerlink" title="Base58Check"></a>Base58Check</h2><p>Base58是一种基于文本的二进制编码格式，这种编码格式不仅实现了数据压缩，保持了易读性，还具有错误诊断功能。Base58是Base56编码格式的子集，同样使用了大小写字母和10个数字，但舍弃了一些容易错读和容易混淆的字符，具体是Base58不含Base64中的0（数字0）、O（大写字母o）、l（小写字母 L）、I（大写字母i），以及“+”和“/”两个字符。</p>
<p><img src="1018/image-20211020175230053.png" alt="image-20211020175230053"></p>
<p>P2PKH address version -&gt; 1</p>
<p>P2SH  -&gt; 3</p>
<p>图3-3 单个交易费用走势图</p>
<p>这是每个交易的平均手续费，单位是美元。当前每个交易平均要付手续费76.54美元，最高峰的时候要付160美元！这个手续费用可不便宜哦！</p>
<ol>
<li><p>系统安全：此基于区块链的教学平台使用hyperledger fabric开发，作为一个Web应用，用户无需作为节点同步区块链上数据、无需安装任何繁琐复杂的钱包等应用即可实现访问、交互，最大程度满足为用户提供便利，但相应地，这意味着我们需要自行维护区块链网络节点，但受限于成本，节点的数量不会太多，这可能是此区块链系统的安全隐患，仍存在被攻击的风险；</p>
<p>应对策略：尽可能增加节点个数，提高网络安全意识，做好安全防范</p>
</li>
<li><p>数据隐私：另一方面，此系统现在暂采用传统数据隐私保护方式，即对用户隐私保护仍停留在对隐私数据提供访问管理这种单一保护方式，仍存在数据隐私泄露的问题。</p>
<p>应对策略：可以在将来的工作中采用零知识证明等隐私保护技术加以解决；</p>
</li>
<li><p>数据真实性：对于学生实践子系统等来说，可能存在上链数据造假的问题，这也是所有区块链系统的共有问题，区块链虽能保证链上数据的不可篡改、可追溯，但上链前数据源头的数据真实性却不能保障，若数据源头数据本身存在问题，那么链上的数据真实性便不能保证。</p>
<p>应对策略：可以通过在整个数据产生、上链过程减少人为参与，利用区块链机等形式保证从数据产生到上链过程数据不可篡改，进而保证整个区块链上数据的真实性。</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Adapting High-resource NMT Models to Translate Low-resource Related Languages without Parallel Data</title>
    <url>/Adapting-High-resource-NMT-Models-to-Translate-Low-resource-Related.html</url>
    <content><![CDATA[<p>平行语料库是两种语言之间翻译文本的结构化集合。这种平行文本语料库是训练机器翻译算法的基础。</p>
<h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>​    平行数据的缺乏对于训练高质量机器翻译系统为低资源语言翻译来说是一个主要障碍。幸运的是，一些低资源语言在语言学上是与高资源语言相关或者相似的，这些相关的语言或许共享一些语法或者句法结构。在本文工作中，除了相关高资源语言的<strong>平行数据</strong>，我们还利用这些<strong>语言学上的重叠</strong>，来促进从低资源或者到只有单语言数据的低资源语言的翻译。我们的方法——NMT-Adapt，<strong>结合了去噪自动编码、回译和对抗性目标相结合，利用单语数据进行低资源适应。</strong>我们对从三个语系种的7种语言进行了实验，结果显示，与其他翻译相比，我们的技术极大地改善了向低资源语言的翻译。</p>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>​    <strong>尽管机器翻译（Machine Translation，MT）由于深度神经机器翻译（Neural Machine Translation, NMT）模型的出现而取得了很大的进步，但是这种进步已经被证明是主要在资源充足的带有大量可用平行训练数据的语言中。</strong></p>
<p>​    然而随着网络通信的进步和社交媒体的兴起，全世界的个人开始用他们母语的低资源语言开始交流和产生内容。其中一些低资源语言和高资源语言密切相关。其中一个例子就是方言：传统上认为方言是语言的口语变体而不是书面变体。由于这种非标准化口语表达和方言变体中大量俚语的流行，方言的翻译对于使用在语言正式变体（通常高资源语言的变体被认为是标准化形式）上训练的模型是一个挑战，同样地，使用与高资源语言相关模型翻译低资源语言时（使用西班牙MT模型翻译Catalan加泰罗尼亚语）也会出现相似的问题。</p>
<p>​    <strong>虽然更好地翻译低资源相关语言的一个直观方法可能是获得高质量的平行数据。</strong>这种方法通常是不可行的因为缺少专业知识或者双语翻译。低资源语言质量控制中出现的问题进一步加剧了这个问题。这种缺乏激励着我们学习低资源语言的机器翻译模型，同时利用现有可用数据例如密切相关语言的平行数据或者低资源语言的单语数据。</p>
<p>​    <strong>我们已经研究了在几乎没有可用的平行数据时使用单语数据进行机器翻译的应用。一些方法涉及到使用回译从单语数据中合成更多的平行数据或者从大型多语全集中挖掘平行数据。我们介绍NMT-Adapt，一种零资源技术，在低资源语言上不需要使用任何类型的平行数据</strong></p>
<p>​    我们研究了NMT-Adapt在为每种低资源语言的两个方向：（1）低资源语言到英语 （2）英语到低资源语言 翻译时的性能。<strong>我们认为翻译成英语可以表述为一种典型的无监督领域自适应任务，高资源语言是source domain，与之相关的低资源语言是target domain。我们证明了对抗领域自适应可以应用于这一相关语言翻译任务。对于第二个情况，翻译成低资源语言，这个任务更具挑战性，因为他涉及生成的输出对一个新领域的无监督自适应。为了完成这个任务，NMT-Adapt联合优化了四个任务来执行低资源翻译：（1）去噪自动编码（2）对抗性训练（3）高资源翻译（4）低资源回译</strong></p>
<p>​    我们测试了我们提出的方法，并证明了其在改善下列三个不同语系的低资源语言翻译方面是有效的：（1）伊比利亚语言（2）印度语言（3）犹太语，特别是阿拉伯方言。我们的代码和资源是开源可用的。</p>
<h2 id="Related-Work"><a href="#Related-Work" class="headerlink" title="Related Work"></a>Related Work</h2><p>​    <strong>零次翻译（zero-shot translation）</strong> 我们的工作与zero-shot翻译密切相关。然而，虽然zero-shot翻译在没有平行数据的语言对之间进行翻译，但有一个假设，目标语言对中的两种语言与其他语言都有一些平行数据。因此，系统可以学习处理这两种语言。在一项研究中，Currey和Heafield使用在pivot language上的单语数据改善了zero-shot翻译。然而，在我们的场景中，在低资源语言和任何其他语言之间没有平行数据。<strong>其他工作中，Arivazhagan等人，证明了对编码输出增加对抗训练可以帮助zero shot 训练，我们在我们的多任务训练种采用了一个相似的理念，以确保我们低资源目标语言与高资源语言处在相同的隐空间。</strong></p>
<blockquote>
<h5 id="枢轴语言（Pivot-Language）"><a href="#枢轴语言（Pivot-Language）" class="headerlink" title="枢轴语言（Pivot Language）"></a>枢轴语言（Pivot Language）</h5><p>如果希望获得中文到法语的翻译模型，但是中文到法语的平行语料较少，中文到英文、英文到法语的平行语料比较多，可以利用英文作为“枢轴语言”，在中文和法语之间作为桥接，训练中英、英法两个翻译模型，最终完成中翻法的任务。</p>
</blockquote>
<p>​    <strong>无监督翻译（Unsupervised translation）</strong> 一系列相关的工作是无监督翻译技术；<strong>这些方法在没有任何平行语料库的语言之间进行翻译。</strong>在Artetxe等人的工作中，无监督翻译通过同时训练去噪自动编码和回译任务来实现。在这些方法中，提出了多种预训练方法来更好地初始化模型。</p>
<p>​    提出了不同的方法，他们使用X-Y之间的平行数据来提高X-Z的无监督翻译。这个场景与我们的设置不同，因为它并没有假设Y和Z是相似语言。这些方法在多语言NMT模型上利用cross-translation方法，其中对于平行数据对$(S_x,S_y)$ ，他们使用当前模型将$S_x$ 翻译成语言Z来获得$S_z’$ 。然后使用$(S_y, S_z’)$ 作为额外合成的数据对来进一步提高这个模型。Garcia等人在低资源语言上使用多语言交叉翻译实验获得了一定的成功。虽然这些方法将平行数据作为辅助数据，来补充无监督NMT，我们的工作从领域自适用方面看待这个问题。<strong>我们尝试使用Z的单语数据在X-Y上训练的监督模型泛化到Z。</strong></p>
<p>​    <strong>利用高资源语言来提高低资源翻译</strong>     有几项工作利用高资源语言的数据来改善相似低资源语言的翻译。Neubig 和Hu证明将低资源语言有限的平行数据对和高资源语言数据混合是有益的。Lakew等人提出在低资源语言模型中选择困惑度低的高资源语言数据。Xia等人以高资源语言为轴心，通过无监督机器翻译创建了合成句子对。然而，这些之前的方法强调从低资源语言到英语的翻译，但是反方向或者没有考虑，或者表现很差。Siddhant等人同时训练了多语言翻译和去噪，结果表明这个模型可以不适用平行数据就将语言翻译成英语，其表现接近于有监督多语言NMT。</p>
<p>​    <strong>相似语言翻译</strong>     与我们的工作类似，已经有一些方法提出使用相似语言来改善翻译，Hassan等人从英语主要语料库生成合成英语方言平行数据。但是，这种方法假设在诸语言语料库中的词汇可以逐字映射到方言词汇中，并且他们用局部投影计算相应的替换词，这种方法与我们的工作不同，它依赖于方言/相似语言的种子双语词典的存在。此外，这种方法只考虑从方言到英语的翻译而没有考虑从英语到方言的翻译。其他的工作训练了一个大规模多语言多对多模型，证明了高资源训练数据改善了相关的低资源语言翻译。在其他工作中，Lakew等人比较了对不同语言变体翻译建模（模型翻译？ model translation）的不同方法，在两种变体的平行数据都可用的情况下，一些语言对的变体可能没有标记。另一项工作重点在相似语言之间的翻译，在其中一个研究中，Pourdamghani和Knight学习了一个基于字符的密码模型。在其他工作中，Wan等人通过在执行层协调的同时，分离token embeddings到枢轴和私有部分，改善了主要语言和方言之间的无监督翻译</p>
<h2 id="3-Method"><a href="#3-Method" class="headerlink" title="3 Method"></a>3 Method</h2><p>​    <strong>我们描述了NMT-Adapt方法，即在不使用任何低资源语言平行数据的情况下，翻译一种低资源语言到英语或者从英语到低资源语言。</strong>在3.1节中，我们描述NMT-Adapt如何利用一种新的多任务领域自适应方法来将英语翻译成低资源语言。在3.2节中，我们描述了我们如何实施资源域自适应来将低资源语言翻译成英语。最后，在3.3节中，我们证明了我们如何利用这两种领域自适应方法来执行迭代回译——更进一步在两个方向改善翻译质量</p>
<h3 id="3-1-English-to-Low-resource"><a href="#3-1-English-to-Low-resource" class="headerlink" title="3.1 English to Low-resource"></a>3.1 English to Low-resource</h3><p>​    <strong>为了将英语翻译成低资源语言，NMT-Adapt 使用预训练的mBART模型初始化</strong>，该模型的预训练见（Liu 2020）。正如在图一中展示的那样，我们继续使用受Lample 2018启发的四个任务同时训练这个模型，并且使用来自不同任务的梯度的加权和更新模型。</p>
<p>​    语言标识token被放置在与mBART中相同的位置。对于编码器，不管高资源和低资源语言源文本，有无噪声，在预训练的mBART中都使用高资源语言（HRL）的语言token。对于解码器，相关高资源和低资源语言使用它们自己的、不同的语言token。我们使用来自高资源语言的token embedding初始化低资源语言的token  embedding。</p>
<p><img src="Adapting-High-resource-NMT-Models-to-Translate-Low-resource-Related/image-20211020160153198.png" alt="image-20211020160153198"></p>
<p><strong>Task 1： Translation</strong>    第一个任务使将英语翻译成高资源语言（HRL），该语言使用现成的高资源平行数据进行训练。这项任务的目标是将高资源翻译知识转换成低资源语言来帮助翻译。我们使用交叉熵损失公式如下：</p>
<script type="math/tex; mode=display">
\mathcal{L}_{t}=\mathcal{L}_{C E}\left(\mathcal{D}\left(Z_{E n},[H R L]\right), X_{H R L}\right)</script><p>，其中$Z<em>{E n} = \mathcal{E}(X</em>{E n},[En]). (X<em>{E n}, X</em>{H R L})$ 是平行句子对，$\mathcal{E},\mathcal{D}$ 标识以（input，language，token）为参数的编码、解码器。$\mathcal{L}_{C E}$ 表示交叉熵损失cross entropy loss  </p>
<blockquote>
<p><img src="Adapting-High-resource-NMT-Models-to-Translate-Low-resource-Related/image-20211025163220121.png" alt="image-20211025163220121"></p>
</blockquote>
<p><strong>Task2: Denoising Autoencoding</strong>     对于这项任务，<strong>利用单语言文本，我们向每个句子中引入噪声，将噪声句子输入到编码器并训练模型来生成原始句子。</strong>我们使用的噪声与Lample 等人2018a的相似，<strong>它包括单词的shuffle 和 mask。</strong>shuffle是单词的随机排列，其中单词的位置必须移动最多三个单词。每个单词都以0.1的均匀概率被mask。<strong>这项任务的目标是学习语言的特征空间，因此编码器和解码器可以在特征和句子之间转换。这对于还没有在mBART预训练的低资源语言来说尤其必要。增加噪声在Lample等人在2018a的研究中被证明对于翻译的表现至关重要，因为它迫使学习的特征空间更加鲁棒并且包含高级语义知识。</strong></p>
<p>​    我们在低资源语言和相关高资源语言上训练去噪自动编码并且计算loss如下：</p>
<script type="math/tex; mode=display">
\mathcal{L}_{da} = \sum_{i = LRL,HRL} \mathcal{L}_{CE}(\mathcal{D}(Z_{i},[i]),X_{i})</script><p>其中，$Z<em>{i} = \mathcal{E}(\mathcal{N}(X</em>{i}),[HRL])$ ，$X_{i}$ 来自单语语料库，$\mathcal{N}(X_i): X_i  with  noise$</p>
<p><strong>Task 3： Backtranslation</strong>     对于这项工作，<strong>我们在英语到低资源语言的回译数据上训练，这项任务的目标是捕获在低资源语言中的语言建模效果。</strong>我们在3.3节描述了我们如何使用高资源翻译模型来引导回译来获得这些数据。</p>
<p>​    使用的目标如下：</p>
<script type="math/tex; mode=display">
\mathcal{L}_{bt} = \mathcal{L}_{CE}(\mathcal{D}(Z_{En}',[LRL]),X_{LRL})</script><p>其中，$Z<em>{En}’ = \mathcal{E}(Y</em>{En},[En])$ 。$(Y<em>{En},X</em>{LRL})$ 是英语到低资源语言回译对。</p>
<p><strong>Task 4： Adversarial Training</strong>     <strong>最后一项工作的目标是 使编码器输出与语言无关的特征，这种表示方法与含噪音的高低资源语言以及英语无关。</strong>理想情况下，编码器输出应该包含句子的语义信息，几乎没有语言特定的信息。这样，从英语到高资源语言平行数据学习的任何知识都可以直接应用于生成低资源语言，只需在推理过程中切换语言token，而不需要捕获虚假相关性。</p>
<p>​    为了在三种语言中对抗性混合编码器的隐空间，我们使用两个critics（discriminators，判别器？critic是策略优化方法），critic是循环网络，来确保他们可以处理变长文本输入，与Gu等人2019年的研究相似，使用Wasserstein损失对对抗部分进行训练，这是两种类型数据之间的期望差异。这种损失使不同语言分布之间的<strong>EMD距离</strong>（Earth Mover’s Distance）最小，我们计算损失函数如下：</p>
<script type="math/tex; mode=display">
\begin{gathered}
\mathcal{L}_{a d v 1}=\mathbb{E}\left[\operatorname{Disc}\left(Z_{H R L}\right)\right]-\mathbb{E}\left[\operatorname{Disc}\left(Z_{L R L}\right)\right]
\end{gathered}</script><script type="math/tex; mode=display">
\mathcal{L}_{a d v 2}=\mathbb{E}\left[\operatorname{Disc}\left(Z_{H R L} \cup Z_{L R L}\right)\right] 
-\mathbb{E}\left[\operatorname{Disc}\left(Z_{E n} \cup Z_{E n}^{\prime}\right)\right]</script><p>​    如等式4所示，第一个critic被训练来区分高资源和低资源语言，同样地，在等式5中，第二个critic被训练来区分英语和非英语（包括高资源和低资源语言）</p>
<p><strong>Fine-tuning with Backtranslation（使用回译进行微调）:</strong>     最后，我们发现使用这四个任务同时训练后，在推理前单独地使用回译进行一次微调是有益的。我们认为这是因为尽管对抗性训练减少了相关性，但他们并没有被完全消除，仅使用语言token控制输出语言是不够的。通过对回译进行微调，我们进一步适应目标端，并鼓励解码器的输出概率分布更好地匹配所需输出语言。</p>
<h3 id="3-2-Low-resource-to-English"><a href="#3-2-Low-resource-to-English" class="headerlink" title="3.2 Low-resource to English"></a>3.2 Low-resource to English</h3><p>​    我们提出从低资源语言到英语翻译建模作为一项领域自适应任务，并根据领域对抗神经网络（DANN）（Ganin 2017）的见解设计我们的模型，DANN是一项在很多NLP中广泛使用的领域自适应技术。这次，我们同时训练三个任务：</p>
<p><strong>Task 1：Translation</strong>     我们在平行数据上训练高资源语言到英语翻译，目标是使这些知识能够翻译低资源语言的句子。我们如下计算loss：</p>
<script type="math/tex; mode=display">
\mathcal{L}_t = \mathcal{L}_{CE}(\mathcal{D}(Z_{HRL},[En]),X_{En})</script><p>其中，$Z<em>{HRL} = \mathcal{E}(X</em>{HRL},[HRL])$</p>
<p><strong>Task 2: Backtranslation</strong>     我们在3.3节中描述低资源语言到英语回译，目标如下：</p>
<script type="math/tex; mode=display">
\mathcal{L}_t = \mathcal{L}_{CE}(\mathcal{D}(Z'_{LRL},[En]),X_{En})</script><p>其中，$Z’<em>{LRL} = \mathcal{E}(Y</em>{LRL},[HRL])$ </p>
<p><strong>Task 3: Adversarial Training</strong>     我们将高和低资源语言语料库的单语语料库的句子输入到编码器中，训练编码器输出，使其输入语言无法被critic区分。目标是将低资源语言编码到与高资源语言共享的空间中，以便在翻译中训练的编码可以直接使用。输入中没有噪声，因为我们没有观察到改善。仅有一个循环critic使用了Wasserstein损失，计算如下：</p>
<script type="math/tex; mode=display">
\mathcal{L}_{ada} = \mathbb{E}[Disc(Z_{HRL})] - \mathbb{E}[Disc(Z_{LRL})]</script><p>其中，$Z<em>{LRL} = \mathcal{E}(X</em>{LRL},[HRL])$ </p>
<p>与从英语翻译到低资源语言相似，我们使用预训练的mBART初始化NMT-Adapt，在编码器中对高资源语言和低资源语言使用相同的语言token</p>
<p><strong>3.3 Iterative Training</strong></p>
<p>​    我们描述如何交替训练En-LRL，LRL-En模型，来创建能提高整体质量的更好的回译数据。</p>
<p><img src="Adapting-High-resource-NMT-Models-to-Translate-Low-resource-Related/image-20211022205713766.png" alt="image-20211022205713766"></p>
<p>​    Algorithm1描述了迭代训练过程，我们首先通过在高资源语言到英语翻译的平行数据上对mBART模型进行微调来创建英语到低资源语言回译数据。使用这个模型，我们将低资源语言句子视为高资源语言，将单一低资源语言文本翻译成英语。使用结果数据对作为回译数据来训练我们将英语翻译成低资源语言模型的第一次迭代过程。</p>
<p>​    在将英语训练成低资源语言后，我们使用这个模型来将English-HRL 平行数据中的英语句子翻译成低资源语言，使用那些句子对作为回译数据来训练低资源到英语翻译模型的第一次迭代。</p>
<p>​    然后我们使用第一个低资源语言到英语翻译模型来为第二个英语到低资源翻译模型生成回译数据对。我们迭代地重复这个使用模型中一个方向来训练另一个方向的过程</p>
<h2 id="4-Experiments"><a href="#4-Experiments" class="headerlink" title="4 Experiments"></a>4 Experiments</h2><h3 id="4-1-Datasets"><a href="#4-1-Datasets" class="headerlink" title="4.1 Datasets"></a>4.1 Datasets</h3><p>​    我们在三组语言上做了实验，每一组里，我们为一种语言（高资源语言）准备了大量的平行训练数据，而相关语言则没有平行数据，以此来模拟低资源语言场景。</p>
<p>​    我们的三个分组包括：(i) Iberian 伊比利亚语 ，我们将Spanish视为高资源语言，将Portuguese和Catalan视为低资源语言；（ii）Indic language （印度-雅利安语支？）我们将Hindi视为高资源语言，Marathi，Nepali和Urdu视为低资源语言；（iii）Arabic （阿拉伯语），我们将现代标准阿拉伯语（Modern standard Arabic，MAC）视为高资源语言，Egyptian、Levantine Arabic dialects 视为低资源语言。这些语言中，Urdu和Hindi之间的关系一个特殊的设置；虽然这两种语言作为口语可以相互理解，但他们使用不同的文字书写。除此之外，在我们的实验环境中，所有低资源语言，除了Nepali，都不包含在最初的mBART预训练中。</p>
<p>​    表1展示了每种语言的平行语料库。由于缺乏一些低资源语言的平行数据，我们无法匹配训练和测试域。对单语数据，对于每种语言，我们从CC-100语料库中随机取样1M句子。为了控制质量，如果句子中超过40%的字符不属于该语言的字符集，我们就会过滤掉该句子。处于质量和内存限制，我们只是用长度在30-200个字符之间的句子。</p>
<p><img src="Adapting-High-resource-NMT-Models-to-Translate-Low-resource-Related/image-20211022214336389.png" alt="image-20211022214336389"></p>
<p>​    <strong>Collecting Dialectical Arabic Data</strong>     虽然获取低资源单语数据相对简单（因为即使是低资源文本语言标识符也通常容易获得），但辨识方言数据通常并不简单。这是因为许多方言传统上被认为是口头的而不是书面的，通常缺少标准拼写、重要的俚语，甚至缺少与主要语言的相互理解。一般来说，在语言分类器中方言数据通常被分到和主语言一组。</p>
<p>​    我们描述了我们得到可靠的Arabic方言单语数据采取的步骤。由于CC-100语料库不能区分MSA和他的方言变种，因此我们训练了一个更细粒度的分类器，用于区分MSA和特定口语方言。我们的分类器基于为Arabic预训练的BERT模型并针对六种分类对他做了微调：（i）Egyptian （ii）Levantine，（iii）Gulf，（iv）Maghrebi，（v）Iraqi 方言以及（vi）书面MSA。我们使用Bouamor和Zaidan的数据作为训练数据，得到的分类器在保留集上准确率达到了91%。我们使用训练好的Arabic方言分类器进一步分类CC-100的Arabic单语数据，挑选MSA，Levantine和Egyptian句子作为我们实验中Arabic的单语数据。</p>
<h3 id="4-2-Training-Details"><a href="#4-2-Training-Details" class="headerlink" title="4.2 Training Details"></a>4.2 Training Details</h3><p>​    我们为critics使用学习率为0.01的RMSprop优化器，为剩余模型使用Adam优化器。我们使用8个GPU，每个GPU的batch size为1024个token训练我们的模型。对于对抗训练，生成器每三次更新训练一次，critic每次更新训练一次。</p>
<p>​    （i）翻译，（ii）回译，（iii）LRL和HRL去噪（只针对En—-&gt;LRL方向）的每次任务，都有同样的样例数，并且他们的交叉熵损失有相同的权重。adversarial loss 对抗性损失 $\mathcal{L}_{adv}$ 在critic上有相同的权重，而对生成器（编码器）有-60的乘数。这个乘数经过微调来保证收敛，并且是负的因为他与鉴别器损失相反。</p>
<p>​    对于第一次迭代，从英语到低资源语言我们训练了128个 epochs，从低资源语言到英语我们训练了64次。第二次迭代，我们对两个方向都训练了55个epochs。我们所有其他的设置和训练参数都遵循（Liu等人2020的研究）。</p>
<p>​    critics由四层组成：第三层是一个双向GRU并且剩余三层是全连接层。隐藏层大小是512，512和128，并且使用SELU激活函数。</p>
<p>​    我们在8个GPU上做了实验，每次迭代花费将近三天的时间，我们使用公开可用的mBART-checkpoints初始化。我们方法的GPU内存使用只比mBART稍微大了一点。虽然我们将额外的参数引入到鉴别器中，但这些额外的参数与mBART大小相比是微不足道的。</p>
<h3 id="4-3-Result"><a href="#4-3-Result" class="headerlink" title="4.3 Result"></a>4.3 Result</h3><p>我们展示在低资源语言翻译上应用NMT-Adapt的结果</p>
<h4 id="4-3-1-English-to-Low-Resource"><a href="#4-3-1-English-to-Low-Resource" class="headerlink" title="4.3.1 English to Low-Resource"></a>4.3.1 English to Low-Resource</h4><p>​    我们首先评估翻译成低资源语言的表现，我们将NMT-Adapt的第一次迭代与下面几种baseline系统作比较（i）En —-&gt;HRL Model：直接使用为En —- &gt; HRL翻译训练的模型。（ii）adversarial（对照组？）：没有使用回译以及没有最终微调的版本。（iii）回译：在使用HRL—-&gt;En翻译模型生成的回译数据上的mBART微调。（iv）BT+Adv：没有最终微调的模型。（v）BT+Adv+fine-tune：在第三节描述的我们的完整版本（NMT-Adapt）</p>
<p><img src="Adapting-High-resource-NMT-Models-to-Translate-Low-resource-Related/image-20211023163510256.png" alt="image-20211023163510256"></p>
<p>​    如表2所示，只使用单独的adversarial组件，在BLEU得分上相比使用高资源翻译模型有了改进，这表明，我们提出结合denoising autoencoder和adversarial loss的方法在适应一个新的目标输出域是有效的。</p>
<p>​    除此之外，我们发现只使用回译数据有一个大的改进，这证明了使用高资源翻译模型来创建LRL-En回译数据对于适应低资源语言目标非常有效。</p>
<p>​    我们进一步看到结合对抗和回译任务进一步对其他每种方法都各自有提高，这表明这两部分是互补的。我们同样也对带有回译但是没有对抗loss的En-HRL翻译做了实验，然而，这产生了更差的结果，这表明这种改进并不是简单地得益于多任务学习。</p>
<p>​    对于Arabic，回译作用明显，然而对于Portuguese和Nepali，对抗部分更重要。对于一些语言，像Marathi，这两部分单独作用时提高不多，但是同时使用时，改进很大。</p>
<p>​    对于Urdu，我们发现只使用Hindi模型的回译完全失败，这是直观的，因为Hindi和Urdu书写方式完全不同，并且使用Hindi模型翻译Urdu会产生有效的随机回译数据。当我们尝试应用使用对抗任务训练的模型时，这个模型生成混有Hindi，Urdu和English的句子。为了保证我们的模型能单独输出Urdu，我们通过禁止所有包含English或Hindi字符的token来限制输出。这允许我们的模型输出有效的并且语义上有意义的翻译。这是一个有趣的结果，因为它表明我们的对抗混合允许翻译相似的语言，即使他们的书写方式不同。我们报告了带有限制的BLEU分数。因为已经限制了token，我们跳过最终的微调过程。</p>
<h4 id="4-3-2-Low-Resource-to-English"><a href="#4-3-2-Low-Resource-to-English" class="headerlink" title="4.3.2 Low-Resource to English"></a>4.3.2 Low-Resource to English</h4><p><img src="Adapting-High-resource-NMT-Models-to-Translate-Low-resource-Related/image-20211023163525585.png" alt="image-20211023163525585"></p>
<p>​    表3展示了从低资源语言到英语翻译的第一次迭代的结果。我们比较了如下几个系统：（i）HRL—-&gt;En model：直接使用为HRL —-&gt;En翻译训练的模型。（ii）Adversarial：与我们整个模型相似，但是没有使用回译。（iii）回译：在来自我们模型En—-&gt;LRL方向生成的回译数据上mBART微调。（iv）BT+Adv：我们的完整的模型。</p>
<p>​    对于这个方向，我们可以看到回译和对抗域适应部分通常都很有效。Arabic是个例外，这可能是由于与低资源语言分类相比，我们的方言分类噪音大，另一个原因可能是相比于低资源但是是标准语言，口语方言缺乏书写标准。</p>
<p>​    对于这些实验，我们在这个方向上没有为Urdu使用任何特别的防御措施，尽管他和Hindi有不同的书写方式。</p>
<h4 id="4-3-3-Iterative-Training"><a href="#4-3-3-Iterative-Training" class="headerlink" title="4.3.3 Iterative Training"></a>4.3.3 Iterative Training</h4><p>​    表4展示了训练的两个迭代的结果。对于除了Arabic方言的语言，第二次迭代通常表现出对第一次迭代有改进，表明我们可以在一个方向上使用改进的模型来进一步改进相反方向。我们发现三次迭代后的改进微乎其微。</p>
<p><img src="Adapting-High-resource-NMT-Models-to-Translate-Low-resource-Related/image-20211023170249234.png" alt="image-20211023170249234"></p>
<p>​    我们将我们的结果与使用HRL语言作为pivot的baseline做了比较，baseline使用微调过的mBART来执行英语和HRL之间的监督翻译，并且使用MASS来执行HRL和LRL之间的无监督翻译。mBART在我们模型使用的平行数据上微调过，MASS使用的单语数据与我们方法中的相同。对于所有的语言和方向，我们的方法都明显优于pivot baseline。</p>
<h4 id="4-3-4-Comparison-with-Other-Methods"><a href="#4-3-4-Comparison-with-Other-Methods" class="headerlink" title="4.3.4 Comparison with Other Methods"></a>4.3.4 Comparison with Other Methods</h4><p>​    在表 5 中，我们比较了使用具有多种语言的平行语料库作为辅助数据的交叉翻译方法 (Garcia et al., 1020b) 以及 (Guzm´an et al., 2019) 和 (Liuet al., 2020) 中报告的结果 。所有方法使用相同的测试集，English-Hindi平行语料库，和为公平比较的tokenization。对于对于En—-&gt;Nepali，NMT-Adapt比先前使用Hindi或者多语言平行数据的无监督方法表现更好，与监督方法表现相近。对于Nepali——&gt;En方向，我们的方法与先前无监督方法有类似的表现。请注意，我们使用与表3和表4不同的标记化，以与之前的工作保持一致。</p>
<p><img src="Adapting-High-resource-NMT-Models-to-Translate-Low-resource-Related/image-20211023170313134.png" alt="image-20211023170313134"></p>
<h4 id="4-3-5-Monolingual-Data-Ablation（消融，loss）"><a href="#4-3-5-Monolingual-Data-Ablation（消融，loss）" class="headerlink" title="4.3.5 Monolingual Data Ablation（消融，loss）"></a>4.3.5 Monolingual Data Ablation（消融，loss）</h4><p>​    表6展示了English—-&gt;Marathi第一次迭代的结果，同时改变了使用的单语数据量。我们发现，随着句子数量从10k增加到1M，BLEU得分从11.3增加到16.1，这表明更多的单语数据显著提高了表现。</p>
<p><img src="Adapting-High-resource-NMT-Models-to-Translate-Low-resource-Related/image-20211023171814935.png" alt="image-20211023171814935"></p>
<h2 id="5-Conclusion"><a href="#5-Conclusion" class="headerlink" title="5 Conclusion"></a>5 Conclusion</h2><p>​    我们提出了NMT-Adapt，一个对低资源语言神经机器翻译的新方法，它假设在低资源语言中，没有平行数据或双语词典。使用类似的高资源语言的平行数据以及低资源语言中的单语数据，我们应用无监督适应来促进对低资源语言的翻译。我们的方法结合了几个任务来促进适应过程，其中包括对抗训练，去噪语言建模和迭代回译。实验表明这种结合比任何单独的任务更有效，并且可以在许多不同的语种进行泛化。</p>
<p>参考资料：</p>
<p><img src="Adapting-High-resource-NMT-Models-to-Translate-Low-resource-Related/image-20211026212340142.png" alt="image-20211026212340142"></p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>​    社交媒体、网络····的发展提出了翻译LRL（LRL，dialect，slang）的需求</p>
<h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><p>​    方言的翻译对于使用在语言正式变体（通常高资源语言的变体被认为是标准化形式）上训练的模型是一个挑战，同样地，使用与高资源语言相关模型翻译低资源语言时（使用西班牙MT模型翻译Catalan加泰罗尼亚语）也会出现相似的问题。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol>
<li><p>parallel data</p>
</li>
<li><p>without parallel data</p>
<p><strong>我们已经研究了在几乎没有可用的平行数据时使用单语数据进行机器翻译的应用。一些方法涉及到使用回译从单语数据中合成更多的平行数据或者从大型多语全集中挖掘平行数据。我们介绍NMT-Adapt，一种零资源技术，在低资源语言上不需要使用任何类型的平行数据</strong></p>
<p>​    我们研究了NMT-Adapt在为每种低资源语言的两个方向：（1）低资源语言到英语 （2）英语到低资源语言 翻译时的性能。<strong>我们认为翻译成英语可以表述为一种典型的无监督领域自适应任务，高资源语言是source domain，与之相关的低资源语言是target domain。我们证明了对抗领域自适应可以应用于这一相关语言翻译任务。对于第二个情况，翻译成低资源语言，这个任务更具挑战性，因为他涉及生成的输出对一个新领域的无监督自适应。为了完成这个任务，NMT-Adapt联合优化了四个任务来执行低资源翻译：（1）去噪自动编码（2）对抗性训练（3）高资源翻译（4）低资源回译</strong></p>
</li>
</ol>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>我们测试了我们提出的方法，并证明了其在改善下列三个不同语系的低资源语言翻译方面是有效的：（1）伊比利亚语言（2）印度语言（3）犹太语，特别是阿拉伯方言。我们的代码和资源是开源可用的。</p>
]]></content>
      <categories>
        <category>-论文</category>
      </categories>
      <tags>
        <tag>论文</tag>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>An Empirical Analysis of Privacy in the Lightning Network</title>
    <url>/An-Empirical-Analysis-of-Privacy-in-the-Lightning-Network.html</url>
    <content><![CDATA[<hr>
<h1 id="闪电网络隐私的实证分析"><a href="#闪电网络隐私的实证分析" class="headerlink" title="闪电网络隐私的实证分析"></a>闪电网络隐私的实证分析</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>​    支付通道网络Payment channel networks，特别是闪电网络Lightning Network，似乎为比特币和其他基于区块链的加密货币缺乏可扩展性和隐私性提供了解决方案，先前的研究主要关注可扩展性，可用性以及Lightning Network的加密经济，然而很少探索他在实践中实现的隐私级别。<strong>本文对Lightning Network提供的隐私性提出了一个进行深度分析，提出了几种利用网络公开信息的攻击</strong>，来了解那些设计为保密的信息，例如一个节点拥有多少货币或者在网络中路由的一次交易中谁是发送方，谁是接收方。</p>
<h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h2><p>​    从2008年推出以来，比特币已经成为最广泛应用的加密货币。比特币去中心化和无需许可性质允许所有用户加入网络，并且避免了对控制了资金流的中介机构和当局的需要。相反，每笔交易的有效性由网络参加者们自己做出的共识决定。有效的交易被记录再公共区块链中。因此，区块链实际上充当记录所有已经发生交易的账本。</p>
<p>​    在网络中将交易广播给所有人以及在永久账单中存储他们的需要对基于区块链的加密货币的寿命提出了两个问题。首先，他带来了严重的可扩展性限制：比特币区块链现在已经超过300GB，并且比特币每秒仅能完成10笔交易。其他的加密货币的吞吐量略高，然而在这些基于广播的系统，吞吐量和安全性存在一个固有的权衡。第二，账本的透明性意味着任何人可以观察货币的流向，确定交易的另一方，并且将不同的交易联系起来。这一点在比特币上表现得最为明显，然而这种类型的分析甚至拓展到明确设计隐私的加密货币。</p>
<p>​    目前为了解决可扩展性而部署的最有前途的解决方案是所谓的<code>&quot;layer-two&quot;</code>协议，其中Lightning Network （LN）是自从2018年3月问世以来最受欢迎的解决方案。在LN中，成对的参与者使用比特币区块链来打开和关闭二者之间的<code>payment channels</code> 。在这个通道内，这两者可以进行双方之间的任意多的链下交易，而不需要使用区块链。除了单一通道之外，Lightning支持多<code>multi-hop</code>支付路由，这意味着即使是没有直接互联的参与者仍然可恶意通过更广义的<code>payment channel network (PCN)</code> 路由支付。在这个网络中的节点可以收取路由小费，以这种方式他们被激励去路由支付。</p>
<p>​    除了在提高可扩展性方面的承诺，<code>Lightning</code> 似乎还解决了隐私问题。像我们在第二节详细说明的，为了建立PCN，网络中的节点和网络中大多数通道是公开的（尽管有些通道可能是私有的），给定通道的容量也是如此，这意味着这条通道可以路由的最大支付值。然而， 与通道有关的个人余额是保密的。此外，支付不会广播给所有节点并且不会存储在公开账本中。即使是通过<code>multi-hop</code>路由的支付，它使用洋葱路由来保证在路由路径上每个节点只能识别他的直接前任和后继节点。</p>
<p>​    然而，就像基于账本的加密货币一样，Lightning网络中隐私潜力和现实之间的差距很大，正如我们在本工作中所示。特别地，我们考虑<code>LN</code>承诺的四个隐私属性：</p>
<ul>
<li><strong>Private channels</strong> 应该允许两个节点共享一个通道，但是保持他和他所有信息（容量，参与者等等）存在，并对网络中其余部分隐藏，我们在3.2节探索了这个属性，通过提出一个启发式方法，他能够识别私有通道的链上资产以及通道上的一方甚至双方。</li>
<li><strong>第三方余额秘密</strong>，就是说即使通道的容量是公开的，参与者各自的余额也应该是保密的。我们在第四节中探索了这个属性，通过提出了评估了一种通用方法，主动攻击者（即网络中右节点的开发通道）可以发现通道上的余额。</li>
<li><strong>路径关系匿名表示</strong>，路由支付的中继节点不应该知道除了他的直接前任和后继之外的其他节点是支付路由的一部分。我们在第5节探索了这个属性，我们利用一个我们构建的LN模拟器（在5.1节描述）来评估一个中继节点推断他所路由的支付的发送方和接收方的能力</li>
<li><strong>路径外支付隐私</strong>， 不涉及路由的其他任意节点不应该推断得到任何关于路由节点或者支付值的信息，我们在第6节探索了这个属性，通过提出和评估了一个方法，一个主动攻击者可以使用发现余额的能力来形成<code>网络快照</code> 。通过比较连续的网络快照，攻击者可以通过确认通道余额的变化位置以及多少推断出支付。</li>
</ul>
<h3 id="1-1道德考虑"><a href="#1-1道德考虑" class="headerlink" title="1.1道德考虑"></a>1.1道德考虑</h3><p>第五节和第六节提出的攻击是在一个模拟网络上进行评估的，而不是实时网络，但是在第四节的攻击是在实时测试网络评估的。与比特币网络上的相关主动攻击一样，我们尽一切努力来保证我们的攻击不会影响网络的正常运行：攻击期间发送的信息没有不正常的影响也不会花费任何金钱来处理，并且他们的量相对较小（我们最多向每个被攻击节点发送24条信息）。因此我们相信，对于处理这些信息的节点没有任何长期或短期的破坏性影响。我们在2020年向三个主要LN代理商和流动性提供商Bitrefill的开发者公开了本文的结果，并在之后和Ligtning开发者讨论了本文。</p>
<h3 id="1-2相关工作"><a href="#1-2相关工作" class="headerlink" title="1.2相关工作"></a>1.2相关工作</h3><p>我们认为所有关注Ln的研究都是相关的，特别是都是关于隐私性的。大多数前人的研究已经关注了LN的可扩展性，实用性和加密经济这些方面，或者关注他的图属性。Rohrer等人研究了LN对基于拓扑的攻击的敏感性。Tochner等人提出了提出了一种利用<code>multi-hop</code>路由方式的Dos攻击。在其他发现中，他们还表明，是个最中心化的节点可以通过他们的攻击破坏大约80%的路径。Perez-Sola等人提出了一种攻击，他能减少一个节点通道的容量，从而阻止节点参与到网络中。Tikhomirov等人展示了虫洞攻击是如何阻止诚实中间节点参与支付路由的。</p>
<p>在隐私方面，Malavolta等人发现了一种利用锁机制的新的攻击，这种锁机制允许不诚实用户从路由路径上的诚实中间节点偷取支付小费。他们提出匿名<code>multi-hop</code> 锁作为一种更安全的选项。Nowatowski和Ton研究了各种启发式方法，来确认在比特币区块链上的Lightning交易。在我们这项工作的同时，Romiti等人构建了几个启发式方法来将Lightning实体和比特币钱包连接起来。其中一个启发式方法与我们在3.2节构建的<code>tracing heuristic</code> 相似但是他们的目标是创建增强的比特币集群方法而不是识别私有通道，正如我们在第四节进一步描述的，其他人已经实施了<code>余额发现攻击</code>，这些攻击的主要限制是他们依赖攻击者收到的特定的错误信息，所以随着网络的发展很容易变得无关紧要。我们通过提出了一种通用攻击（在第四节）以及更广泛的研究这种攻击的影响，克服了这种限制。</p>
<p>Beres等人简要的研究了寻找支付发送方和接收方的问题。与我们的工作类似，他们基于公开可用的网络快照和某些节点所有者发部的信息开发了LN流量模拟器，然而，他们的工作只考虑了<code>single-hop</code>支付，也没有研究其他隐私属性。很多其他LN研究使用了网络模拟器，。其中几个模拟器被用作执行LN网络的经济分析，然而CLoTH模拟器只提供了性能统计数据（例如完成一笔支付的实践，支付失败可能性等等）。然而，所有这些模拟器都对拓扑结构、路径选择算法和支付分布做出了几个简单的假设。因此他们不适合分析其隐私属性。</p>
<h2 id="2-背景"><a href="#2-背景" class="headerlink" title="2.背景"></a>2.背景</h2><p>为了打开Lightning通道，双方将比特币存入一个2of2的多签名地址，这意味着花费这些货币的任何交易都需要被双方签名。这些资金代表着这个通道的容量，也就是说，可以通过这个通道传输的最大交易值。一旦一个通道建立起来，参与者可以使用它来交换任意数量的支付，只要其中一个有正余数。他们也可以通过一个比特币交易来关闭通道，该交易从2of2多签名地址返还他们各自的余额。</p>
<p>然而，大多数用户并没有直接连接，因此需要通过公有LN来路由他们的支付，在公有LN中，节点通过公钥标识，边代表着通道，他们与一个<code>通道认证</code>id、通道容量C、和通过该通道的路由小费fee公开关联起来。边也隐    式地与通道的收入和支出秘密联系起来。除了只有在路由时才显示的私有通道外，网络的拓扑以及他的公开标签对每一个节点都是公开的。当路由一个支付的时候，发送方（Alice）使用洋葱路由来隐藏他和接收者（Bob）的关系。Alice根据和Bob之间通道的容量和路由小费来选择完整的路径（源路由）。最终的目标是这条路径上的每一个中间节点转发这个支付到他的后继节点，并期望他的前任节点也这么做，这样余额就不会改变。然而节点不能立刻发送资金，因为可能是支付失败的情况。为了创建中间节点状态，LN使用了<code>hashed timelock contracts(HTLCs)</code> 哈希时间锁合约，这个合约支持有时间限制的有条件支付。总之，这个协议遵循以下五个步骤让Alice支付Bob：</p>
<ol>
<li>开发票， Bob生成一个密钥<em>x</em>并且计算他的哈希值<em>h</em>。他开一个包含<em>h</em>和一些支付金额<em>amt</em>的发票<code>invoice</code>给Alice</li>
<li>洋葱路由，Alice选择了一条路径$A \rightarrow U_1 \rightarrow … \rightarrow U_n \rightarrow B$ ，然后Alice生成一个Sphinx数据包，目标是Bob，路由经过$U_i$ 节点。然后Alice发送最外层的洋葱包$onion_1$ 给 $U_1$ </li>
<li>通道准备。从$U<em>{i-1}$ 接收到$onion_i$ 后，$U_i$解密获得<em>cid</em>，它确定了下一个节点$U</em>{i+1}$ ，要发送的数量$amt<em>i$，延迟$t_i$ ，以及要转发给$U</em>{i+1}$ 的 $onion<em>{i+1}$ 数据包。在将$onion</em>{i+1}$ 发送给$U<em>{i+1}$ 之前，$U_i$ 和 $U</em>{i-1}$ 通过使用HTLC更新他们中间节点状态来准备通道，以确保如果$U<em>{i-1}$ 没有在延迟$t_i$ 前向$U_i$ 提供h的预映像，$U_i$ 可以要求退还他们的付款。完成此操作后，$U_i$ 可以将$union</em>{i+1}$ 发送给 $U_{i+1}$ </li>
<li>发票结算。最终，Bob从$U<em>n$接收到$union</em>{n+1}$ 并解码，获得$(amt,t,h)$ ，如果amt和h跟她开的发票匹配，它发送发票预映像x给$U_{n-1}$ 来赎回其支付的金额amt。这个值按照路径以此向后发送。</li>
<li>通道结算。在路径上的每一步，$U<em>i$ 和$U</em>{i+1}$ 使用x结算他们的通道，例如，要确认更新状态反映了$amt<em>i$ 从 $U_i$ 发送到 $U</em>{i+1}$ 这个事实，因此amt被从Alice发送到Bob。 </li>
</ol>
<h2 id="3-区块链分析"><a href="#3-区块链分析" class="headerlink" title="3.区块链分析"></a>3.区块链分析</h2><h3 id="3-1数据和测量"><a href="#3-1数据和测量" class="headerlink" title="3.1数据和测量"></a>3.1数据和测量</h3><p>LN可以通过公共网络图的定期快照随时间捕获，该图提供有关节点（标识符，网络地址，状态等等）和他们通道（标识符，容量，端点等等）的基本事实数据。我们使用以下三方提供的数据来获得全面的快照：（1）我们自己的Lnd客户端数据（2）主要c-lightning开发者之一（3）从1ML和LN Bigsun收集用户提交（并验证）的数据。为了分析链上交易，我们也运行有一个比特币全节点，使用BlockSci 工具来解析和分析原生区块链数据。</p>
<p>我们LN数据集包含被用来开启每一个通道的比特币交易的哈希值。通过将这些数据与我们区块链数据结合起来，我们就能够确定通道什么时候关闭以及他们的资金怎么分配。我们总共确定174378个通道，其中135850已经关闭，他们的总容量是3315.18BTC。这些关闭的通道中，69.22%的通道是单输出地址（也就是说关闭时完全不平衡），29.01%有两个地址，1.76%有超过两个地址。</p>
<h3 id="3-2隐私通道"><a href="#3-2隐私通道" class="headerlink" title="3.2隐私通道"></a>3.2隐私通道</h3><p>私有通道为两个Lightning节点创建通道但不向网络公开提供了一种方法，在这一节中，我们试图了解私有通道被识别的程度，以及他们的隐私限制以及我们对公共网络的剩余攻击范围。</p>
<p>我们首先使用属性启发法来提供私有通道的数量上限，这种方法识别似乎代表打开和关闭但我们没有公共通道标识符的比特币交易。</p>
<p><strong>属性启发法</strong> ，为了与我们的LN数据集保持一致，我们首先寻找那些2018.1.12之后，2020.9.7之前发生的其中一个输出地址是P2WSH（根据规范，LN通道必须是这个）的所有比特币交易，和在这期间开放的174378个公共链通道相比较，我们共发现3500312笔交易满足这些条件，然后我们从数据集中确定的已知开放交易中发现一些公共特点：（1）99.91%有最多两个输出地址，这有可能代表着创建通道和发送的投资者改变了。（2）99.91%的交易有单P2WSH输出地址（3）99.85%的交易有一个最多接受16777215个satoshis的P2WSH输出地址。而这个数字正是我们进行分析时LN通道的最大容量（4）99.99%的交易有一个在输入和输出时最多出现一次的P2WSH地址，这反映出他作为作为支付通道的一次性使用而不是可重用脚本。（5）99.99%的资金来自于WitnessPubHeyHash地址或ScriptHash地址。</p>
<p>通过要求我们收集的交易也有这些特点，并排除任何涉及开放或者关闭公共通道的交易，我们还剩267674潜在交易，代表着私有通道的开放。如果这些交易的输出花费了他们的内容（即通道已经关闭），我们就能进一步看到他们是如何做的。这将提供更好的证据，证明他们是否与LN相关联。然后我们从从我们数据集中确定的已知关闭交易中发现以下公共特点：（1）如Lightning规范要求的，100%具有非零序列数。（2）100%有一个2-of-2 multisig地址单输入，这也是Lightning规范要求。（3）98.24%有最多两个输出，这表明通道中的两个参与者。</p>
<p>通过要求我们收集的开放交易也有这三个特点的关闭交易，我们还剩77245对交易，他们是潜在的涉及开放和关闭私有通道的交易，同样，这只是一个上限，因为还有其他原因来使用2-of-2multisig以一种与Lightning无关的方式。</p>
<p>我们确认了潜在涉及开放和关闭私有通道的77245对交易，但可能有很大的误报率。因此我们开发了一个<code>tracing heuristic</code> ，它遵循在公共通道打开和关闭时启动的“剥离链”，以识别任何相关的私有通道。</p>
<p><strong>跟踪启发式</strong>：接下来，我们不仅关注单个交易的属性，同时也关注交易之间的比特币流动，特别是，我们观察到，用户以”剥夺链模式”打开通道是常见的，这意味着他们会（1）使用打开通道这笔交易带来的改变继续创建通道并且（2）使用通道关闭交易的输出来打开新的通道。此外，（3）他们通常会与关闭通道输出共同花费余额。例如，发起一个通道开启交易，交易的输入地址是前一个通道开启交易的余额，输出地址是前一个关闭通道交易的change（余额？改变？）</p>
<p>通过系统性的识别这些操作，我们能够通过向前和向后跟踪剥离链，将同一Lightning节点打开或者关闭的通道连接起来。通过向后跟踪，我们跟踪每一个输入，直到根据属性启发式，找到一个看起来不是通道打开或关闭的交易。向前跟踪，我们识别交易的余额地址，同样根据属性启发，识别通道的创建地址，从而将余额地址和其他输出地址分离，继续执行直到达到以下其中之一：（1）一个没有余额输出地址或者没有花费的交易，意味着我们继续向前。或者（2）一个不满足属性启发的交易。我们同样为一个已知通道关闭交易的所有输出执行这样的操作，来修正（reflect）上面识别的第二种模式。</p>
<p>我们从我们LN数据集中识别的174378个公开通道开始，通过应用我们跟踪启发式方法，我们最终获得了27386个额外的开启通道交易，其中27183笔交易与我们属性启发式识别的交易属于同一区块范围。</p>
<p>然而，使用跟踪启发式方法，根据peeling chain上交易的共享所有者，不仅识别私有通道，同样允许我们将不同通道聚集起来（公共和私有）。为此，我们首先根据是否出现在同一peeling chain，将不同通道聚集起来，之后，查看每个集群中的公共通道并计算他们端点之间的公共参与者（如果有的话），如果只有单个公共参与者，那么我们就可以放心地将他们标记为负责打开所有这些通道的节点。</p>
<p>为了找到每一个私有通道的另一个端点，我们利用跟踪启发式方法的第二和第三观察模式（只要适用），跟踪了通道关闭交易的关闭输出。特别是，当一个关闭输出的使用是为了打开一个新的通道我们执行了上述同样的集群操作。只有当通道仍然开启，或者通道关闭但是关闭输出未使用，又或者关闭输出没有用在Lightning上时，我们没有识别到第二个参与者。</p>
<p>在我们确定代表开放私有通道的27183笔交易中，我们能够识别两个参与者的交易有2035（7.5%），一个参与者的21557（79.3%），以及没有参与者的3591（13.2%）。然而，我们的识别方法同样适用于公共频道，我们能够识别155202（89.0%）公共通道的开放参与者，同样，对于已经关闭的公共通道（代表185860关闭输出），我们能够将143577（77.25%）个关闭输出与特定参与者相关联。</p>
<h2 id="4-balance-discovery"><a href="#4-balance-discovery" class="headerlink" title="4. balance discovery"></a>4. balance discovery</h2><p>以前的攻击旨在发现于单个通道相关的余额（而不仅仅是他们的容量），利用调试信息作为一个oracle，在这些攻击中，一个攻击者打开一个带有节点的通道，并通过其他通道，路由一个带有关联金额amt的虚假支付哈希。基于收到的错误信息以及对amt的二分查找执行（），攻击者可以有效地确定通道一端的确切余额。在本节中我们在LN测试网络上执行一个新的通用攻击。于之前的攻击相比，我们的攻击必须运行两个节点而不是一个。然而，如果将来删除错误消息或者使其通用化，我们的攻击仍可以继续工作，但是之前的攻击并不能。</p>
<p><strong>攻击</strong>。在我们的攻击中，运行节点A和D的攻击者需要形成一条路径A-&gt;B-&gt;C-&gt;D，目的是寻找通道B-&gt;C的余额。这意味着我们的攻击者需要运行两个节点，一个带有向外输出余额的通道（A），一个带有向内输入余额的通道（D）。创建A-&gt;B的通道容易，因为攻击者可以直接和B打开一个通道并自己资助它，然而开通C-&gt;D的通道更难，因为攻击者必须创建输入余额。</p>
<p>现在，有两个主要的选择来做到这一点，首先，攻击者可以打开通道C-&gt;D并且自己资助他们，但是余额分配给C而不是D（这被称为”为远程余额提供资金“），然而，这存在风险，即C可以立即关闭通道拿走所有资金。我们称这种方法为无辅助通道开放。第二个选择是使用<code>liquidity provider</code>（流动性提供者）（例如Bitrefill或者LNBIG），它是一个售卖带有输入余额通道的服务，我们称这为辅助通道开放。</p>
<p>一旦攻击者创建了A-&gt;B和C-&gt;D的通道，他们通过B和C路由一个随机支付哈希H给D，并带有一些相关金额amt。如果D接收了H，这意味着从B到C的通道有路由支付金额amt的充足余额。如果D在一定时延后没有接收到H，攻击者可以认为支付失败，这意味着amt超出了从B到C的余额。无论哪种方式，攻击者都可以使用对amt的二分查找重复这个过程（正如之前的攻击）。最终，攻击者发现通道的余额即D能接收到H的最大值。</p>
<p>在某种程度上，这种攻击甚至可以推广到两个攻击节点之间存在多个中间通道的情况，然而，在这种更一般的情况下，上面的方法只能识别整个路径的瓶颈余额，而不是单个通道的的余额。但是，再支付失败的情况下，当前C-lightning和LND clients返回一个错误索引error index，它是支付失败的节点位置，这意味着一个攻击者可以准确地知道在较长的路径上支付失败的位置。我们在实施攻击时选择不使用这个索引，以保持它完全通用并只测试基本版本，但将使用索引的攻击留作有趣的未来研究。</p>
<p><strong>攻击结果</strong>。2020.9.3，我们在测试网络上实施了我们的攻击。我们运行了两个LN节点并且资助我们所有通道（无辅助），包括远程和本地，这需要对客户端进行轻微修改（因为完全资助一个远程通道默认是被限制的）。我们与网络中每个可访问节点建立通道，攻击发生时，有3159节点和9136个通道，其中我们能够连接103个节点，攻击1017个通道。但是我们不能连接到整个节点的大部分，这有多种原因：一些节点没有IPv4地址，一些节点不在线，一些关闭了LN端口，还有一些拒绝打开通道。</p>
<p>在这些1017个通道中，我们确定568个通道的余额，很多（65%）是相当片面的，这意味着被攻击方的余额占总容量的70%甚至更多。我们在不成功的通道中收到了各种错误，例如<code>TemporaryChannelFailure</code>，或者我们超时，因为客户端需要超过30s才能返回响应。</p>
<p>由于成本和道德考虑，我们没有主网上实施攻击，但相信攻击在那里可能会表现的更好，这是因为忘记关闭测试网络上的测试通道或者维护一节点不会产生任何成本，而在主网上用户受到机会成本（来自费用）的激励，以确保节点得到维护且通道处于活动状态。</p>
<p><strong>攻击者成本</strong>。在我们的实验中，我们使用了基本上没有价值的测试网货币，因此我们执行攻击的货币成本可以忽略不计。然而，为了理解攻击的实际局限性，我们评估了在主网上的最低成本，当创建A-&gt;B的输出通道时，在比特币网络上攻击者必须支付开通和关闭交易的小费，在我们攻击时，每笔交易的小费是0.00043 BTC。他们还必须用足够的储备satoshis远程资助接收方节点，以允许转发高额支付，当前是通道容量的1%。创建输入通道C-&gt;D时，攻击者可以使用流动性提供商如Bitrefill，他们在撰写本文时允许用户以0.002604BTC购买具有0.16BTC输入容量的通道</p>
<p>目前购买最便宜可用的输入流动性通道将花费攻击者0.00086 BTC和0.005 BTC搁置费用，从而能够路由到4811个通道（总容量45 BTC）。这需要打开2191个具有最大容量为0.04998769 BTC的通道。总的来说，这需要攻击者花费1.097 BTC并暂停109.53 BTC。</p>
<h2 id="5-path-discovery"><a href="#5-path-discovery" class="headerlink" title="5. path discovery"></a>5. path discovery</h2><p>我们现在描述参与路由支付的诚实但好奇的中间节点如何推断有关路径的信息，特别是可以识别支付的发送方和接收方。我们的策略类似于针对Crowds匿名通信网络提出的前身攻击的被动变体。我们的策略可以通过分析稀疏的网络连接和由于通道容量而导致的潜在路径数量有限来进一步扩展。</p>
<p>与之前的工作相比，我们不仅考虑单跳路由，同时还考虑了具有多个中间节点的路由。我们关于攻击者的中间节点做的唯一的假设是，它保持通道平衡，这实际上很容易。</p>
<p><strong>我们定义$Pr_S$ 和 $Pr_R$ 作为攻击者分别成功发现支付中的发送方和接收方的概率。根据我们的符号，Beres等人基于他们自己的模拟结果声称 $Pr_S = Pr_R$ 的范围从0.17到0.37，取决于他们模拟中用的参数。我们认为这个概率实际上是一个下限，因为她并没有考虑多条可能的路径长度或者支付失败的可能性（他们的模拟假设所有支付在第一次尝试时便成功）</strong></p>
<p><strong>我们诚实但是好奇的对手的策略很简单：他们总是猜测他们的直接前驱节点是发送方。换句话说，如果我们定义H为路径上攻击节点的位置，他们总是假设H=1。同样地，他们总是猜测他们直接后继节点是接收方。我们关注它成功猜测发送方的概率</strong>，成功猜测接收方的概率可以用类似的方法计算。</p>
<p><strong>成功支付</strong>。我们首先分析攻击者在支付成功的情况下成功的概率，我们将其表示为$Pr_S^{succ}$ ，我们将路径长度为$\ell$ 的概率定义为$Pr[L=\ell]$ ，将给定路径长度为$\ell$ 时，攻击者节点在$h$位置的概率为$Pr[H=h|L=l]$ ，根据Lightning规范，最大路径长度时20，通过遵循上述策略，我们有：</p>
<script type="math/tex; mode=display">
\begin{aligned}
\operatorname{Pr}_{S}^{\text {succ }}=& \sum_{\ell=3}^{20} \operatorname{Pr}[L=\ell \mid \text { succ }] \cdot \operatorname{Pr}[H=1 \mid L=\ell, \text { succ }] \\
=& \operatorname{Pr}[L=3 \mid \text { succ }] \\
&+\sum_{n=4}^{20} \operatorname{Pr}[L=\ell \mid \text { succ }] \cdot \operatorname{Pr}[H=1 \mid L=\ell, \text { succ }]
\end{aligned}</script><p>因为攻击者是唯一中间节点时，$Pr[H=1|L=3,succ] = 1$ ，因此，$Pr[L=3]|succ$ 是$Pr_S$的下限。</p>
<p>为了考虑总体概率，我们关注条件概率$Pr[H=1|L=\ell,succ$ ，如果所有节点形成一个小团体，任意节点在处于任何跳跃位置H=h的可能性几乎相等，（分布不完全统一的唯一原因是一些通道会比其他通道被选择的更频繁，这取决于他们收取的相对费用，但是攻击者会选择尽可能接近其邻居的费用）在这种情况下，$H=1$的概率仅有$1/(\ell-2)$ </p>
<p><strong>失败支付</strong>。同样地，在支付失败的情况下，我们定义概率$Pr_S^{fail}$ 为</p>
<script type="math/tex; mode=display">
Pr_S^{fail} = \sum_{\ell=3}^{20}Pr[L=\ell|fail] \cdot Pr[H=1|L=\ell,fail]</script><p>这与$Pr_S^{succ}$ 相同，但我们知道$Pr[L=3|fail] = 0$ ，因为如果攻击者是唯一的中间节点，支付不会失败。此外，条件概率$Pr[H=1|L=\ell,fail]$ 与$Pr[H=1|L=\ell,succ]$ 不同，因为支付失败的事实向攻击者揭露了他们作为中间节点的角色。特别是，如果一个中间节点成功地将支付转发给后继节点但是交易最终失败，那么这个节点就知道他的直接后继不是支付的接收方，失败路径长度$L \ge 4$ ，且他的位置不是L-1.这意味着$Pr[L=\ell | fail]$ 就变成了$Pr[L=\ell | fail,\ell \ge 4]$ ，我们因此得到：</p>
<script type="math/tex; mode=display">
\begin{aligned}
Pr_S^{fail} =& Pr[L=4|fail,\ell \ge 4] \\ 
&+ \sum_{\ell=5}^{20}Pr[L=\ell|fail] \cdot Pr[H=1|L=\ell,fail]
\end{aligned}</script><p>因此，支付失败的情况下，$Pr[L=4|fail,\ell \ge 4]$ 是下限，正如我们在支付成功时做的，我们假设clique topology是他们最佳策略，这种情况下，他们猜测自己位置的概率是$1/(\ell-3)$ （因为他们知道他们不是最后一个），我们因此得到：</p>
<script type="math/tex; mode=display">
Pr_S^{fail} = Pr[L=4|fail,\ell \ge 4] + \sum_{\ell=5}^{20}Pr[L-\ell|fail] \cdot \frac{1}{\ell-3}</script><h3 id="5-1-lightning-network-simulator"><a href="#5-1-lightning-network-simulator" class="headerlink" title="5.1 lightning network simulator"></a>5.1 lightning network simulator</h3><p>​    为了调查路径上攻击者的成功，我们需要测量他需要从实时网络种获得的重要资源，例如支付的平均路径长度。考虑到这可能带来财务和道德问题，我们做出了与前面工作同样的决定，即构建一个Lightning网络模拟器来执行我们的分析。我们用2624行Python3代码实现了我们的模拟器，并将其作为开源软件发布。</p>
<p><strong>网络拓扑</strong>。正如在第二章所提到的，我们将网络表示为图 G = (V , E)。我们从收集的快照中获得关于V和E的信息，正如我们在3.1节所讲，其中还包括额外的信息，如容量和费用。因此我们模拟器的网络拓扑视图是实际公共网络的精确表示。</p>
<p><strong>地理定位</strong> 。节点可以发部IPv4、IPv6或者.onion洋葱地址又或者这些地址的结合。如果一个节点公布了一个IPv4或者IPv6地址，我们使用它来为这个节点分配一个响应的地理位置。这使得我们能够根据节点间的距离并遵循先前对Verizon的使用全局IP延迟的研究来精确地模拟节点之间路由数据包的TCP延迟。对于只发布.onion洋葱地址的节点，考虑到与洋葱网络相关的更高延迟，我们根据Tor metrics发布的统计数据分配延迟。</p>
<p><strong>路径选择</strong> 。如第二节所讨论的，在LN中到目的地的路由仅仅由支付发送方单独构建，所有客户端通常目标是找到网络上的最短路径，它意味着最低手续费。然而，正如Tochner等人所展示的，路由算法和手续费计算在客户端软件的三个主要选择：Ind、clightning、eclair中都不同，我们不能简单地从这些不同的实现中提取或者孤立路由算法，因此我们自己实现所有这三个版本的路径选择算法。我们使用Yen’s k-shortest路径算法和 networkx Dijkstra’s SPF算法实现。</p>
<p><strong>软件版本</strong> 。我们搜集的快照不包括有关软件版本的信息，因此我们抓取了1ML网站上列出的每个节点的所有者信息字段，尽管其中91%这个字段都是空的，但结果让我们至少可以估计客户端软件的分布。我们得到了370个节点的信息，发现其中292个是Ind，54个是c-lightning，24个是eclair。我们根据这个分布随机为网络中剩余的节点分配了软件版本信息，然后根据软件版本改变路径选择算法中weight函数</p>
<p><strong>支付参数</strong> 。我们第一个参数$t<em>{pay}$ 代表LN网络中每天发生的支付总数。为此，我们使用了LNBIG的估计值，在写本文时，LNBIG是拥有超过网络总容量40%的最大节点。根据LNBIG，每天通过网络路由交易的总数是1000-1500笔，但这不包括通过直接通道（direct channel）支付的交易。考虑到这个估值，我们对$t</em>{pay}$ 使用两个值：1000，代表对今天交易量的轻微低估；10000，代表对LN未来的潜在估计。</p>
<p>​    我们还定义确定一个支付的发送方和接收方的参数为<code>endpoints</code> ，我们为这个参数定义了两个值：<code>uniform</code> ，意味着支付的参与方是随机均匀选择的，<code>weighted</code> 代表着参与者是根据加权分布随机选择的，这个加权分布考虑到他们<code>direct channel</code> 数量（即他们的<code>度</code>）。同样地，我们使用<code>values</code>来确定支付的值，当values is cheap，支付值是发送方可以发送的最小值，当values is expensive，支付值是发送方可以发送的最大值。</p>
<h3 id="5-2-simulation-result"><a href="#5-2-simulation-result" class="headerlink" title="5.2 simulation result"></a>5.2 simulation result</h3><p>​    给定参数$t<em>{pay}$ ，endpoints 和 values，我们运行两个模拟实例，目标是为路径上的对手找到最坏情况和最好情况。根据$Pr</em>{S}^{succ}$ 和 $Pr<em>S^{fail}$ 各自的概率，<strong>我们可以看到最坏情况是路径长，支付可能成功，最好情况是路径短，支付可能失败。</strong>由于$t</em>{pay}$ 的总量并不影响路径的长度，我们对两个实例都使用 $t_{pay} = 1000$ 。每一个模拟器实例使用2020.9.1抓取的网络和节点参数运行。</p>
<p>​    在我们第一次模拟中，$lengths<em>{long}$ ，我们的目标是捕捉对手的最坏情况。这意味着我们选择$ endpoints = uniform$ ，以便发送方和接收方的选择不会受到连接的影响，因此路径不会由于他们潜在高连接性而很短。类似地，我们选择 $values = cheap$ 来使得支付失败的可能性最小。我们第二次模拟时，$lengths</em>{short}$ 我们的目标是捕捉对手的最好情况，所以我们选择$endpoints = weightes$ 来确保更频繁地选择高度连接的节点，因此路径更短。我们还选择$values = expensive$ ，来确保很多支付失败。</p>
<p><img src="An-Empirical-Analysis-of-Privacy-in-the-Lightning-Network/image-20210915144445146.png" alt="image-20210915144445146"></p>
<p>​    如图1所示，即使是当我们尝试在$lengths<em>{long}$ 中最大化路径长度时，14.98%的路径仍然只包含一个跃点hop，在 $lengths</em>{short}$ 中，56.65%的路径包含单个跃点hop，这一区间与最近的研究一致，该研究认为17-37%的路径只有一个中间节点，即使在$length_{long}$ 中路径都很短的主要的原因是网络拓扑和客户端路径选择算法对路径长度的影响比endpoints和values更大。</p>
<p>​    除了图1的结果之外，运行我们的模拟器使我们能够估计对对手来说最好和最坏情况下，$Pr[L = \ell], 3 \le \ell \le 20$ 的概率。我们现在使用这些结果来计算    当对手只有在不可能出错时（LowerBound）成功的情况   以及clique topology（clique）的情况下    $Pr_S^{succ}$ 和 $Pr_S^{fail}$ 的概率，如图2 所示，其中clique topology 对对手来说是最坏情况，因为较不完整的拓扑将允许对手排除无法参与支付的节点从而增加他们的信心。</p>
<p><img src="An-Empirical-Analysis-of-Privacy-in-the-Lightning-Network/image-20210924141246951.png" alt="image-20210924141246951"></p>
<p>​    当 L = 3 时，$Pr<em>S^{succ}$ 是有下界的，因为在这种情况，对手不可能出错，类似地，当 L = 4时，$Pr_S^{fail}$ 也有下界。在成功支付的情况下，$Pr_S^{succ}$ 的下界范围从15%（$lengths</em>{long}$） 到 57% （$lengths<em>{short}$）。另一方面，$Pr_S^{fail}$ 的下界随着不成功尝试的百分比而增加，高达83%($lengths</em>{short}$) ，这明显高于之前所有实验的记录。这也不仅是理论结果：根据最近的测量，34%的支付在第一次尝试时失败。</p>
<p>​    <strong>我们的测量表明，即使采用极度简单策略的对手，也会有很高的概率推断通过其路由的支付的发送方，特别是支付失败时。这可能是由于LN的高度中心化拓扑结构，这意味着路径很短并且经常涉及相同的中间节点，以及客户端被设计为寻找cheapest 也就是 shortest路径因此，如果没有客户端或者网络拓扑结构的改变，中间节点很可能会继续违反路径上的匿名关系。</strong> </p>
<h2 id="6-payment-discovery"><a href="#6-payment-discovery" class="headerlink" title="6. payment discovery"></a>6. payment discovery</h2><p>​    在本节中，我们根据攻击者了解其未参与路由的支付信息的能力，分析了Lightning中非路径支付隐私。</p>
<p>​    非正式地，我们的攻击工作如下：使用在第四节描述的余额发现攻击，攻击者构建了一个在t时的网络快照，包括所有通道和他们相关的余额。然后在$t+\tau$时再一次发起这个攻击，并且使用两次快照的差异通过查看任何改变的路径来推断发生的支付信息，在最简单的情况下，即在t到$t+\tau$时间段内只有一个支付发生（并且假设所有小费都是0），攻击者可以看到单一路径，只有他的余额改变了amt并且因此得到关于这次支付的所有信息：发送方，接收方，支付值amt。更一般地说，两次支付使用的路径可能重叠，所以一个攻击者需要启发式地识别这种重叠并且相应地分离支付。</p>
<h3 id="6-1-payment-discovery-algorithm"><a href="#6-1-payment-discovery-algorithm" class="headerlink" title="6.1 payment discovery algorithm"></a>6.1 payment discovery algorithm</h3><p>​    我们定义$\tau$ 为攻击者能够捕获两个快照$S<em>t$ 和 $S</em>{t+\tau}$ 的时间间隔，令$G<em>{diff} = S</em>{t+\tau} - S<em>t$ 为每个通道的余额差异，我们的目标是将$G</em>{diff}$ 分解为代表不同支付的路径。更具体地说，我们构建路径如下：（1）路径上的每条边都有相同的交易值amount（包含fees），（2）所有路径的并集得到整个图的$G_{diff}$ ，（3）总路径数最小。最后一个要求是要避免拆分多跳支付，：如果有一个经路径A-&gt;B-&gt;C的支付，我们不希望把他算作从A-&gt;B 和 B -&gt; C 的两个（等大小的）支付。</p>
<p>​    在路径不相交的假设下，我们给出了一个简单的解决上述问题的算法。这个路径不相交的假设可能不总是成立，但是我们会在第6.3节看到，当两个快照间的时间间隔相对短时，它通常成立。我们的算法通过反复”合并”支付路径推进。我们最初将图$G_{diff}$ 中每一条非零边视为不同的支付，然后我们选择一条具有差异amt的任意边，并且将它和具有同样支付额（加上公开的fee f）的任意相邻边合并，直到没有amt的边可以合并。</p>
<p>$A \xrightarrow{amt + f<em>{A,B} + f</em>{B,C}} B,B \xrightarrow{amt + f_{B,C}} C \Rightarrow infer\ payment\ A\ to\ C$ </p>
<p><img src="An-Empirical-Analysis-of-Privacy-in-the-Lightning-Network/image-20210923171013030.png" alt="image-20210923171013030"></p>
<p>​    然后我们从$G_{diff}$ 中移除这条边并继续上述合并过程，对于E条边，该算法的渐进运行时间为$O(|E|^2)$ ，考虑到当前LN的规模和稀疏性，这意味着他的运行时间不到一秒。</p>
<p>​    这种算法还有其他几种方法可以做出错误的推断。首先，他会错误地合并两个相同值的端到端支付A-&gt;B 和 B -&gt; C。其次，我们的算法不能尝试解决一个单通道被用来为在相同时间间隔的多个支付路由的情况。展望6.3节，我们的实验表明当快照间隔足够短时，这种情况不常发生。最后，正如我们在第4节看到的，余额发现攻击对于某些（或许许多）通道来说可能会失败。我们的算法采用了一种保守的方法，来最小化误报率：作为最后的过滤步骤，它抑制任何数量相同的推断支付对（在两个satoshis的小阈值内）。</p>
<h3 id="6-2-attack-simulation"><a href="#6-2-attack-simulation" class="headerlink" title="6.2 attack simulation"></a>6.2 attack simulation</h3><p>​    我们使用P表示攻击者的精确度（正确检测到的支付次数除以检测到的支付总数），用R表示召回率（正确检测到的支付数量除以实际支付数量）。我们主要感兴趣的是理解这些性能指标如何依赖于攻击者获取快照的时间间隔（$\tau$），尽管我们也在附录C中提出一个基于打开通道数(n)的攻击者召回分析。</p>
<p>​    为了回答这些问题，我们利用我们在5.1节中开发的模拟器，并将其扩展为包含第4节中的余额发现攻击。由于在这个攻击中98%的错误是因为一个基点不在线或者没有参与到任何支付中，我们设置设置它在两个节点都在线的功能性通道上失败的概率为0.05。与第5.1节中的讨论保持一致，我们使用$t_{pay} = 2000$ 作为每天支付的总数，并从网络中的所有节点随机抽取发送方和接收方。就支付价值而言，我们的模拟是一个悲观的场景，其中支付金额非常小（平均1000 satoshis），但是在该平均值附近的小范围内均匀波动（$\pm 10$ satoshis）。这是悲观的因为它接近最坏情况，即所有支付的金额都相等，但是两个因素使得现实世界的支付有更大的变化：（1）支付以细粒度单位计价（1 satoshi = 1E-8 BTC），（2）钱包通常支持通过应用实时比特币汇率生成以法定货币为单位的支付发票，这是不稳定的。</p>
<h3 id="6-3-simulated-attack-results"><a href="#6-3-simulated-attack-results" class="headerlink" title="6.3 simulated attack results"></a>6.3 simulated attack results</h3><p>​    为了弄清楚快照间隔$\tau$ 对P和R的影响，我们从$\tau = 1$ 到 $\tau = 2^8$ 秒的不同时间间隔内拍摄整个网络的平衡推断快照。每次，我们运行这个模拟器30天，总计60000笔付款。图3显示了$\tau$ 和推断出的支付数量的关系，并证实了攻击者在快照之间等待的时间越长攻击效果越差的直觉，因为这会导致多笔支付之间的重叠。然而，在某些时候，越来越快的采样会带来收益递减，例如，对于$\tau = 32秒$ ，攻击者的召回率R为66%，在$\tau = 1秒$时缓慢增加到74.1%，在现实的最小值$\tau = 30秒$ 时，这是我们和其他人在单个通道上运行余额发现攻击所花费的时间，攻击者有超过67%的召回率。由于我们发现算法的最终过滤步骤，对于较小的$\tau$ 值，我们的精度P非常接近95%。</p>
<h2 id="7-conclusion"><a href="#7-conclusion" class="headerlink" title="7. conclusion"></a>7. conclusion</h2><p>​    在本文中，我们系统地探讨了LN的主要隐私属性，并表明至少在其存在状态下，每一个属性都容易受到攻击。不像先前的证明加密货币的理论隐私和可实现隐私之间存在类似的差距的工作，我们的研究并不依赖于使用模式或者用户的行为。相反，允许用户执行网络基本功能的相同的接口（例如连接节点和路由支付），也可能被利用来学习本应该保密的信息。这表明，这些限制可能在某种程度上时固有的，或者至少避免这些限制需要在设计级别而不是单个用户级别上的改变。</p>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>An Update on Integrating Zcash on Ethereum (ZoE)</title>
    <url>/An-Update-on-Integrating-Zcash-on-Ethereum-ZoE.html</url>
    <content><![CDATA[<p>原文地址：<a href="https://blog.ethereum.org/2017/01/19/update-integrating-zcash-ethereum/" target="_blank" rel="noopener">An Update on Integrating Zcash on Ethereum (ZoE) | Ethereum Foundation Blog</a></p>
<p>​    以太坊研发团队成员和Zcash公司正在合作一个研究项目，旨在解决区块链中可编程性和隐私性的结合问题。这篇联合文章同时发在了<a href="[An Update on Integrating Zcash on Ethereum (ZoE">Zcash blog</a> - Electric Coin Company](<a href="https://electriccoin.co/blog/zcash-eth/" target="_blank" rel="noopener">https://electriccoin.co/blog/zcash-eth/</a>)) ，由Ariel Gabizon（Zcash）和Christian Reitwiessner（Ethereum）共同撰写。</p>
<p>​    以太坊灵活的智能合约接口支持各种各样的应用程序，其中许多可能尚未被构思出来。当增加了隐私保护的能力，这种支持应用程序的可能性会大大增加。例如，你可以想象一下，通过智能合约在区块链上的选举或者拍卖，结果可以被任何区块链上的观察者验证，但是个人投票或竞标情况不会被披露。另一个可能的场景可能涉及到可选择的披露，用户拥有能力来证明他在某一个城市但是不暴露确切的位置。在Ethereum上增加这种能力的关键是零知识简洁非交互知识论证（zero-knowledge succinct non-interactive arguments of knowledge，zk-SNARKs）——这正是Zcash底层的加密引擎。</p>
<p>​    Zcash公司的代号为炼金术项目的目标之一时实现以太坊和Zcash的直接去中心化交易。连接这两种区块链和技术（一种侧重于可编程性，另一种侧重于隐私），是促进需要两者的应用程序开发的自然方式。</p>
<p>​    作为Zcash/Ethereum技术合作的一部分，Zcash的Ariel Gabizon几周前访问了位于柏林的以太坊中心Christian Reitwiessner。此次访问的重点是使用Solidity编写的zk-SNARK验证器的概念实现证明，该验证器基于为以太坊C++客户端实现的预编译以太坊合约。这项工作实现了初期的ZoE，其中zk-SNARK预编译合约是为Parity（以太坊Rust客户端）编写。我们的更新包括增加了微小的加密原语（椭圆曲线乘法、加法和配对）并在Solidity中实现了其余部分，所有的这些都提供了更大的灵活性并且允许使用各种zk-SNARK结构而无需硬分叉。详细信息将在稍后公布，我们在以太坊区块链的测试网络上成功验证了一个真实的隐私保护Zcash交易，从而测试了新代码。</p>
<p>​    验证只花了42毫秒，这表明这种预编译合约可以添加，并且使用它们花费的gas可以相当的实惠。</p>
<h2 id="What-can-be-done-with-such-a-system"><a href="#What-can-be-done-with-such-a-system" class="headerlink" title="What can be done with such a system"></a>What can be done with such a system</h2><p>​    Zcash系统可以在以太坊上重复使用，来创建shielded custom tokens，这样的tokens已经支持许多应用比如投票或者简单的盲目拍卖，参与者在不知道其他人出价的情况下出价竞标。</p>
<p>​    如果要尝试编译概念证明，可以使用以下命令，如果需要帮助，参阅<a href="https://gitter.im/ethereum/privacy-tech" target="_blank" rel="noopener">https://gitter.im/ethereum/privacy-tech</a> </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/scipr-lab/libsnark.git</span><br><span class="line"><span class="built_in">cd</span> libsnark</span><br><span class="line">sudo PREFIX=/usr/<span class="built_in">local</span> make NO_PROCPS=1 NO_GTEST=1 NO_DOCS=1 \</span><br><span class="line">   CURVE=ALT_BN128 \</span><br><span class="line">   FEATUREFLAGS=<span class="string">"-DBINARY_OUTPUT=1 -DMONTGOMERY_OUTPUT=1 \</span></span><br><span class="line"><span class="string">   -DNO_PT_COMPRESSION=1"</span> \</span><br><span class="line">   lib install</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">git <span class="built_in">clone</span> --recursive -b snark https://github.com/ethereum/cpp-ethereum.git</span><br><span class="line"><span class="built_in">cd</span> cpp-ethereum</span><br><span class="line">./scripts/install_deps.sh &amp;&amp; cmake . -DEVMJIT=0 -DETHASHCL=0 &amp;&amp; make eth</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">git <span class="built_in">clone</span> --recursive -b snarks https://github.com/ethereum/solidity.git</span><br><span class="line"><span class="built_in">cd</span> solidity</span><br><span class="line">./scripts/install_deps.sh &amp;&amp; cmake . &amp;&amp; make soltest</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">./cpp-ethereum/eth/eth --<span class="built_in">test</span> -d /tmp/<span class="built_in">test</span></span><br><span class="line"><span class="comment"># And on a second terminal:</span></span><br><span class="line">./solidity/<span class="built_in">test</span>/soltest -t <span class="string">"*/snark"</span> -- --ipcpath   /tmp/<span class="built_in">test</span>/geth.ipc  --show-messages</span><br></pre></td></tr></table></figure>
<p>​    我们还讨论了将zk-SNARK集成到以太坊区块链中的各个方面，现在进行扩展</p>
<h2 id="Deciding-what-precompiled-contracts-to-define"><a href="#Deciding-what-precompiled-contracts-to-define" class="headerlink" title="Deciding what precompiled contracts to define"></a>Deciding what precompiled contracts to define</h2><p>​    回想一下，SNARK是一些属性的简短证明，向以太坊添加隐私功能所需要的是能够验证此类证明的客户端。</p>
<p>​    在所有最近的构造中，验证过程仅仅包括对椭圆曲线的操作。具体来说，验证者需要对椭圆曲线组进行标量乘法和加法，并且可能还需要称为双线性配对的更重的操作。</p>
<p>​    如在此处所说，直接在EVM上实现这些操作成本太高，因此，我们希望实现执行这些操作的预编译合约。现在，有争论的问题是：这些预编译的合约应该达到什么程度的通用性。</p>
<p>​    SNARK的安全级别对应于曲线的参数。粗略来说，曲线阶数越大，嵌入度就越大，基于曲线的SNARK就越安全。另一方面，这些数量越大，自然地，在相应曲线上的成本就越高，因此，使用SNARK的合约设计者可能希望根据他们自己所需要的效率/安全权衡来选择参数。这种权衡是实现高度通用性的预编译合约的一个原因，合约设计者可以从大量曲线中进行选择。实际上，我们一开始的目标是高度通用性，曲线的描述作为合约输入的一部分给出，在这种情况下，智能合约将能够在任何椭圆曲线组中执行加法。</p>
<p>​    这种方法的一个复杂之处是将gas消耗分配给操作，你必须仅仅通过曲线的描述在不能访问特定实现的情况下，评估在该曲线上的组操作在最坏情况下的成本有多大。一种不大通用的方法是允许给定族中的所有曲线。我们注意到在使用Barreto-Naehrig(NG)曲线族时，可以大致评估给定曲线参数的配对操作的成本，因为所有这种曲线都支持特定类型的最佳Ate配对。下面是预编译如何工作以及gas消耗是如何计算的：</p>
<p>​    我们从这场辩论中学到了很多，但最终，我们决定在这个概念证明中保持简洁：我们选择为Zcash中正在使用的特定曲线实现合约。我们通过使用在libsnark函数库中相应函数的包装器来做到这一点，Zcash也是这么做的。</p>
<p>​    注意，我们可以简单地为Zcash当前使用的整个SNARK验证函数使用一个包装器，正如上面提到的早期ZoE项目所做的。然而，明确定义椭圆曲线操作的优势是能够使用各种SNARK结构，同样，所有这些结构都具有通过前面提到的三个椭圆曲线操作的某种组合来工作的验证器。</p>
<h2 id="Reusing-the-Zcash-setup-for-new-anonymous-tokens-and-other-applications"><a href="#Reusing-the-Zcash-setup-for-new-anonymous-tokens-and-other-applications" class="headerlink" title="Reusing the Zcash setup for new anonymous tokens and other applications"></a>Reusing the Zcash setup for new anonymous tokens and other applications</h2><p>​    你可能已经听说，<strong>使用SNARKs需要一个复杂的setup阶段，在这个阶段，构建所谓的系统公共参数。我们每次想要对特定电路使用SNARKs时，这些公共参数都需要以一种安全的方式生成，这大大阻碍了SNARKs 的使用。</strong>简化这个setup阶段是我们考虑过的一个重要的目标，但是到目前为止还没有任何成功。</p>
<p>​    好消息是，想要发行支持隐私保护交易token的人可以简单地<strong>重复使用Zcash早已安全生成的公共参数。它能被重复使用因为这个用来验证隐私保护交易的电路并不是固有地与一种货币或者区块链绑定。</strong>相反，其显式输入之一是包含所有有效票据的Merkle树根。因此可以根据人们希望使用的货币来更改此输入。而且，如果很容易开启一个新的匿名token，你已经可以完成许多乍一看不像token的任务。例如，假设我们希望进行匿名选举以在他们两个选项中选择一个首选选项。我们可以为投票发行一个匿名的自定义token，并且向每个投票方发送一枚硬币。因为没有挖矿，因此不可能以任何其他方式生成tokens。现在每一方根据他们的投票将他们的硬币发送到两个地址之一。最终余额较大的地址对应选举结果。</p>
<h2 id="Other-application"><a href="#Other-application" class="headerlink" title="Other application"></a>Other application</h2><p>​    下面是一个非基于令牌的系统，他构建起来相当简单，并允许选择性揭露。例如，你可以定期将包含你的物理物质的加密信息发送到区块链（可能带有其他人的签名以防止欺骗）。如果你为每条消息使用不同的密钥，你只能在特定的时间通过公开你的密钥来揭露你的位置。然后，使用zk-SNARKs，你还可以证明你在某个区域，而不透露你的确切位置。在zk-SNARK中你解密你的位置并检查它是否在该区域内。由于零知识属性，每个人可以验证该检查，但没有人能够检索到你的实际位置。</p>
<h2 id="The-work-ahead"><a href="#The-work-ahead" class="headerlink" title="The work ahead"></a>The work ahead</h2><p>​    实现上述功能——在以太坊区块链上创建匿名token并验证Zcash交易——需要使用solidity实现Zcash使用的其他元素</p>
<p>​    对于第一个功能，我们必须实现由Zcash网络上节点执行的任务例如更新note commitment tree</p>
<p>​    对于第二个功能呢，我们需要实现Zcash使用的equihash工作证明算法。否则，可以验证交易本身是有效的，但是我们不知道这笔交易是否实际集成到Zcash区块链中</p>
<p>​    幸运的是，这样的实现已经完成，然而，他的效率需要提高才能在实际应用中使用。</p>
]]></content>
      <categories>
        <category>零知识证明</category>
      </categories>
      <tags>
        <tag>论文</tag>
        <tag>零知识证明</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 中 Arrays类中的binarySearch0方法中，没找到target为什么返回-(low+1)</title>
    <url>/Arrays%E7%B1%BB%E4%B8%AD%E7%9A%84%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%B2%A1%E6%89%BE%E5%88%B0%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%94%E5%9B%9E-(low+1).html</url>
    <content><![CDATA[<h1 id="Java-中-Arrays类中的binarySearch0方法中，没找到target为什么返回-low-1"><a href="#Java-中-Arrays类中的binarySearch0方法中，没找到target为什么返回-low-1" class="headerlink" title="Java 中 Arrays类中的binarySearch0方法中，没找到target为什么返回-(low+1)"></a>Java 中 Arrays类中的binarySearch0方法中，没找到target为什么返回-(low+1)</h1><p>Arrays类中的binarySearch方法源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Like public version, but without range checks.</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch0</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low = fromIndex;</span><br><span class="line">    <span class="keyword">int</span> high = toIndex - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (low + high) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> midVal = a[mid];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (midVal &lt; key)</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (midVal &gt; key)</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> mid; <span class="comment">// key found</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -(low + <span class="number">1</span>);  <span class="comment">// key not found.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>整体来说跟我们自己写的二分查找没有太大的区别，只是在最后，没有找到target时，返回的值是-(low+1)，这是为什么呢？</p>
<p>没找到的情况有以下几种：</p>
<ol>
<li>数组中所有值都大于target，此时只有low不断右移，最后结束循环时，<code>low = a.length</code> ;</li>
<li>数组中所有值都小于target，此时只有high不断左移，最后<code>low = 0</code>, <code>high = -1</code> ;</li>
<li>数组中不存在target，结束循环时，<code>a[low] &gt; targe</code>, <code>a[high] &lt; target</code> ;</li>
</ol>
<p>总的来说，while循环结束而方法没有结束时，low值一定是target的插入位置（target在数组中不存在）。而插入位置的取值是: <code>[0,a.length]</code>，为什么返回-(low+1)呢？返回负值好理解，表示数组中没有target值，而为什么不能直接返回<code>-low</code>的原因就是有0的存在，返回-low仍是0，便不能判断数组中是不是存在target，<code>low+1</code>保证了它的值大于0，取负值后便一定小于0。</p>
<p>所以如果我们想要用该方法找到数组中target的插入位置时，别忘了对返回值再取个相反数，然后再减个 1 哦，即-(-(low + 1)) - 1 = low + 1 - 1 = low， 就是我们想要的了。</p>
<p><strong>典型应用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> bound = Arrays.binarySearch(sums, target);</span><br><span class="line"><span class="keyword">if</span> (bound &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    bound = -bound - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>补充</strong></p>
<p>为什么使用&gt;&gt;&gt;（无符号位右移），而不是用&gt;&gt;（右移）这是避免数据过大，导致溢出</p>
<p>为什么使用&gt;&gt;&gt;位运算符，而不是直接除以2，这是因为&gt;&gt;&gt;可以提高编程的运行速度</p>
]]></content>
      <categories>
        <category>源码</category>
      </categories>
      <tags>
        <tag>源码</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/BlockChain.html</url>
    <content><![CDATA[<h2 id="Hyperledger-Fabric"><a href="#Hyperledger-Fabric" class="headerlink" title="Hyperledger Fabric"></a>Hyperledger Fabric</h2><p>解决重放攻击的方式：</p>
<ul>
<li>Hyperledger fabric 中，采用了一种混合式解决办法。那就是，用户在交易中加入 <code>nonce</code> 值，该 <code>nonce</code> 值的生成方法根据该交易是否保持匿名有关，交易匿名指交易被 <strong>Tcert</strong> 签名，非匿名指交易被 <strong>Ecert</strong> 签名。更具体的：<ul>
<li>用户使用他们的 <strong>Ecert</strong> 提交一笔交易的时候，在交易中包含的 <code>nonce</code> 值，是他们用相同 <strong>Ecert</strong> 提交的上一笔交易中使用的 <code>nonce</code> 值经过函数 (哈希函数或者计数器函数) 的变换得到的。相同 <strong>Ecert</strong> 提交的第一笔交易中的 <code>nonce</code> 值要么是系统中提前设置好的 (例，包含在创世区块中) 要么是被用户自己选择的。在第一种情况中，创世区块需要包含 <code>nonceall</code>，例如，假定用户的实体标识 IDA，则他使用 <code>Ecert</code> 签名的第一笔交易中的 <code>nonce</code> 值为 <code>nonce(round[0]IDA) &lt;- hash(IDA, nonceall)</code>，其中的 IDA 可认为是 Ecert。从该时刻开始，后继使用相同 Ecert签名的交易，其中的 <code>nonce</code> 值为 <code>nonce(round[i]IDA) &lt;- hash(nonce(round[i-1]IDA))</code>，意思就是第 <code>i</code> 笔交易中的 <code>nonce</code> 将会使用 第 <code>i - 1</code> 笔交易中 <code>nonce</code> 的哈希值 (都是指的同一个 Ecert 下的交易)。验证者根据此规则验证交易中的 <code>nonce</code> 值，即将其与本地存储的 Ecert 对应的 <code>nonce</code> 值比对，以及其它约定好的协议规则验证交易，交易通过验证后，验证者将交易存入本地存储中，并更新相应 Ecert 对应的 <code>nonce</code> 值。 <strong>存储开销：</strong> a). 用户这方：仅仅需要存储最近使用的 <code>nonce</code> 值；b). 验证节点这方：O(n)，n 是用户的数量。</li>
<li>用户使用他们的 <strong>Tcert</strong> 提交一笔交易的时候，在交易中应该包含一个随机的 <code>nonce</code> 值，这将会保证两笔交易不会形成相同的哈希值。验证节点将哈希值存储在本地数据库中，如果该笔交易使用的 Tcert 没有过期的话。所以，验证节点在 Tcert 当前或未来的有效期内保持该 Tcert 签名的交易哈希的更新记录。<strong>存储开销：</strong> 仅仅对于验证节点有意义：O(m)，m 是 Tcerts 有效期内大约交易的数量。</li>
</ul>
</li>
</ul>
<h2 id="共识算法"><a href="#共识算法" class="headerlink" title="共识算法"></a>共识算法</h2><ol>
<li>PBFT（Practical Byzantine Fault Tolerance）</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>How to bootstrap snarky blockchain</title>
    <url>/How-to-bootstrap-snarky-blockchain.html</url>
    <content><![CDATA[<h1 id="Mining-for-Privacy-How-to-Bootstrap-a-Snarky-Blockchain"><a href="#Mining-for-Privacy-How-to-Bootstrap-a-Snarky-Blockchain" class="headerlink" title="Mining for Privacy:How to Bootstrap a Snarky Blockchain"></a>Mining for Privacy:How to Bootstrap a Snarky Blockchain</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>非交互零知识证明，更具体说是简洁非交互零知识证明（zk-SNARKs，zero-knowledge Succinct No-inactive Arguments of knowledge），已经被证明时区块链和分布式账本领域的瑞士军刀，具有多种在隐私、交互操作、可扩展性方面的应用。<strong>许多常用的SNARK系统依赖结构化参考字符串，这个字符串的安全生成被证明是他们致命弱点</strong>：如果用于生成字符串的随机性是已知的，则证明系统的健全性可能会被破坏，从而对使用他们的底层区块链系统造成毁灭性后果。<strong>在这项工作中，我们首次描述和分析了一种区块链机制，该机制能够产生一个安全的SRS，他的特征是在与区块链协议本身具有可比性的条件下显示安全性的特点。我们的机制利用最近发现的可更新结构化参考字符串来以完全分布式的方式执行安全生成。通过这种方式，SRS源自区块链协议本身的正常执行。不需要额外的安全假设或者链下的计算和\或验证。</strong>我们为这个参数的设置提供了具体的指导，允许在合理的时间段内完成安全设置。我们也提供了一个激励方案，当与更新机制配合使用时，可以适当地激励参与者为安全的参考字符串生成做出贡献。</p>
<h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h2><p>在分布式账本领域，无交互的零知识证明有许多有趣的应用，特别是，他们已经成功被应用到隐私引入这些固有的公共点对点系统中，更值得注意的是，<code>Zerocash</code>证明了他们在创建私有货币方面的用处。除此之外，还有好多建议将相同的技术应用到智能合约以增加隐私性。除了隐私性，其他零知识证明的应用包括区块链的交互操作性和可扩展性</p>
<p>对于这些设计的<strong>实际效率</strong>，有两件事是<strong>最重要的：证明的简洁性，以及验证这些证明的速度</strong>。账本的分布式特性要求大量用户存储和验证每一个证明，这使得许多零知识证明系统不适合。</p>
<p>对所谓的zk-SNARKs的研究旨在精确优化这些特征：证明大小通常在千字节以下，验证时间以毫秒为单位。<strong>众所周知，无交互零知识证明需要一些共享的随机性或者公共参考字符串。</strong>对很多简洁系统，强壮的属性是必须的：<strong>不仅是需要一个共享随机值，而且必须遵守一个特定的结构。</strong>这样的结构化参考字符串（或者SRS）通常由相关的组元素组成，例如：$g^{x^i}$​​​ 对于$i \in Z_n$​​​ 。</p>
<p><strong>从公共随机数中采样这样一个参考字符串的明显方法揭示了所使用的指数——对这些值的掌握破坏了这个证明系统本身的稳定性。</strong>更糟糕的是，这些系统的安全性通常依赖于指数知识的假设，这个假设表明了以这种方式创建相关的组元素需要知道基础指数，因此任何SRS采样器都必须知道这个被使用的指数并且被信任可以消除他们，从而有效的变成一个底层系统的单点故障。虽然安全多方计算能够并且已经被用于减少在设置过程中的这类信任，安全计算参与者的选择和MPC协议生成SRS的验证保留了中心化的元素。在需要SNARKs的去中心化系统的设置中使用MPC仍然有争议。</p>
<p><strong>最近的工作已经发现了具有可更新参考字符串的简洁零知识证明系统。在这些系统中，给定一个参考字符串，有可能产生一个更新参考字符串</strong>，因此要知道新字符串的trapdoor，既需要知道旧字符串的trapdoor，也需要知道更新中使用的随机性。<strong>推测一个区块链协议可以被用来安全地生成这样一个参考字符串。然而，到目前为止，产生SRS的确切区块链机制以及其可以提供的安全保证的描述仍然难以琢磨。</strong></p>
<h3 id="1-1-我们的贡献"><a href="#1-1-我们的贡献" class="headerlink" title="1.1 我们的贡献"></a>1.1 我们的贡献</h3><p><strong>在这项工作中，我们首次描述和分析了一种区块链机制，这种机制能够产生一个安全的SRS（Structured Reference String ？，结构化参考字符串？），其特征是，在<em>类似的条件</em>下区块链协议被证明是安全的。明显不同的是，我们隐式地使用安全擦除，并且仅仅在一个特定初始化期间需要诚实的大多数。SRS源于区块链协议本身的正常运行，不需要额外的安全假设，或者链下的计算和\或验证。</strong></p>
<p>我们主要依赖”Nakamoto-style”的<code>区块链质量</code>属性——分布式账本，其中一个随机过程选择哪个用户可以将块添加到已建立的链上。这样的账本依赖诚实大多数的哈希算力（或者一些其他资源）——并且可以证明<code>链质量</code>属性，这表明任何足够长链片段都会有一些被诚实节点创建的块。</p>
<p>我们在第三章描述的构造中将参考字符串更新集成到生成块过程中，但是由于更新计算是一个计算量很大的操作（尽管，与暴力破解哈希相反，但是有用），我们面临额外的困难。由此产生了两个方面的问题。首先，攻击团伙可以通过在更新中提供少量的熵来走捷径，并且尝试利用这一额外挖矿能力来推翻这个参考字符串，这可能对攻击者来说有很大的好处。其次，即使是非共谋的理性区块创建者，也有可能被激励来使用不良随机性，这可能减少或者消除更新的任何安全好处。我们的工作解决了这两个问题。</p>
<p><strong>在本文的完整版本中，我们通过在通用可组合模型中提供分析，正式证明了我们的机制产生了一个安全参考字符串。此外，本文的完整版本通过实验分析演示了如何具体参数化工作证明账本，来保证走捷径的攻击者（而诚实的用户不会走捷径）仍然无法subvert破坏参考字符串。</strong>在我们实验章节提供的具体的结果可以用来指导参数的选择，以便在实时区块链系统中运行我们的参考字符串生成机制。</p>
<p>在第四节中，我们更进一步介绍一个激励机制，它能够保证协议中想要最大化利益的理性参与者能够避免低熵攻击。简而言之，激励机制要求最终链中更新贡献者的随机部分会被要求揭示他们的trapdoor，它会被潜在账本规则验证为随机Oracle预言机？输出。只有使用者能够证明他们的更新是随机的，他们才能获得相应的奖励。小心的选择奖励分配能够使我们能够证明，理性的参与者会利用高熵指数，从而为SRS计算做出贡献。</p>
<h3 id="1-2相关工作"><a href="#1-2相关工作" class="headerlink" title="1.2相关工作"></a>1.2相关工作</h3><p>除了与引入可更新字符串的工作的明显关系，还有尝试实际回答如何安全地生成参考字符串的问题。这些是在字符串是不可更新的背景下。</p>
<p>值得注意的是，[5]描述了<code>Sprout</code>在加密货币SRS初始化设置中使用的机制（Sprout是<code>Zcash</code>的第一个版本），它使用了多方计算来生成一个参考字符串，其中包含对初始参与群体的信任根。由于MPC协议的性能限制，尽管只需要但参与者的诚实度，但参与者的集合相对小。</p>
<p>对于<code>Zcash</code>的<code>Sapling</code>版本，当他们的参考字符串被替代的时候（由于零知识语句的升级，并且使用了证明系统），它使用了一个不同的方法。他们在[6]中描述的第二SRS生成机制，使用了一个多阶段轮询机制来为<code>Groth&#39;s zk-SNARK</code>生成参考字符串。他们利用一个随机信标beacon来保证结果的均匀分布，并且使用一个协调器来执行确定性辅助计算。</p>
<p>在无交互零知识证明的设计方面也做了大量工作，这种零知识证明不需要参考文献中的结构，如DARK[8],STARKs[1],Bulletproffs[7]。虽然这些提出了一个很有前途的可替代方案，充分利用参考字符串的可更新性有可能在没有额外安全假设的情况下获得更好的效率，并且可能在实例化通用结构（如基于多项式承诺的<code>Halo Infinite</code>）时发挥作用。</p>
<h2 id="2-可更新的结构化参考字符串"><a href="#2-可更新的结构化参考字符串" class="headerlink" title="2 可更新的结构化参考字符串"></a>2 可更新的结构化参考字符串</h2><p>虽然可更新的结构化参考字符串（updateable structured reference strings，uSRSs）在我们构建的工作[26,3.2节]中建模，但我们在通用可组合模型（UC）设置中对他的安全性进行建模[10]。在此，一个uSRS是一个带有潜在trapdoor $\tau$​​​ 的参考字符串，它具有一个结构函数$S$​​ 。$S(\tau)$​​ 是这个参考字符串本身，但是$\tau$​​​​ 并不会透露给攻击者，在本文的完整版本中[22,附录A]，我们证明了<code>Sonic</code>[26]（正像在2.2节说的，对提取进行了少量修改）满足我们在本节要求的所有属性。我们的主要证明是与<code>Sonic</code>协议无关，并且适用于满足本节其余部分列出的属性的任何可更新的参考字符串方案。</p>
<h2 id="2-1-标准需求"><a href="#2-1-标准需求" class="headerlink" title="2.1 标准需求"></a>2.1 标准需求</h2><p>uSRS方案S由一个trapdoor域T，一个初始trapdoor $\tau_0$​​​​​ ，T上允许置换的集合P（即域和余域为T的双射函数）和域T上的结构函数S组成。我们要求P包括恒等函数id，并在函数组合下封闭：$\forall p_1,p_2 \in P : p_1 * P_2 \in P$​​​​​ 。​一个有效的置换$\dagger $​​​​ 提升应该存在，这样对于任何置换$p \in P$​​​​ 和 $\tau \in T$​​​​ ，$p^{\dagger}(S(\tau)) = S(p(\tau))$​​​ 。最后，必须存在用于创建并验证更新证明的算法$\rho \gets  ProveUpd(S(\tau),p)$​​​ 和算法 $b \gets VerifyUpd(S(\tau),\rho ,S(p(\tau)))$​​​​ 。这些更新证明的格式没有指定，然而必须满足一下约束条件：</p>
<ol>
<li>正确性，应用一个诚实生成的更新证明会验证：$\forall p \in P ,\tau \in T : VerifyUpd(S(\tau),ProveUpd(S(\tau),p),S(p(\tau)))$​ </li>
<li>结构保护，应用任何有效的更新等价于在trapdoor $\forall p,\tau,srs’:VerifyUpd(S(\tau),\rho,srs’) \Rightarrow \exists p \in P: srs’ = S(p(\tau))$​ 应用一些排列。</li>
<li>更新一致性。应用一个随机排序就等价于选择一个新的随机trapdoor：设D是T上的均匀分布，对于所有的$\tau \in T$ ，使得$D<em>\tau$ 是多重集${p(\tau) | p \in P}$ 上的均匀分布，然后$\forall \tau \in T : D = D</em>\tau$ </li>
</ol>
<p>我们定义了一个相应的UC函数FuSRS，它提供了一个参考字符串$S(p(\tau<em>\mathscr{H}))$ ，这个参考字符串能被攻击者通过排列$p\in P$ 影响，仅给定$S(\tau</em>\mathscr{H})$ 作为输入，用户随机采样$\tau\mathscr{H} \in T$ .</p>
<p><img src="How-to-bootstrap-snarky-blockchain/image-20210818211645014.png" alt="image-20210818211645014"></p>
<p>我们相信这个功能是独立的，它没有明确地与我们的实现联系在一起。值得注意的是，当while我们使用分布式账本作为广播通道的弱形式，但可以考虑其他通道，而无需修改此功能。然而，正如前面所说，这个功能并没有规定任何特定的用法，我们推测，当使用适当的结构函数和排列集参数化时，它可以安全地实例化可更新的基于SRS的SNARKs，如Sonic[26],Marlin[11], 或者Plonk[13],由于UC设置，这将需要额外的提升来实现UC知识提取，如[24].</p>
<h3 id="2-2-模拟要求"><a href="#2-2-模拟要求" class="headerlink" title="2.2 模拟要求"></a>2.2 模拟要求</h3><p>除了正确性、结构保持和更新一致性的基本属性外，任何希望通过更新帮助实现$F_{uSRS}$ 的模拟器都需要两个额外的属性：</p>
<ol>
<li>更新证明模拟。从模拟器知道trapdoor的初始SRS $S(\tau)$​ ，它可以生成一个任何（正确结构的）SRS有效更新。形式上：$\exists S<em>\rho \forall \tau_1,\tau_2 \in T: VerifyUpd(S(\tau_1),S</em>\rho(\tau<em>1,S(\tau_2)),S(\tau_2))$​ 其中$S</em>\rho$​时一个PPT算法。</li>
<li>permutation extraction，排列提取？。模拟器必须能够提取任何有效对抗性更新证明背后的排列p</li>
</ol>
<p>实现排列提取最自然的方法时使用白盒提取器，因为更新本身通常依赖于某种形式的知识假设，如指数知识，然而，白盒提取器不能用在UC证明中，相反，我们假设更新证明通过一个低等级的NIZK（Non-interactive zero-knowledge，非交互零知识证明）被证明是与特定的trapdoor相对应。更重要的是，这种低等级的NIZK，仅仅依赖于常见的随机字符串或者一个随机oracle，而不需要结构化的参考字符串。幸运的是，它不像本文完整版本[22,第四节]演示的那样，受到严格的效率要求。</p>
<p>具体来说，我们假设基本更新证明是NIZK关系R中的一个语句，其中见证人是对应排列p的一个编码。我们要求每个更新证明有且仅有一个相应的排列，正式地表示为要求R是一个双射，这导致了对ProveUpd和VerifyUpd的直接修改。即使在UC环境下也允许提取底层排列：ProveUpd还创建了一个NIZK证明$\pi of(\rho,p) $,并且返回$(\rho,\pi)$ ，而VerifyUpd只有这个新嵌入的NIZK证明也验证时才返回true。</p>
<p>如有R的定义，添加此NIZK可以简单保留所有安全属性，包括正确性：</p>
<script type="math/tex; mode=display">
Definition 1. 如果下列关系是双射并且NP，\\那么uSRS是排列可提取的：\\
R := {(ProveUpd(S(\tau),p),p) | \tau \in T,p \in P}</script><p>我们在[22,附录A]中表明，可以有效地构建Sonic[26]的情况所需的关系，并将如何在不依赖于进一步的NIZK的情况下实现提取的问题留给未来的工作。</p>
<h2 id="3-根据链质量属性构建uSRS"><a href="#3-根据链质量属性构建uSRS" class="headerlink" title="3 根据链质量属性构建uSRS"></a>3 根据链质量属性构建uSRS</h2><p>本节展示了如何通过要求块创建者在初始化期间对不断发展的uSRS执行更新来使用分布式账本安全地初始化uSRS，在等待最终uSRS达成一致后，它可以被安全地使用。为了对这种方法正式建模，我们讨论了在模拟证明中使用的理想情况和现实情况。两种情况都可以访问账本，但是理想条件下账本和参考字符串（由独立的$\mathcal{F}_{uSRS}$ 功能提供）是独立的，然而现实情况是账本通过编程使用更新来生成</p>
<h3 id="3-1-高度概括"><a href="#3-1-高度概括" class="headerlink" title="3.1 高度概括"></a>3.1 高度概括</h3><p>本文的这个基本前提依赖于<code>Nakamoto-style</code> 账本的基本操作方式：不同的用户如果满足一些条件可以扩展区块链，这个条件由一种难度有关，这个难度值可以保证攻击者能够执行的扩展数量有限。给定这样一个结构，我们将uSRS更新与时间$\delta_1$​ 之前的每个区块关联起来。这个时间的选择保证账本的安全属性确保此时每个竞争链中至少一个区块是诚实的。</p>
<p>在我们的建模中，我们通过一个<strong>额外的领导状态</strong>的账本功能来构建他，这个领导状态源自嵌在区块中的信息挖掘者。特别对于我们的情况，这些编码的uSRS更新。我们保留足够的通用性来允许其他用途。它的基本思想是要表明，一个在领导状态执行uSRS更新的账本等同于不执行更新，但伴随有$\mathcal{F}_{uSRS}$ 功能。他们分别构成了我们理想情况和真实情况。在$\delta_1$ 之后，用户再等待一段时间$\delta_2$​ 直到公共前缀保证所有各方对参考字符串达成一致。</p>
<p>尽管账本功能常常被视作是全局的，但我们的方法有效地从另一个账本构建了一个账本——账本不是我们协议的一个依赖项，但是是一个组成部分。再这种情况下，全局是无关紧要的，因为环境已经可以直接访问功能，但是我们仍期待构建在账本上的协议能够在全局范围内使用它。对于uSRS来说，情况并非如此，大多数使用可能依赖于模拟器能够提取它的trapdoor。</p>
<h3 id="3-2-我们的账本摘要"><a href="#3-2-我们的账本摘要" class="headerlink" title="3.2 我们的账本摘要"></a>3.2 我们的账本摘要</h3><p>我们对这些可更新结构化参考字符串功能的构造很大程度上依赖于<code>公共前缀,链质量，链增长</code>的属性，这些属性是Garay等人在”Bitcoin backbone”分析中定义[14]，用于<code>Nakamoto-style</code> 共识算法。尽管我们在标题中仅使用了链质量属性，但我们充分利用了这三个属性，而不仅仅是链质量属性。我们强调链质量，因为他是确保一个诚实更新发生的核心属性。我们简单而非正式地重申这三个属性：</p>
<ul>
<li>公共前缀。给定当前两方的链$\varPi_1$​ 和$\varPi_2$​ ，并从第一个开始移除k个块，它是第二个链的前缀：$\varPi_1^{\varGamma k} \prec \varPi_2$</li>
<li>链质量.对于任何一方的当前链$\varPi$​ ，该链中任意连续$l$​个区块将包含诚实方创建的$\mu$​ 个块。</li>
<li>链增长。如果一方链长度为c，那么在s个时间段之后，链长度至少为$c+\gamma$ 。</li>
</ul>
<p>这些参数决定了我们协议的两个阶段的长度，在第一个阶段，我们从liveness parameter（假设$\mu \ge 1$​ ）构建了参考字符串本身，在第二阶段，我们等待这个参考字符串传播到所有用户，第一个阶段的长度至少为$\delta_1 \ge \lceil l\gamma^{-1} \rceil s$​​ ，第二个阶段长度至少为$\delta_2 \ge \lceil k\gamma^{-1}\rceil s$​​ ，他们合起来构成了uSRS的总生成延迟$\delta \ge (\lceil l\gamma^{-1} \rceil + \lceil k\gamma^{-1} \rceil)s$ </p>
<p>我们假设一个保证主干属性的账本。虽然我们没有证明任何具体的现有工作量证明账本（或者基于不同领导选择机制的账本）正式地UC-realise这种特定的形式，我们认为<code>Nakamoto-style</code>共识的所有账本都是这样。账本和论证都在本文的完整版本[22,附录B]呈现，我们的功能进一步依赖一个<code>global clock</code> $\cal{G}_{clock}$​ ，在[22，附录E.1]中定义。本文的目的，这是一个信标，他向请求他们的任何一方提供代表当前时间的单递增值，这就足够了。</p>
<p>除此之外，我们假设每个块都能包含额外的信息，由他的创建者（矿工）提供，这些信息可以被聚合来创建一个”领导者状态“。每一个创建的块与一个更新a相关联，<strong>账本由两个过程<code>Gen</code> , <code>Apply</code> 参数化</strong>，这两个过程<strong>分别描述了更新的诚实选择，和更新的语义。</strong>展望未来，他们在内部使用ProveUpd和VerifyUpd，尽管其形式足够普通允许将leader state用于其他并行目的。这个具体的参数在理想情况和现实情况不同，在理想情况”隐藏“uSRS更新，除此之外，现实情况增加了时间敏感性：在设置期后它对SRS没有任何作用。<strong>Gen</strong>是随机的以leader状态$\sigma$​​​ 和当前时间t作为输入，生成一个更新a,<strong>Apply</strong> 以leader state $\sigma$ 、更新a、和更新时间t为输入，返回继承状态 $\sigma’:\sigma’ = Apply(\sigma,(a,t))$ ，对一个链来说，leader state或许由从初始化状态$\varnothing$​ 开始顺序应用链中所有更新计算得来。</p>
<p>攻击者控制着什么时候、哪一方创建一个新块，同样还有每个新块中包含的交易（只要不违反主干属性）。对于由被破坏的一方创建的交易，攻击者可以更进一步控制块的时间戳（在不存在于未来的合理范围内，并在前一个块之后），以及所需的更新a本身。对于诚实方更新，则使用Gen。</p>
<p>我们的账本提供的接口如下：</p>
<ul>
<li>SUBMIT，提交一个新的交易</li>
<li>READ，读取确定的交易序列</li>
<li>PROJECTION，读取当前链的交易序列（可能是未确认的）</li>
<li>LEADER-STATE，读取确定的leader state</li>
<li>ADVANCE，攻击者将一方切换到更长链</li>
<li>EXTEND，攻击者指示一方创建区块</li>
</ul>
<p>虽然这个账本抽象不是本文的重点，但是我们相信，在需要对矿商的行为进行更精细的控制或者更好地访问竞争链的情况下，它具有独特的便利</p>
<h3 id="3-3-理想情况"><a href="#3-3-理想情况" class="headerlink" title="3.3 理想情况"></a>3.3 理想情况</h3><p>我们的理想环境下由两个并行组合的功能组成（我们的意思是：环境可以解决任何一个问题，而且他们不相互作用）第一个是$\cal{F}<em>{uSRS}$ 的变体，经过修改后，在$\delta$ 时间过去之前，诚实的各方不能进行处理。在形式上，这种改变是使用包装函数$\cal{W}</em>{delay}(\cal{F},\delta)$ 完成的，如[22,附录E，4]所述。</p>
<p>第二个是<code>Nakamoto-style</code>账本功能，通过任意leader-state生成和应用程序进行参数化，这些函数也在混合环境下部分使用：$Gen = Genldeal$ 和 $Apply = ApplyIdeal$ 以及以下账本参数：</p>
<ol>
<li>一个公共前缀参数k</li>
<li>链质量参数$\mu$ 和 $l$</li>
<li>链增长参数$\gamma$ 和 $s$</li>
</ol>
<p>在形式上，我们理想环境下由这对$(\cal{W}<em>{delay}(\delta,\cal{F}</em>{uSRS}),\cal{F}^{ideal}<em>{nakLedger})$ ，以及全局功能$\cal{G}</em>{clock}$ 组成。</p>
<h3 id="3-4-现实与理想的混合情况"><a href="#3-4-现实与理想的混合情况" class="headerlink" title="3.4 现实与理想的混合情况"></a>3.4 现实与理想的混合情况</h3><p>在我们的混合情况中，我们使用uSRS方案$\cal{S}$ ，算法<code>ProveUpd</code>和<code>VerifyUpd</code>，结构函数S，允许排列P，排序提升＋，初始trapdoor $\tau<em>0$ 混合情况由单独的<code>Nakamoto-style</code> 账本 $\cal{F}^{real}</em>{nakLedger}$​ ，一个NIZK功能$\cal{F}^R<em>{NIZK}$ ，和一个全局时钟$\cal{G}</em>{clock}$ 组成，这个账本由与理想情况下同样的链参数和以下leader-state程序进行参数化：</p>
<p><img src="How-to-bootstrap-snarky-blockchain/image-20210818211712095.png" alt="image-20210818211712095"></p>
<p>请注意，这些参数化算法使用$\cal{F}^R_{NIZK}$ ，因此账本依赖于此混合功能。</p>
<p>问题的关键是一旦在初始化块质量期间之后一个块通过共识上链，他可能声明的任何参考字符串更新都不再执行。此时，因为链仍可能被重新组织，uSRS不一定稳定，但是对于特定链来说不应该改变。更进一步，这些程序总是模仿理想情况，扩展他<em>（是指？）</em>而不是取代他。这证明了允许块leader产生更新的可组合性，：一个用于安全更新的系统不会影响leadership state的其他并行使用。</p>
<p>除了保证查询被适当的路由，Uc模拟理想情况的行为几乎不需要做其他工作，特别时如何在混合情况下查询参考字符串。我们在本文的完整版本[22，附录C]中使用一个小”适配器”协议来描述这个，<code>LEDGER-ADAPTOR</code> 。这将转发大多数查询，并且将uSTS查询看作是$\delta$时间后查询leader state的适当部分，在这个时间之前则忽略他们。正式地，我们现实情况是由全局时钟$\cal{G}<em>{clock}$ 和系统<code>LEDGER-ADAPTOR</code> $(\delta,\cal{F}^{real}</em>{nakLedger}(\cal{F}^R_{NIZK}))$ 。</p>
<h3 id="3-5-mathcal-G-clock-​-的替代用法"><a href="#3-5-mathcal-G-clock-​-的替代用法" class="headerlink" title="3.5 $\mathcal{G}_{clock}$​ 的替代用法"></a>3.5 $\mathcal{G}_{clock}$​ 的替代用法</h3><p>在这两个条件下，$\cal{G}_{clock}$​​​​ 被用作确定截断点，在此点之后参考字符串被视作安全的。这个Clock的简单的替代方案是，为此目的而依赖于链的长度。我们没有做出这样的选择，因为它使理想情况变得复杂：延迟包装器必须与理想情况下的账本通信，并且查询各方链的长度。我们不认为时钟是一个重要的额外假设，然而，如果使用链长度代替，本文的剩余部分几乎没有什么不同。即使在这种情况下，时钟的出现也是为了保证火星，尽管它只用于约束攻击者。</p>
<h3 id="3-6-UC仿真"><a href="#3-6-UC仿真" class="headerlink" title="3.6 UC仿真"></a>3.6 UC仿真</h3><p>我们的安全性是通过UC仿真得到的，在以下定理中说明：</p>
<p>定理1.对于任意可更新参考字符串模式S，满足正确性，结构保持和更新一致性以及使用$S<em>p$ 进行更新模拟和排列提取，<code>LEDGER-ADAPTOR</code> （在$(\cal{F}^{real}</em>{nakLedger},\cal{F}^R<em>{NIZK})$ 混合情况下，参数化如3.4节）在存在全局时钟功能$\cal{G}</em>{clock}$ 的情况下，使用模拟器$S<em>{LEDGER-ADAPTOR}$ .UC仿真这对功能$(\cal{F}^{ideal}</em>{nakLedger},\cal{W}<em>{delay}(\delta,\cal{F}</em>{uSRS}))$ ，参数化如3.3节，</p>
<p>完整的安全证明和仿真可以在本文的完整版本中找到[22，附录 F&amp;D]</p>
<h2 id="4-低熵攻击更新缓解"><a href="#4-低熵攻击更新缓解" class="headerlink" title="4 低熵攻击更新缓解"></a>4 低熵攻击更新缓解</h2><p>虽然我们的分析表明，在<code>Byzantine</code>拜占庭，诚实大多数情况下，我们协议生成一个值得信任的参考字符串，他也要求参与者将计算资源用于更新。在合理的情况下，玩家需要合理激励来遵守协议。我们强调理想条件并不是本文的重点，乐观地说，在一个大多数矿工都是理性只有一小部分诚实的环境中，少数诚实的区块足以消除本节中描述的问题。</p>
<p>对于<code>Sonic</code> ，一个协议偏差的存在破坏了参考字符串的安全性：通过以特定的低熵方式选择指数（例如$y=2^l$ ）。主要依赖于重复平方的更新计算可以明显加快。一般来说，P中的一些随机排列可能更有效地计算。更详细地说，与其使用一个随机排列p， 不如做出一个特定的选择来简化srs’的计算，——在最极端的情况下，对于任何uSRS方案，p=id的更新是微不足道的。</p>
<h3 id="4-1-proposed-construction"><a href="#4-1-proposed-construction" class="headerlink" title="4.1 proposed construction"></a>4.1 proposed construction</h3><p>为了缓解这类攻击，我们将需要假设底层账本的一个额外的属性，特别是他必须提供一个可重置的随机信标：对于每一个<code>ADVANCE</code>操作（攻击者必须限制它执行这个操作的频率），一个随机信标值在变量<code>bcn</code>中采样并且和对应的块相关联。这类信标通常很容易获得，例如通过工作量证明机制[4]的哈希算法，并且很多内置在权益证明机制的设计中。之前的工作[12]证明了这种信标值允许攻击者在信标值还没有进入到账本确定状态确定前，只通过重置它最多一定次数（如t次）来使他们发生偏差。t的确切取值取决于链参数。</p>
<p>我们可以 通过向$\cal{F}_{RO}$​​发送一个查询<code>（bcn,nonce）</code> 来修正<code>Gen</code>以从随机oracle中获得随机值，其中<code>nonce</code>是一个随机选择的随机值，<code>bcn</code> 是前一个块的信标值。响应用于索引trapdoor排列集合P，选择结果p，nonce由矿工存储在本地，并保持私有。我们调整第一阶段的第一期，以便至少产生$l’ := l(1-\theta)^{-1}+c$​ 个区块，其中$\theta$和$c$ 是新的安全参数（下面会讨论）。接下来，第二阶段结束后，我们可以确定与第一阶段结束相关联的信标值最多被重置了t次。</p>
<p>我们从<code>bcn</code>中提取 <code>l&#39;</code> 个有偏差虚拟币中，每个都有概率$\theta$。对于每个区块，如果对应的币为1.则需要在至少与活性参数一样长的一段时间内揭示其随机性。具体来说，上链区块所对应的矿工可以显示其nonce，相应地，这个矿工会获得标准区块奖励的R倍额外奖励。</p>
<p>然而这需要更严格的链质量属性，而账本功能却强制<code>l</code>中一个未打开的更新是诚实的，我们在下一节中概述为什么这个属性仍然保持。</p>
<h3 id="4-2-安全直觉"><a href="#4-2-安全直觉" class="headerlink" title="4.2 安全直觉"></a>4.2 安全直觉</h3><p>现在考虑一个具有哈希能力$\alpha$ 的理性矿工。我们知道，在最好情况下，使用像比特币这样的基础区块链，<strong>这样一个矿工期待的相对的回报最多是$\alpha/(1-\alpha)$​</strong> ，这架设了一个自私的挖掘策略，在所有的网络竞赛中战胜了其他理性参与者。现在考虑一个矿工，它使用低熵指数来节省创建区块的算力，从而增加他们的哈希能力$\alpha$ 到一个相对哈希能力 $\alpha’ &gt; \alpha$​​​ 。这种攻击可以进一步通过分叉和有选择的公开那些有能力将<code>bcn</code>值重置到一为首选值的区块来影响区块链。为了证明这个影响是最小的，我们证明了下面的引理。</p>
<p>引理1.考虑一个映射 $\rho \mapsto {0,1}^{l’}$ ，当$\rho $均匀选择时，产生$l’$ 个独立的偏差代币，每一个的概率为$\theta$ 。考虑任意 $n \le l’$ 的固定位置，假设攻击者从映射的随即输入的$t$ 个独立抽取中选择任意一个，目的是增加n个位置的成功次数。获得超过$n(1+\epsilon)\theta$ 成功的概率是$exp(-\varOmega(\epsilon^2\theta n)+lnt)$</p>
<p>证明。在$t = 1$​的情况下，结果来自定义为获得大于$n(1+\epsilon)\theta$​次充公的事件E的切尔诺夫界，并且具有概率$exp(-\varOmega(\epsilon^2\theta n))$​ 。鉴于每次重置都是同一实验的独立实验，通过应用并集边界，我们得到引理的论述。 </p>
<p>利用低熵攻击的矿工的最优策略是最小化其他矿工被选择的区块数量，来增加相对回报。引理1证明了以这种方式最多可以造成$(1+\epsilon)^{-1}$ 的一个因子的伤害，无论矿工是否利用低熵攻击，他们的最优策略是自私挖掘，在低熵攻击挖掘中，<strong>期望$l’\alpha’/(1-\alpha’)$ 块</strong>[14]。一个利用低熵攻击的理性矿工不会获得任何额外的奖励，然而另一个不这么做的矿工，根绝引理1，<strong>通过揭露他们的随机性会获得至少$l’\alpha/(1-\alpha)(1+\epsilon)^{-1}\theta R$ 个奖励</strong>。这证明了对一个理性的矿工，只有在以下情况下，该策略才有利于纯粹的自私挖掘：</p>
<script type="math/tex; mode=display">
\frac{\alpha'}{1-\alpha'} \gt (1+\theta(1+\epsilon)^{-1}R)\frac{\alpha}{1-\alpha}</script><p>如果我们假设一个矿工可以通过使用低熵攻击指数来将他们有效哈希率提高c倍，那么在低熵情况下，他们的优势是$\alpha’ =  \alpha c/(\alpha c+\beta)$ ,其中$\beta = 1-\alpha$ 是所有其他矿工的相对挖掘能力。如果上式满足，那么当且仅当下式成立，矿工才会获益：</p>
<script type="math/tex; mode=display">
\frac{\alpha c}{\alpha c+\beta} \cdot \frac{\alpha c+\beta}{\beta} \gt (1+\theta(1+\epsilon)^{-1}R)\frac{\alpha}{\beta} \\
\Longleftrightarrow c \gt  1+\theta(1+\epsilon)^{-1}R</script><p>如果我们在各块之前采用一个足够大的预期时间间隔，就有可能使用低熵指数来约束矿工的相对节省</p>
<p>根据完整版本模拟的参数化[22,4.2节]，<strong>如果一个使用这样指数的自私矿工可以提高他们的哈希能力最多一个乘法因子c，那么我们可以通过设置R为$(c-1)/(\theta(1+\epsilon)^{-1})$ 来缓解这样的攻击。</strong></p>
<h2 id="5-讨论"><a href="#5-讨论" class="headerlink" title="5 讨论"></a>5 讨论</h2><p>尽管我们从一个账本协议简洁生成一个参考字符串本身是有用的，但实际情况可能更加复杂，在本节，我们将讨论可能进行的实际调整。</p>
<h3 id="5-1-更新参考字符串"><a href="#5-1-更新参考字符串" class="headerlink" title="5.1 更新参考字符串"></a>5.1 更新参考字符串</h3><p>因为分布式账本通常寿命很长，很可能比任何在其中使用的参考字符串都要长，或者在需要参考字符串之前已经在运行了。实际上，<code>Zcahs</code>协议的参考字符串已经升级。没有上下文的情况下，一个参考字符串被新的取代是无害的，然而重要的是考虑他们在零知识证明方面通常是怎么使用的。如果使用他们的证明是无状态的，那么从一个不安全的参考字符串升级到一个安全字符串的行为可能会像人们天真期望的那样：它确保升级之后安全属性不变。</p>
<p>在<code>Zcash</code>的例子中，它运行的是<code>Zerocash</code>协议的一个变体，他的情况更加复杂。<code>Zerocash</code> 提供<em>有状态</em>的零知识证明，假设一个用户对初始设置的安全性持怀疑态度—并且有充分的里由—但是确信第二个参考字符串是安全的。这样的用户是否能够对<code>Zcash</code> 的安全性充满信心？</p>
<p>如果<code>Zcash</code>没有合适的保障措施，答案将是否定的。虽然协议可以按照预期执行，并且用户可以确信这一点，由于证明的有状态性，用户不能确信这个状态的正确性。<code>Zcash</code>加密货币确实采用了与我们下面概述的类似的保卫措施。我们在此强调这一点的重要性，因为并不是所有项目都会有这样的远见。</p>
<p>具体来说，对于基于<code>Zerocash</code>的系统，一个初始参考字符串的后门可能已经被用来创建不匹配的交易，并且有效地非法铸造大量货币。这一过程在当时是无法检测的，并且非法铸造的货币将在参考字符串升级过程中持续存在，。因此我们的虚拟用户可能会对合理怀疑他买到的任何货币的价值，他们可能是一个几乎无限货币池的一部分。</p>
<p>这样的攻击一旦发生（尤其是针对货币）是很难恢复的。因为无法证实货币的合法物主，即使私有交易历史被匿名，罪魁祸首也被确认。罪犯可能已经将他创造的任何东西交易出去。因此，简单地宣布交易无效会伤害那些与罪犯交易的用户，而不是罪犯自己。在一个极端情况下，如果他与合法货币持有者进行一对一交易，他将成功地窃取诚实用户的资产，而如果这样的攻击发生，社区用户有两个不行的选择：取消潜在合法用户的资金，或者接受潜在的大量通货膨胀。</p>
<p>然而我们可以假设一个没有那么糟糕的情况：假设我们合理地相信旧参考字符串的安全性，但我们更相信新的参考字符串。有无可能使用户相信我们真的升级了安全性？我们建议使用一种防火墙属性，这种属性在（cross-chain transfers）跨链传输领域中是很常见的[17]。并且被设计来防止一条链上的灾难性故障损坏另一条链。</p>
<p>对于货币转账，防火墙可以保证不超过资金上限，如果可以接受一个小的隐私损失，那么证明防火墙属性是容易的——每一个私有货币都要在升级后使用之前进行重铸，重铸期间必须声明他的价值。假设所有操作正常执行，并且没有违反防火墙属性，与后防火墙状态交易的用户可以确信可用资金的上限，此外，系统上的攻击亦可以识别：如果一个攻击铸造了太多货币，最终会违反防火墙属性，这表明有太多货币在流通——这就带来了如何处理这种情况的问题。我们相信，防火墙属性确实可以让系统用户安心，并且是一种实用的方法，可以缓解对曾经有问题参考字符串的系统安全性的担忧。</p>
<p>在<code>Zcash</code>中，这种防火墙的一种软形式是可用的，因为资产被分成几个池pools，每一个池实用不同的证明机制。每个池的总价值是可以管吃的，低于0的值会被视为报警原因，并拒绝。<code>Zcash</code>使用术语<code>&quot;turnstiles&quot;</code> 旋转门？，并且没有观察到通过他们的攻击。</p>
<p>正如完整版本的模拟[22,4.2节]，对于实时系统，需要进一步考虑的点是，所需时间很大程度上依赖于块之间的频率。这可能与选择块时间的其他考虑冲突——这个问题的一个潜在解决方案是只在<code>&quot;superblocks&quot;</code> 上执行更新：满足比通常更高的工作量证明（或其他选择机制）标准的块。</p>
<h3 id="5-2-信任的根源-The-Root-of-Trust"><a href="#5-2-信任的根源-The-Root-of-Trust" class="headerlink" title="5.2 信任的根源 The Root of Trust"></a>5.2 信任的根源 The Root of Trust</h3><p>对于分布式账本设置中的所有协议来说，一个更重要的问题是，是否一个在运行时某个点进入系统的用户可以相信其安全性。早期的权益证明协议，如[23]，在这一方面做的很差，例如很容易受到<code>&quot;stake-bleeding&quot;</code>攻击[16]，实际上意味着新用户不能安全地加入到网络中。</p>
<p>对于参考字符串，如果一个新用户准备接受诚实大多数假设成立，<strong>他们</strong>？可能相信参考字符串的安全，正如前述定理1。然而， 共识协议的安全性有一个奇怪的不同：至少对基于工作量证明的协议来说，要相信共识，最重要的是相信当前诚实大多数，因为这些协议被认为能够在过去某个时候从不诚实大多数中恢复过来。另一方面，参考字符串的安全性只依赖于在初始$\delta$​ 时间单位内假设诚实大多数。如果一大段时间过去，这可能会成为一个问题——为什么要相信不同时间段的用户的意图？</p>
<p>事实上，定期刷新参考字符串来更新对他的信任可能是有意义的。持续执行更新是诱人的，然而，正如5.1节所述，这并不一定会增加对有状态系统的信任，尽管当使用无状态证明时，它可以从诚实大多数需求中删除”历史“部分。</p>
<p>大多数颠覆攻击时可以检测的——他们需要很长的分叉，这在合法执行的过程中不太可能发生。在没有攻击企图的乐观情况下，这可能提供了额外的确认级别：如果在初始设计期间没有广泛传播的大分叉声称，那么参考字符串可能是安全的（除非出现大规模out-of-band审查）。另一方面，这可能更容易引起怀疑，然而，因为没有办法证明这一点：恶意行为者可能会在初始化设置很长时间之后创建一个分叉，并声称这是破坏系统可信度攻击的证据。</p>
<h3 id="5-3-不可更新SNARKs的应用"><a href="#5-3-不可更新SNARKs的应用" class="headerlink" title="5.3 不可更新SNARKs的应用"></a>5.3 不可更新SNARKs的应用</h3><p>可更新<code>SNARK</code>模式有两个明显的优势，我们的协议利用了这两个优势：首先，他们有一个显式的更新过程，这个过程允许一方 $\phi$​​ 使用安全性依赖于$A\vee (\phi 是诚实的)$​​ 的参考字符串替代一个安全性依赖于一些假设A的参考字符串。第二，他们可以在部分偏差的参考字符串上生存，这是我们在本文没有直接使用的一个事实，但是我们提供的$\cal{F}_{uSRS}$​​​ 功能允许拒绝采样，将其编码到理想情况中。</p>
<p>对于某些zk-SNARKs（如[18])，可以通过存在一个较弱的属性来解决更新算法的缺乏问题。：在第二阶段中，参考字符串可以由（可能不同的）各方在每个阶段执行round-robin更新（也可以分组求幂）来构造，在[6]中也详细介绍了这种方法，他意味着对我们协议自然转换，其中第一阶段被长度相同的两个阶段替代，分别执行第一阶段和第二阶段更新。</p>
<p>对不可更新SNARKs，部分偏差字符串的安全性还没有充分分析，然而这一弱点可以得到缓解。根据[6]，可以使用一个纯随机信标（与第4节中使用的可重置信标相反）从目前不纯参考字符串创建一个纯参考字符串。设计方案如：在时间$\delta$​ 后将查询随机信标，并使用这种随机性来选择在参考字符串上的trapdoor排列。这将被每一方独立应用，得到相同的随机分布的参考字符串。</p>
<p>由于可更新SRS不需要这么做，所以我们没有进行深度分析，然而这个模拟方法是相同地执行SRS生成，然后编程随机信标来反转所有应用于诚实参考字符串的排列。由于这包括应用在每个诚实更新上的诚实排列，所以这对攻击者来说与随机值没有什么区别。值得注意的是，随机信标的需求是需求中较强的一方，特别是由于它本身不应该允许对抗性影响来提供所需优势。为随机性而使用的块哈希方法引入了我们正试图消除的有限影响。</p>
<h2 id="6-致谢Acknowledgements"><a href="#6-致谢Acknowledgements" class="headerlink" title="6 致谢Acknowledgements"></a>6 致谢Acknowledgements</h2><h2 id="Bibliography"><a href="#Bibliography" class="headerlink" title="Bibliography"></a>Bibliography</h2><p><strong>无论多复杂的验证问题都可以最终简化为一个多项式验证问题</strong>！</p>
<p>零知识证明：</p>
<ul>
<li>两方：prover，verifier （已知）</li>
<li>证明算法：Setup （已知）<ul>
<li>同态隐藏：1.一个x对应一个y，2.但是y不能反推出x，3.由F(a) F(b) 可知 F(a+b)</li>
</ul>
</li>
<li>公共参考字符串 CRS （已知）</li>
<li>证明问题： 取决于双方</li>
</ul>
<p>verifier 要向prover发送一段信息，要求prove证明这部分信息满足一定要求，这部分信息不随验证内容改变，可以事先在区块链中一次性设置好，之后的验证过程可以复用，这个事先设置好的信息成为公共参考字符串（CRS），这个字符串由随机点s，和随即系数k经处理得到，这个字符串需要保密，因此sk需要保密，CRS泄露后会有伪造证明通过，<code>在Zcash的系统里，CRS中存放的实际上只是随机点s和随机系数k的一系列加密值，而s和k的明文则由6个“被充分信任的人”私下保存，这6个人处在地球上6个不同的位置，这些机密的随机数被拆开保存在这6个人手上，只要不是这6个人都变成“坏人”，这些随机数信息就不会被完整恢复。</code> 不同prover和verifier双方验证问题的不同决定多项式的不同，即同样的参考字符串在不同的多项式中不同的性质。</p>
]]></content>
      <categories>
        <category>论文</category>
        <category>零知识证明</category>
      </categories>
      <tags>
        <tag>论文</tag>
        <tag>零知识证明</tag>
      </tags>
  </entry>
  <entry>
    <title>Mermaid从入门到如图</title>
    <url>/Mermaid%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.html</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ul>
<li>什么是Mermaid？<ul>
<li>Mermaid是一种基于Javascript的绘图工具，使用类似于Markdown的语法，使用户可以方便快捷地通过代码创建图表。</li>
<li>项目地址：<a href="https://github.com/mermaid-js/mermaid（需要将梯子设置成全局模式才能访问）" target="_blank" rel="noopener">https://github.com/mermaid-js/mermaid（需要将梯子设置成全局模式才能访问）</a></li>
</ul>
</li>
</ul>
<ul>
<li><p>怎么使用Mermaid？</p>
<ul>
<li>使用特定的Mermaid渲染器；</li>
<li><strong>使用集成了Mermaid渲染功能的Markdown编辑器，如<a href="https://www.typora.io/" target="_blank" rel="noopener">Typora</a>。</strong>使用时，需要将代码块的语言选择为Mermaid。</li>
</ul>
<blockquote>
<p>Typora是宇宙第一笔记软件，不接受反驳</p>
</blockquote>
</li>
<li><p>Mermaid能绘制哪些图？</p>
<ul>
<li>饼状图：使用<code>pie</code>关键字，具体用法后文将详细介绍</li>
<li>流程图：使用<code>graph</code>关键字，具体用法后文将详细介绍</li>
<li>序列图：使用<code>sequenceDiagram</code>关键字</li>
<li>甘特图：使用<code>gantt</code>关键字</li>
<li>类图：使用<code>classDiagram</code>关键字</li>
<li>状态图：使用<code>stateDiagram</code>关键字</li>
<li>用户旅程图：使用<code>journey</code>关键字</li>
</ul>
</li>
</ul>
<ul>
<li>实例：朱元璋家谱简图，圆圈代表皇帝</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">emperor((朱八八))-.子.-&gt;father(朱五四)-.子.-&gt;朱四九-.子.-&gt;朱百六</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">朱雄英--长子--&gt;朱标--长子--&gt;emperor</span><br><span class="line">emperor2((朱允炆))--次子--&gt;朱标</span><br><span class="line">朱樉--次子--&gt;emperor</span><br><span class="line">朱棡--三子--&gt;emperor</span><br><span class="line">emperor3((朱棣))--四子--&gt;emperor</span><br><span class="line">emperor4((朱高炽))--长子--&gt;emperor3</span><br></pre></td></tr></table></figure>
<p>以上是概述，下面详细介绍饼状图和流程图的语法。其他图的语法可访问上文给出的项目地址，自行学习。（记得挂梯子）</p>
<h1 id="饼状图"><a href="#饼状图" class="headerlink" title="饼状图"></a>饼状图</h1><ul>
<li><p>在线渲染器：<a href="https://mermaidjs.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoicGllXG5cIkRvZ3NcIiA6IDQyLjk2XG5cIkNhdHNcIiA6IDUwLjA1XG5cIlJhdHNcIiA6IDEwLjAxIiwibWVybWFpZCI6eyJ0aGVtZSI6ImRlZmF1bHQifX0" target="_blank" rel="noopener">Online FlowChart &amp; Diagrams Editor</a>（需要梯子）</p>
</li>
<li><p>语法</p>
<ul>
<li>从<code>pie</code>关键字开始图表</li>
<li>然后使用<code>title</code>关键字及其在字符串中的值，为饼图赋予标题。（这是<strong>可选的</strong>）</li>
<li>数据部分<ul>
<li>在<code>&quot; &quot;</code>内写上分区名。</li>
<li>分区名后使用<code>:</code>作为分隔符</li>
<li>分隔符后写上数值，最多支持2位小数——数据会以百分比的形式展示</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li>实例</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pie</span><br><span class="line">    title 为什么总是宅在家里？</span><br><span class="line">    &quot;喜欢宅&quot; : 15</span><br><span class="line">    &quot;天气太热或太冷&quot; : 20</span><br><span class="line">    &quot;穷&quot; : 500</span><br></pre></td></tr></table></figure>
<h1 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h1><ul>
<li>在线渲染器：<a href="https://mermaidjs.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoiZ3JhcGggVERcbiAgICBBW0hhcmRdIC0tPnxUZXh0fCBCKFJvdW5kKVxuICAgIEIgLS0-IEN7RGVjaXNpb259XG4gICAgQyAtLT58T25lfCBEW1Jlc3VsdCAxXVxuICAgIEMgLS0-fFR3b3wgRVtSZXN1bHQgMl0iLCJtZXJtYWlkIjp7InRoZW1lIjoiZGVmYXVsdCJ9fQ" target="_blank" rel="noopener">Online FlowChart &amp; Diagrams Editor</a>（需要挂梯子）</li>
</ul>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    A[Start] --&gt; B&#123;Is it?&#125;;</span><br><span class="line">    B -- Yes --&gt; C[OK];</span><br><span class="line">    C --&gt; D[Rethink];</span><br><span class="line">    D --&gt; B;</span><br><span class="line">    B -- No ----&gt; E[End];</span><br></pre></td></tr></table></figure>
<h2 id="方向"><a href="#方向" class="headerlink" title="方向"></a>方向</h2><p>用于开头，声明流程图的方向。</p>
<ul>
<li><code>graph</code>或<code>graph TB</code>或<code>graph TD</code>：从上往下</li>
<li><code>graph BT</code>：从下往上</li>
<li><code>graph LR</code>：从左往右</li>
<li><code>graph RL</code>：从右往左</li>
</ul>
<h2 id="结点"><a href="#结点" class="headerlink" title="结点"></a>结点</h2><ul>
<li>无名字的结点：直接写内容，此时结点边框为方形</li>
<li>有名字的结点：节点名后书写内容，内容左右有特定符号，结点边框由符号决定</li>
</ul>
<blockquote>
<p>下面的实例中，没有为graph指定方向，因此默认是从上往下的。但是由于各个结点之前没有箭头，所以他们都处于同一排。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph</span><br><span class="line">    默认方形</span><br><span class="line">    id1[方形]</span><br><span class="line">    id2(圆边矩形)</span><br><span class="line">    id3([体育场形])</span><br><span class="line">    id4[[子程序形]]</span><br><span class="line">    id5[(圆柱形)]</span><br><span class="line">    id6((圆形))</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph</span><br><span class="line">	id1&#123;菱形&#125;</span><br><span class="line">	id2&#123;&#123;六角形&#125;&#125;</span><br><span class="line">	id3[/平行四边形/]</span><br><span class="line">	id4[\反向平行四边形\]</span><br><span class="line">	id5[/梯形\]</span><br><span class="line">	id6[\反向梯形/]</span><br></pre></td></tr></table></figure>
<h2 id="连线样式"><a href="#连线样式" class="headerlink" title="连线样式"></a>连线样式</h2><ul>
<li>实线箭头：分为无文本箭头和有文本箭头，有文本箭头有2种书写格式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">a--&gt;b--文本1--&gt;c--&gt;|文本2|d</span><br></pre></td></tr></table></figure>
<ul>
<li>粗实线箭头：分为无文本箭头和有文本箭头</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">a==&gt;b==文本==&gt;c</span><br></pre></td></tr></table></figure>
<ul>
<li>虚线箭头：分为无文本箭头和有文本箭头</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">a-.-&gt;b-.文本.-&gt;c</span><br></pre></td></tr></table></figure>
<ul>
<li>无箭头线：即以上三种连线去掉箭头后的形式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">a---b</span><br><span class="line">b--文本1!---c</span><br><span class="line">c---|文本2|d</span><br><span class="line">d===e</span><br><span class="line">e==文本3===f</span><br><span class="line">f-.-g</span><br><span class="line">g-.文本.-h</span><br></pre></td></tr></table></figure>
<ul>
<li>其他连线：需要将<code>graph</code>关键字改为<code>flowchart</code>，除了新增加的连线形式外，上面三种线的渲染效果也会不同</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">    A o--o B</span><br><span class="line">    B &lt;--&gt; C</span><br><span class="line">    C x--x D</span><br><span class="line">    </span><br><span class="line">    旧连线 --文本--&gt; 也会不同</span><br></pre></td></tr></table></figure>
<ul>
<li>延长连线：增加相应字符即可，如下图中的B到E，连线中增加了一个<code>-</code>。字符可多次添加。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    A[Start] --&gt; B&#123;Is it?&#125;;</span><br><span class="line">    B --&gt;|Yes| C[OK];</span><br><span class="line">    C --&gt; D[Rethink];</span><br><span class="line">    D --&gt; B;</span><br><span class="line">    B ---&gt;|No| E[End];</span><br></pre></td></tr></table></figure>
<h2 id="连线形式"><a href="#连线形式" class="headerlink" title="连线形式"></a>连线形式</h2><ul>
<li>直链</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">   A -- text --&gt; B -- text2 --&gt; C</span><br></pre></td></tr></table></figure>
<ul>
<li>多重链：可以使用<code>&amp;</code>字符，或单个描述</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph </span><br><span class="line">   a --&gt; b &amp; c--&gt; d</span><br><span class="line">   </span><br><span class="line">   A &amp; B--&gt; C &amp; D</span><br><span class="line">   </span><br><span class="line">    X --&gt; M</span><br><span class="line">    X --&gt; N</span><br><span class="line">    Y --&gt; M</span><br><span class="line">    Y --&gt; N</span><br></pre></td></tr></table></figure>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>子图：需要将<code>graph</code>关键字改为<code>flowchart</code>，在代码段的开始加入<code>subgraph</code>，尾部加入<code>end</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flowchart TB</span><br><span class="line">    c1--&gt;a2</span><br><span class="line">    subgraph one</span><br><span class="line">    a1--&gt;a2</span><br><span class="line">    end</span><br><span class="line">    subgraph two</span><br><span class="line">    b1--&gt;b2</span><br><span class="line">    end</span><br><span class="line">    subgraph three</span><br><span class="line">    c1--&gt;c2</span><br><span class="line">    end</span><br><span class="line">    one --&gt; two</span><br><span class="line">    three --&gt; two</span><br><span class="line">    two --&gt; c2</span><br></pre></td></tr></table></figure>
<ul>
<li>注释：在行首加入<code>%%</code>即可。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">%%这是一条注释，在渲染图中不可见</span><br><span class="line">    A[Hard edge] --&gt;|Link text| B(Round edge)</span><br><span class="line">    B --&gt; C&#123;Decision&#125;</span><br><span class="line">    C --&gt;|One| D[Result one]</span><br><span class="line">    C --&gt;|Two| E[Result two]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>typora</category>
      </categories>
      <tags>
        <tag>Mermaid</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL中的utf8和utf8mb4</title>
    <url>/MySql%E4%B8%AD%E7%9A%84utf8%E5%92%8Cutf8mb4.html</url>
    <content><![CDATA[<h3 id="MySQL中utf8和utf8mb4"><a href="#MySQL中utf8和utf8mb4" class="headerlink" title="MySQL中utf8和utf8mb4"></a>MySQL中utf8和utf8mb4</h3><p>开始之前先回顾一下UTF-8和Unicode的概念</p>
<p>UTF-8？ 来自百度百科的定义</p>
<blockquote>
<p>UTF-8（8位元，Universal Character Set/Unicode Transformation Format）是针对Unicode的一种可变长度字符编码。它可以用来表示Unicode标准中的任何字符，而且其编码中的第一个字节仍与<a href="https://baike.baidu.com/item/ASCII/309296" target="_blank" rel="noopener">ASCII</a>相容，使得原来处理ASCII字符的软件无须或只进行少部份修改后，便可继续使用。因此，它逐渐成为<a href="https://baike.baidu.com/item/电子邮件/111106" target="_blank" rel="noopener">电子邮件</a>、网页及其他存储或传送文字的应用中，优先采用的编码。</p>
</blockquote>
<p>那么什么是Unicode呢？</p>
<blockquote>
<p>Unicode（统一码、万国码、单一码）是计算机科学领域里的一项业界标准，包括字符集、编码方案等。Unicode 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。</p>
</blockquote>
<p>通俗点讲：早期针对英语设计的ASCII码并不能支持其他语言，各国为了把各自的语言文字输入进计算机来处理，制定了自己的编码规范（如中国的gb2312），而这就导致了同样的数据通过不同的编码打开时的乱码问题。而为了统一所有的语言文字，Unicode应运而生，他把所有的语言统一到一套编码里，解决了乱码的问题，UTF-8是Unicode的一种字符集转换格式（Unicode Transformation Format），也就是怎么将Unicode定义的数字转换成程序数据。UTF-8即以8位也就是一个字节为单位对Unicode进行编码，是Unicode的一种实现方式，除了 UTF-8，还有UTF-16，UTF-32 等都可以实现 Unicode，但是 UTF-8 相对而言是用的最为广泛的。</p>
<p>UTF-8编码的特点是对不同范围的字符使用不同长度的编码，如英文字符“A”只需要8位，则用一个字节，汉字多用三个字节，而极少使用的语言字符则使用4字节编码。每个字符最多用4个字节来编码，这样做就节省空间。</p>
<p>在MySQL中，utf8字符集最大字符长度为3字节，如果遇到4字节的宽字符就会出现插入异常的情况，像emoji表情和很多不常用的汉字都无法使用MySQL的utf8字符集，为了弥补这个缺陷，MySQL在5.5.3版本增加了utf8mb4字符集，mb4就是most byte 4，专门用来兼容4字节的Unicode。也就是说：在MySQL中utf8mb4才是真正的UTF-8，是utf8的超集。</p>
<p>要在MySQL中使用4字节长度的UTF-8字符，需要使用utf8mb4字符集，但只有5.5.3版本之后才支持，为了获得更好的兼容，最好使用utf8mb4而不是utf8，对于char类型数据来说，utf8mb4会多消耗一些空间（每个字符多占用一个字节），MySQL官方建议，可以使用varchar来替代char</p>
<p>参考资料：</p>
<ul>
<li><a href="http://ourmysql.com/archives/1402" target="_blank" rel="noopener">http://ourmysql.com/archives/1402</a></li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>编码</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP+MySQL乱码问题总结</title>
    <url>/PHP-MySQL%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98.html</url>
    <content><![CDATA[<p>在可视化数据库管理软件创建数据库时，会要求我们选择字符集和排序规则，那么什么是字符集和排序规则，我们又该如何选择呢？</p>
<h5 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h5><ul>
<li>字符（charset）：字符指类字形单位或符号，包括字母、数字、运算符号、标点符号和其他符号，以及一些功能性符号。如‘A’，‘B’</li>
<li>给定一系列字符，对每个字符赋予一个数值，用该数值来代表对应字符，这一数值就是该字符的编码（Encoding）</li>
<li>从一种二进制编码到某类字符符号的映射叫字符集（Charset set），如{0=&gt;’A’,1=&gt;’B’}</li>
<li>排序规则（也叫校对、字符序）是指在同一字符集内的排序规则（比较规则），确定排序规则后，才能在一个字符集上定义什么是等价的字符，以及字符间的大小关系。</li>
<li>字符集和排序规则之间是一个1对n的关系，一个字符集有多个排序规则， 一个排序规则之对应一个字符集。</li>
</ul>
<h5 id="选择使用"><a href="#选择使用" class="headerlink" title="选择使用"></a>选择使用</h5><p>我们可以在数据库中使用<code>SHOW CHARACTER SET</code> 查看目前版本数据库支持的字符集、默认排序规则以及最大长度（这里也可以验证上篇文章说的utf8是最长3字节的字符编码，而utf8mb4最长4字节）。</p>
<p>为了获得更好的兼容，字符集我们一般选择utf8mb4 </p>
<p>排序规则名称遵从命名惯例，以字符序对应的字符集名称开头；以_ci(case insensitive表示大小写不敏感)、_cs(case sensitive表示大小写敏感)或_bin(表示以字符串编码的二进制来比较大小)，因此，选择排序规则要考虑的一个问题是，是否以大小写敏感的方式比较字符串，或者是以字符串编码的二进制值来比较大小。大小写敏感和二进制排序规则的不同在于：二进制排序规则直接使用字符的字节进行比较，而大小写敏感的排序规则在多字节字符集时有更复杂的比较规则。</p>
<p>排序规则一般选择utf8mb4默认的utf8mb4_0900_ai_ci</p>
<p>我们选择的这两项分别对应数据库的character_set_database和collation_database这两个变量，实际上，MySQL里还有其他一些关于编码的变量，我们可以通过<code>show variables like &#39;%character%&#39;</code> 查看字符集变量，使用<code>show variables like &#39;%collation%&#39;</code> 查看排序规则变量，在MySQL8.0版本中，字符集和排序规则变量如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%character%'</span> <span class="comment">--这是在navicat环境下</span></span><br></pre></td></tr></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th>Variable_name</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>character_set_client</td>
<td>utf8mb4</td>
</tr>
<tr>
<td>character_set_connection</td>
<td>utf8mb4</td>
</tr>
<tr>
<td>character_set_database</td>
<td>utf8</td>
</tr>
<tr>
<td>character_set_filesystem</td>
<td>binary</td>
</tr>
<tr>
<td>character_set_results</td>
<td>utf8mb4</td>
</tr>
<tr>
<td>character_set_server</td>
<td>utf8mb4</td>
</tr>
<tr>
<td>character_set_system</td>
<td>utf8</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>character_set_client变量是客户端请求数据的编码方式，</li>
<li>character_set_connect变量是客户端服务端连接通信使用的编码方式，</li>
<li>character_set_database就是我们创建数据库时选择的编码方式，如果创建数据库是没有指定，则根据character_set_server来指定</li>
<li>character_set_filesystem文件系统编码</li>
<li>character_set_results服务端查询结果使用的编码方式</li>
<li>character_set_server数据库服务器的编码方式</li>
<li>character_set_system这是个只读数据，总是utf8</li>
</ul>
<p>其中，character_set_client、character_set_connection、character_set_results在每次客户端连接服务器时，都会根据客户端的要求来改变，如在navicat中默认是utf8mb4，如果使用cmd连接MySQL执行上面的命令，那么这几个变量的值应该是gbk（如果没有调整的话）。当然我们也可以自己指定以我们要求的编码方式连接数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql -u root -p pw <span class="comment">--default-character-set=latin1</span></span><br></pre></td></tr></table></figure>
<p>指定以latin1编码连接数据库，那么这三个值就是latin1，也可以再登陆后使用set names utf8来改变。</p>
<p>在客户端与数据库交互时，他们可能使用不同的字符集，这时服务端会进行必要的翻译和转换工作，首先服务端总是假设客户端是按照character_set_client设置的字符集来发送数据和SQL语句的，当服务器接收到客户端的数据时，先将其转换成character_set_connection，然后处理sql语句，产生的结果从character_set_connection转换成character_set_results，然后发回客户端。所以最基本的一点是要保证三个字符集是兼容的，这样才能避免通信时出现问题。如果三者不兼容，可能会出现错误甚至是安全问题。</p>
<p>你以为这样就能解决乱码问题了？</p>
<p>为什么会出现乱码呢？</p>
<p>这里我们根据乱码出现的位置分为几种情况：</p>
<ol>
<li>往数据库存数据乱码</li>
<li>数据库数据正常，显示乱码</li>
</ol>
<p>对于第一种情况，往往是数据库选择的字符集不支持存入的数据。如character_set_database是latin1,而存入的数据是汉字，那么自然会乱码。</p>
<p>第二种情况可能是character_set_connection和character_set_results不兼容导致的，当然最基本的，如果整个网页都乱码的话，可能是php文件编码和设置的meta charset不兼容导致的。</p>
<p>所以在确保character_set_database支持的情况下，在PHP环境中，连接完数据库之后，使用mysql-&gt;set_charset(’utf8mb4‘)函数指定三个字符集为utf8mb4（PHP手册中不推荐使用mysql-&gt;query(“set names utf8”)方法），这样就保证了连接通信正确，基本就不会出现乱码了。</p>
<p>参考：</p>
<ul>
<li><a href="http://ourmysql.com/archives/314" target="_blank" rel="noopener">http://ourmysql.com/archives/314</a></li>
<li><a href="https://www.cnblogs.com/digdeep/p/5228199.html" target="_blank" rel="noopener">https://www.cnblogs.com/digdeep/p/5228199.html</a></li>
<li>高性能MySQL（第3版）</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>编码</tag>
        <tag>MySQL</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP学习笔记</title>
    <url>/PHP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</url>
    <content><![CDATA[<p>[TOC]</p>
<ul>
<li><p>php是弱类型语言，不需生命变量类型</p>
</li>
<li><ul>
<li>变量名只能包含字母数字下划线，并且以字母和下划线开头，变量名区分大小写，$this 是一个特殊的变量，不能被赋值。变量名可以用中文。</li>
</ul>
</li>
<li><p>php定义的全局变量在函数内使用时需要加global，在c语言中全局变量可以直接使用而不需要global。</p>
</li>
<li><p>print和echo</p>
<ul>
<li>echo可以输出一个或多个字符串，无返回值，速度比print慢</li>
<li>print只允许输出一个字符串，有返回值1</li>
</ul>
</li>
<li><p>php从html中分离：</p>
<ul>
<li><p>凡是在一对开始和结束标记之外的内容都会被 PHP 解析器忽略，这使得 PHP 文件可以具备混合内容。 可以使 PHP 嵌入到 HTML 文档中去，如下例所示。php可以放在文档的任意位置。</p>
</li>
<li><p>php文件里面可以放html、css、js等前端语言，</p>
</li>
<li><p><strong>使用条件的高级分离术</strong></p>
</li>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php if ($expression == true): ?&gt;</span><br><span class="line"> This will show if the expression is true.</span><br><span class="line">&lt;?php else: ?&gt;</span><br><span class="line">  Otherwise this will show.</span><br><span class="line">&lt;?php endif; ?&gt;</span><br></pre></td></tr></table></figure>
<p>要输出大段文本时，跳出 PHP 解析模式通常比将文本通过 <strong>echo</strong>或 <strong>print</strong>输出更有效率。</p>
</li>
</ul>
<p>PHP是最好的语言。</p>
<p>2019软件工程师现状报告显示：开发者最爱Python，最讨厌PHP</p>
</li>
</ul>
<h3 id="PHP的九种数据类型"><a href="#PHP的九种数据类型" class="headerlink" title="PHP的九种数据类型"></a>PHP的九种数据类型</h3><ul>
<li><p>​    四种标量类型</p>
<ul>
<li><p><strong>boolean（布尔）</strong></p>
<p>以下值转换成布尔型时被认为是false</p>
<ul>
<li>布尔值false本身</li>
<li>整型、浮点型、字符串零</li>
<li>空字符串</li>
<li>空数组</li>
<li>NULL</li>
</ul>
<p>负数？字符串“false”？</p>
</li>
<li><p>integer（整型）</p>
</li>
<li><p><strong>float（浮点型）</strong></p>
<ul>
<li>永远不要相信浮点数结果精确到了最后一位，也永远不要比较两个浮点数是否相等。0.1+0.2 <strong>==≠==</strong>  0.3</li>
</ul>
</li>
<li><p>string（字符型）</p>
<ul>
<li>单引号与双引号区别：双引号会解析特殊字符以及变量，而单引号不会。</li>
<li>拼接符（并置运算符）</li>
</ul>
<p>将变量$message中的数据更新到id为$id的位置，下列语句能够执行正确的是：</p>
<ul>
<li>$sql = “update message set message = $message where id = $id;”;      ×</li>
<li>$sql = “update message set message = ‘$message’ where id = $id;”;     √</li>
<li>$sql = ‘update message set message = ‘.$message.’where id = ‘.$id.’;’;</li>
<li></li>
</ul>
</li>
</ul>
</li>
<li><p>三种复合类型</p>
<ul>
<li>array（数组）</li>
<li>object（对象）</li>
<li>callable（可调用）</li>
</ul>
</li>
<li><p>两种特殊类型</p>
<ul>
<li>resource（资源）</li>
<li>NULL（无类型）</li>
</ul>
</li>
</ul>
<h4 id="PHP运算符"><a href="#PHP运算符" class="headerlink" title="PHP运算符"></a>PHP运算符</h4><p><img src="C:\Users\15622\AppData\Roaming\Typora\typora-user-images\1553095225983.png" alt="1553095225983"></p>
<p><img src="C:\Users\15622\AppData\Roaming\Typora\typora-user-images\1553095248233.png" alt="1553095248233"></p>
<p><img src="C:\Users\15622\AppData\Roaming\Typora\typora-user-images\1553095264139.png" alt="1553095264139"></p>
<p><img src="C:\Users\15622\AppData\Roaming\Typora\typora-user-images\1553095290238.png" alt="1553095290238"></p>
<p><img src="C:\Users\15622\AppData\Roaming\Typora\typora-user-images\1553095317096.png" alt="1553095317096"></p>
<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><ul>
<li>单行注释仅仅注释到行末或者当前的 PHP 代码块，视乎哪个首先出现。这意味着在 <em>// … ?&gt;</em> 或者 <em># … ?&gt;</em> 之后的 HTML 代码将被显示出来：?&gt; 跳出了 PHP 模式并返回了 HTML 模式</li>
<li><ul>
<li>PHP是现在使用的最广泛的开源脚本语言，零成本，word press就是用php写的一个框架，</li>
</ul>
</li>
</ul>
<p>兼容几乎所有服务器，apache，iis都可以运行php页面，支持多种数据库，MySQL，Oracle、SQL server、mongobd···容几乎所有服务器</p>
<h3 id="PHP-MySQL常用语句"><a href="#PHP-MySQL常用语句" class="headerlink" title="PHP+MySQL常用语句"></a>PHP+MySQL常用语句</h3><ol>
<li><h4 id="PHP表单"><a href="#PHP表单" class="headerlink" title="PHP表单"></a>PHP表单</h4></li>
</ol>
<p>$_GET和$_POST区别：</p>
<ul>
<li>$_GET传递的数据会显示在url中，可以收藏，能被缓存，传输类型只允许ASCII字符，不安全，数据长度有限制（URL长度最大是2048个字符）</li>
<li><p>$_POST相对安全，数据长度无限制。通过request body传递参数</p>
</li>
<li><p>表单处理</p>
<ul>
<li>post 和get的区别，$_GET 和 $_POST超全局变量，访问不需要考虑作用域，可以从任何函数文件访问，</li>
</ul>
</li>
<li><p>表单验证</p>
</li>
<li>表单必填</li>
<li>正则表达式</li>
</ul>
<h4 id="cookie和session"><a href="#cookie和session" class="headerlink" title="cookie和session"></a>cookie和session</h4><h3 id="前后端验证"><a href="#前后端验证" class="headerlink" title="前后端验证"></a>前后端验证</h3><h3 id="登录注册模块总结"><a href="#登录注册模块总结" class="headerlink" title="登录注册模块总结"></a>登录注册模块总结</h3><ul>
<li>注册时，注册信息通过前端验证后通过post请求发送到数据库。</li>
<li>服务器再次校验数据是否规范、符合标准。</li>
<li>服务器将用户信息存储到数据库后，告知浏览器注册成功</li>
<li>用户打开登录界面，输入登录信息，向服务器发送post请求</li>
<li>服务器读取本地数据库，比对登录信息是否正确，若错误，告知浏览器登录失败；若正确给浏览器设置cookie</li>
<li>浏览器向服务器发送get请求，访问首页，附上cookie</li>
<li>服务器读取cookie，验证身份后，同意浏览器访问首页</li>
</ul>
<p>作者：tinaawang</p>
<p>链接：<a href="https://www.jianshu.com/p/9a728123fa73" target="_blank" rel="noopener">https://www.jianshu.com/p/9a728123fa73</a></p>
<p>来源：简书</p>
<p>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p>
<h1 id="test"><a href="#test" class="headerlink" title="test"></a>test</h1><hr>
<h2 id="PHP-安全"><a href="#PHP-安全" class="headerlink" title="PHP 安全"></a>PHP 安全</h2><ul>
<li>xss</li>
<li></li>
</ul>
<h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><h4 id="分页的两种实现方法"><a href="#分页的两种实现方法" class="headerlink" title="分页的两种实现方法"></a>分页的两种实现方法</h4><ol>
<li><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> $offset = <span class="number">10</span>*$page;</span><br><span class="line"></span><br><span class="line">select * from message limit <span class="number">10</span> offset $offset;</span><br><span class="line"></span><br><span class="line">select * from message limit(<span class="number">10</span>,$offset);</span><br></pre></td></tr></table></figure>
</li>
<li></li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mysqli_data_seek($res,$offset);</span><br></pre></td></tr></table></figure>
<h4 id="include和require"><a href="#include和require" class="headerlink" title="include和require"></a>include和require</h4><p>​         <em>require</em> 和 include  几乎完全一样，除了处理失败的方式不同之外。<strong>require</strong>   在出错时产生 <strong>E_COMPILE_ERROR</strong>   级别的错误。换句话说将导致脚本中止而 include只产生警告（<strong>E_WARNING</strong>），脚本会继续运行。 </p>
<p>​         如果文件被包含两次，PHP 5   发出致命错误因为函数已经被定义。</p>
<p>​         推荐使用include_once 而不是检查文件是否已包含并在包含文件中有条件返回。         <em>require_once</em> 语句和 require语句完全相同，唯一区别是 PHP 会检查该文件是否已经被包含过，如果是则不会再次包含。</p>
<h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><ol>
<li><p>类的定义以关键字<strong>class</strong>开头，后面跟着类型，后面跟着或括号，里面包含类的属性和方法的定义。</p>
</li>
<li><p>类名同样只能包含字母数字下划线，并且以字母或下划线开头。</p>
</li>
<li><p>一个类可以有自己的常量、变量<strong>（属性）</strong>和函数<strong>（方法）</strong>。</p>
</li>
<li><p>创建类的实例使用<strong><em>new</em></strong>关键字 new className();</p>
</li>
<li><p><strong><em>includes</em></strong></p>
<ul>
<li>一个类可以在声明中用<strong><em>extends</em></strong>继承另一个类的方法和属性，PHP不支持多重继承，一个类只能继承一个基类。</li>
<li>被继承的方法和属性可以通过用同样的名字覆盖，但是如果父类方法时用了<code>final</code>，则该方法不可覆盖。可以通过parent:: 来访问被覆盖的方法和属性。</li>
<li>覆盖方法时，参数必须保持一致，否则PHP将发出E_STRCT级别的错误。但构造函数例外，构造函数可以在覆盖时使用不同的参数。</li>
<li>::class关键字可以用于类名的解析，使用<code>ClassName::class</code>可以获取一个字符串，包含了ClassName的完全限定名称，这对使用了命名空间的类尤其重要。</li>
</ul>
</li>
<li><p><strong><em>属性</em></strong></p>
<ul>
<li>类的变量成员叫做属性，或者叫字段、特征。</li>
<li>声明属性由关键字<code>public</code>、<code>private</code>、<code>protected</code>开头，然后跟一个普通的变量声明来组成。</li>
<li>在类的成员方法里面，可以用 <em>-&gt;</em>（对象运算符）：<strong>$this-&gt;property</strong>（其中 <em>property</em> 是该属性名）这种方式来访问非静态属性。静态属性则是用    <strong>::</strong>（双冒号）：self::$property来访问。</li>
</ul>
</li>
<li><p><strong><em>类常量</em></strong></p>
<ul>
<li>把类中保持不变的值定义为类常量，在定义和使用常量的时候不需要<strong>$</strong>;</li>
</ul>
</li>
<li><p><strong>访问控制</strong></p>
<ul>
<li>对属性或方法的访问控制，是通过在前面添加关键字    <strong>public</strong>（公有），<strong><em>protected</em></strong>（受保护）或    <strong><em>private</em></strong>（私有）来实现的。被定义为公有的类成员可以在任何地方被访问。被定义为受保护的类成员则可以被其自身以及其子类和父类访问。被定义为私有的类成员则只能被其定义所在的类访问。 </li>
</ul>
</li>
<li><p>范围解析操作符</p>
<ul>
<li>一对冒号，可以用于访问静态成员，类常量，还可以用于覆盖类中的属性和方法。</li>
</ul>
</li>
<li><p>重载</p>
<ul>
<li>PHP提供的重载是指动态的创建类属性和方法。通过魔术方法实现。</li>
</ul>
</li>
<li><p>遍历对象</p>
<ul>
<li>foreach语句，默认情况下，所有可见属性都将被用于便利。（foreach便利所有其能够访问的可见属性）。</li>
</ul>
</li>
<li><p>魔术方法</p>
<ul>
<li>PHP将所有以__（两个下划线）开头的类方法保留为魔术方法，所以在定义类方法时，除了上述魔术方法，不要以 __为前缀。</li>
</ul>
</li>
<li><p>final关键字</p>
<ul>
<li>PHP5新增，如果父类的方法被声明为final，则子类无法覆盖该方法，如果一个类被声明为final，则该类不能被继承。</li>
<li>属性不能被定义为final，只有类和方法才能被定义为final。</li>
</ul>
</li>
<li><p>对象比较</p>
<ul>
<li>当使用比较运算符（==）比较两个对象变量时，比较的原则是：如果两个对象的属性和属性值都相等，并且两个对象是同一个类的实例，那么这两个对象相等。</li>
<li>如果使用全等运算符（===）比较，这两个对象一定要指向某一个类的同一实例。</li>
</ul>
</li>
<li><p>类型约束</p>
</li>
<li><h6 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h6><ul>
<li>定义为抽象的类不能被实例化。</li>
<li>任何一个类，如果它里面至少有一个方法被声明为抽象的，则它必须定义为抽象类</li>
<li>继承一个抽象类的时候，子类必须定义父类中的所有抽象方法；另外，这些方法的<a href="https://www.php.net/manual/zh/language.oop5.visibility.php" target="_blank" rel="noopener">访问控制</a>必须和父类中一样（或者更为宽松）。例如某个抽象方法被声明为受保护的，那么子类中实现的方法就应该声明为受保护的或者公有的，而不能定义为私有的。此外方法的调用方式必须匹配，即类型和所需参数数量必须一致。例如，子类定义了一个可选参数，而父类抽象方法的声明里没有，则两者的声明并无冲突。 这也适用于 PHP 5.4 起的构造函数。在 PHP 5.4 之前的构造函数声明可以不一样的。</li>
</ul>
</li>
</ol>
<h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><ol>
<li><p>在PHP中，命名空间用来解决在编写类库或应用程序时创建可重用的代码如类或函数时碰到的两类问题：  </p>
<ul>
<li>用户编写的代码与PHP内部的类/函数/常量或第三方类/函数/常量之间的名字冲突。</li>
<li>为很长的标识符名称(通常是为了缓解第一类问题而定义的)创建一个别名（或简短）的名称，提高源代码的可读性。</li>
</ul>
<p>PHP 命名空间提供了一种将相关的类、函数和常量组合到一起的途径。</p>
</li>
<li><p>虽然任意合法的PHP代码都可以包含在命名空间中，但只有以下类型的代码受命名空间的影响，它们是：类（包括抽象类和traits）、接口、函数和常量。   </p>
<p>命名空间通过关键字<em>namespace</em>    来声明。如果一个文件中包含命名空间，它必须在其它所有代码之前声明命名空间，除了一个以外：declare关键字。所有非PHP代码包括空白符都不能出现在命名空间之前 </p>
</li>
</ol>
<h3 id="GET和POST"><a href="#GET和POST" class="headerlink" title="GET和POST"></a>GET和POST</h3><h3 id="网页乱码"><a href="#网页乱码" class="headerlink" title="网页乱码"></a>网页乱码</h3><h4 id="mysqli-query-“set-names-utf8”"><a href="#mysqli-query-“set-names-utf8”" class="headerlink" title="mysqli_query(“set names utf8”);"></a>mysqli_query(“set names utf8”);</h4><ul>
<li>指定客户端将用于将SQL语句发送到服务器的字符集。告诉服务器以后从客户端传来的信息是utf-8编码的，指定服务器用于将结果返回客户端的字符集。</li>
</ul>
<h4 id="mysqli-set-charset-con-’utf8’"><a href="#mysqli-set-charset-con-’utf8’" class="headerlink" title="mysqli_set_charset($con,’utf8’);"></a>mysqli_set_charset($con,’utf8’);</h4><p>这应该是首选的用于改变字符编码的方法，不建议使用<a href="https://php.net/manual/zh/mysqli.query.php" target="_blank" rel="noopener">mysqli_query()</a>执行SQL请求的<em>SET NAMES …</em>（如 <em>SET NAMES utf8</em>）</p>
<h2 id="和-gt-区别"><a href="#和-gt-区别" class="headerlink" title="::和-&gt;区别"></a>::和-&gt;区别</h2><p>:: 访问静态方法或类常量</p>
<p>-&gt;访问非静态</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu更新内核</title>
    <url>/Ubuntu%E6%9B%B4%E6%96%B0%E5%86%85%E6%A0%B8.html</url>
    <content><![CDATA[<p>从Ubuntu官方提供的内核链接中获取所需要的内核版本：</p>
<p><a href="https://kernel.ubuntu.com/~kernel-ppa/mainline/" target="_blank" rel="noopener">https://kernel.ubuntu.com/~kernel-ppa/mainline/</a></p>
<p>从选择的内核中下载以下四个文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">linux-headers-*_amd64.deb</span><br><span class="line">linux-headers-*_all.deb</span><br><span class="line">linux-images-*-generic_*amd64.deb</span><br><span class="line">linux-modules_*-generic*_amd64.deb</span><br><span class="line">根据自己情况，选择合适的类型。选择通用系统的generic，低延迟系统（例如用于录制音频）的lowlatency，64位系统的amd64，32位系统的i386或其他OS类型的armhf，arm64等。</span><br></pre></td></tr></table></figure>
<p>下载完成后，进入所在文件夹，执行<code>sudo dpkg -i *.deb</code> 安装完成后，重启计算机。</p>
<p>卸载Ubuntu官方版本</p>
<p>获取所有安装的内核版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dpkg --get-selections | grep linux</span><br></pre></td></tr></table></figure>
<p>选择要卸载的版本，卸载下列安装包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt remove linux-image-&lt;版本&gt;-generic</span><br><span class="line">sudo apt remove linux-headers-&lt;版本&gt;</span><br><span class="line">sudo apt remove linux-headers-&lt;版本&gt;-generic</span><br><span class="line">sudo apt remove linux-modules-&lt;版本&gt;-generic</span><br></pre></td></tr></table></figure>
<p>更新启动引导</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo update-grub</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>hyperledger fabric 源码阅读</title>
    <url>/hyperledger-fabric-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB.html</url>
    <content><![CDATA[<h3 id="s"><a href="#s" class="headerlink" title="s"></a>s</h3><p>fabric v2.2</p>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p><img src="hyperledger-fabric-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/image-20220415154651468.png" alt="image-20220415154651468"></p>
<ol>
<li><p>bccsp（Blockchain Crypto Service Provider）</p>
<p>区块链加密服务提供者，提供一些密码学相关操作的实现。包括 Hash、签名、校验、加解密等。主要支持 MSP 的相关调用。</p>
</li>
<li><p>common</p>
<p>通用功能模块。包括常用的配置config、加密签名crypto、ledger设置，工具包含协议设置等。</p>
</li>
<li><p>core</p>
<p>大部分核心实现代码都在本包下。其它包的代码封装上层接口，最终调用本包内代码。包含区块链操作Chaincode代码实现、peer节点消息处理及行为的实现、容器container的实现如docker交互实现、策略实现policy及预处理endorser等等。</p>
</li>
<li><p>gossip</p>
<p>gossip算法。一个基于pull的gossip算法的实现。最终确保状态一致。 该协议大致如下：<br>1）A发起者发送Hello（B唯一标识，nonce）消息到B远程节点（多个）。<br>2）收Hello信息后发送SendDigest到A节点，其中包含nonce<br>3）A收到SendDigest，校验数据和nonce，把B作为待发送节点，并封装想要pull的数据SendReq到B节点<br>4）B收到SendReq发送SendRes到A节点，数据为SendReq不包含的数据</p>
</li>
<li><p>images</p>
<p>一些跟 Docker 镜像生成相关的配置和脚本。主要包括各个镜像的 Dockerfile.in 文件。这些文件是生成 Dockerfile 的模板。</p>
</li>
<li><p>msp</p>
<p>成员服务提供者（Member Service Provider），提供一组认证相关的密码学机制和协议，用来负责对网络提供证书分发、校验，身份认证管理等。一些成员管理的实现代码等。</p>
</li>
<li><p>orderer</p>
</li>
</ol>
<p>internal/peer/chaincode/invoke.go ===&gt; chaincodeInvoke()  ——&gt; ChaincodeInvokeOrQuery</p>
<p>internal/peer/chaincode/common.go -&gt; ChaincodeInvokeOrQuery() 调用 processproposals</p>
<p>internal/peer/chaincode/common.go -&gt; InitCmdFactory() 初始化 endorserclient</p>
<p>peer</p>
<h3 id="consensus"><a href="#consensus" class="headerlink" title="consensus"></a>consensus</h3><p>internal/peer/node/start.go  processproposal</p>
<h4 id="endorsement"><a href="#endorsement" class="headerlink" title="endorsement"></a>endorsement</h4><p>github.com/hyperledger/fabric-protos-go/peer/peer.pb.go 中定义了endorser 服务的接口</p>
<p>internal/peer/chaincode/invoke.go  chaincodeInvoke ——-&gt; chaincodeinvokeorquery -&gt;</p>
<p>internal/peer/chaincode/common.go  processProposals方法调用了各个endorser的ProcessProposal方法</p>
<p>core/endorser/endorser.go   ProcessProposal函数入口， preprocess初步检验双花交易和ACL，然后模拟执行</p>
<h4 id="order"><a href="#order" class="headerlink" title="order"></a>order</h4><p>orderer/common/server/server.go 里定义了 两个 order节点的两个服务 Broadcast 和 Deliver，分别是排序服务前后消息处理逻辑</p>
<p>orderer/common/broadcast/broadcast.go   handle方法实现了broadcast逻辑， 在 processMessage方法中，调用了排序服务的order方法，交由排序服务排序后返回。</p>
<p>以solo为例，orderer/consensus/solo/consensus.go 的order方法将接收到的消息发送到 sendchan通道中，主函数从通道中接收消息，然后调用blockcutter的order将队列中的交易分割中区块提交。</p>
<p>internal/peer/chaincode/common.go  processProposals</p>
<p>orderer/consensus/consensus.go 定义了排序服务的接口</p>
<p>自定义的排序服务需要实现该接口。</p>
]]></content>
  </entry>
  <entry>
    <title>ipfs私有网络搭建</title>
    <url>/ipfs%E7%A7%81%E6%9C%89%E7%BD%91%E7%BB%9C%E6%90%AD%E5%BB%BA.html</url>
    <content><![CDATA[<blockquote>
<p>IPFS（InterPlanetary File System，星际文件系统），是一个旨在创建持久且分布式存储和共享文件的<a href="https://baike.baidu.com/item/网络传输协议" target="_blank" rel="noopener">网络传输协议</a>。它是一种内容可寻址的<a href="https://baike.baidu.com/item/对等" target="_blank" rel="noopener">对等</a><a href="https://baike.baidu.com/item/超媒体" target="_blank" rel="noopener">超媒体</a>分发协议。在IPFS网络中的节点将构成一个<a href="https://baike.baidu.com/item/分布式文件系统" target="_blank" rel="noopener">分布式文件系统</a>。它是一个<a href="https://baike.baidu.com/item/开放源代码" target="_blank" rel="noopener">开放源代码</a>项目，自2014年开始由Protocol Labs在开源社区的帮助下发展。其最初由Juan Benet设计。</p>
</blockquote>
<h2 id="IPFS安装"><a href="#IPFS安装" class="headerlink" title="IPFS安装"></a>IPFS安装</h2><p><a href="https://ipfs.io/" target="_blank" rel="noopener">ipfs官网</a>（需要翻墙），去<a href="dist.ipfs.io">dist.ipfs.io</a>下载对应版本的安装包，我的环境是windows+wsl，下载了两个系统的命令行版本，下面以wsl ubunut2004为例。</p>
<p>go-ipfs安装包 go-ipfs_v0.8.0_linux-amd64.tar.gz</p>
<p>解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf go-ipfs_v0.8.0_linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>
<p>解压后的文件夹为go-ipfs，<code>cd go-ipfs</code>进入该文件夹，文件夹下有一个install.sh的文件，运行该文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ./install.sh</span><br></pre></td></tr></table></figure>
<p>该程序将ipfs文件移动到<code>/usr/local/bin</code>下，没有sudo回报权限错误。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ipfs --version</span><br></pre></td></tr></table></figure>
<p>显示ipfs版本则安装完成。同样在Windows下安装好。</p>
<h2 id="IPFS私有网络配置"><a href="#IPFS私有网络配置" class="headerlink" title="IPFS私有网络配置"></a>IPFS私有网络配置</h2><h3 id="密钥"><a href="#密钥" class="headerlink" title="密钥"></a>密钥</h3><p>私有网络所有的节点必须共享同一个密钥，首先我们使用密钥创建工具，创建一个密钥。参考<a href="https://github.com/Kubuxu/go-ipfs-swarm-key-gen" target="_blank" rel="noopener">ipfs-swarm-key-gen</a></p>
<p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go get -u github.com/Kubuxu/go-ipfs-swarm-key-gen/ipfs-swarm-key-gen</span><br></pre></td></tr></table></figure>
<p>可能下载速度很慢，可以设置go代理。在<code>/etc/profile</code>最后添加<code>export GOPROXY=https://goproxy.cn</code></p>
<p>上面go get命令会将文件下载到你的<code>GOPATH/bin</code>中，安装完成后，进入<code>GOPATH/bin</code>，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ipfs-swarm-key-gen &gt; ~/.ipfs/swarm.key</span><br></pre></td></tr></table></figure>
<p>该命令会生成密钥到<code>~/.ipfs</code>下，可能会报错说没有<code>~/.ipfs</code>文件夹，自己先创建好再运行上面命令即可。</p>
<p>密钥生成好后，将该密钥复制到Windows的用户目录（通常为C:\User\Your_Name）下的.ipfs文件夹下。</p>
<h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><p>分别在Ubuntu和Windows下运行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ipfs init</span><br><span class="line">ipfs bootstrap rm all</span><br></pre></td></tr></table></figure>
<p>ipfs init后的默认启动节点是连接ipfs公网的节点，如果要连接私有网络</p>
<p>在每一个节点执行第二条语句，删除掉所有的默认启动节点。</p>
<h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>因为wsl和Windows公用端口号，所以二者不能同时使用默认配置启动，需提前修改一处配置。</p>
<p>修改Windows ipfs配置</p>
<p>在用户目录.ipfs文件夹下有一个config文件，修改其中的5001、8080、4001改为其他未使用端口号。</p>
<h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><p>然后分别在两个系统中添加对方的节点。</p>
<h4 id="查看Ubuntu的ip地址。"><a href="#查看Ubuntu的ip地址。" class="headerlink" title="查看Ubuntu的ip地址。"></a>查看Ubuntu的ip地址。</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.29.247.157  netmask 255.255.240.0  broadcast 172.29.255.255</span><br><span class="line">        inet6 fe80::215:5dff:fef6:3763  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:15:5d:f6:37:63  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 769725  bytes 712542870 (712.5 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 370109  bytes 596443776 (596.4 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>
<p>eth0下的inet就是自己的地址</p>
<h4 id="查看ipfs-id"><a href="#查看ipfs-id" class="headerlink" title="查看ipfs id"></a>查看ipfs id</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ipfs id</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">"ID"</span>: <span class="string">"12D3KooWPJq5t8GR4TkPqbkQcTEuNV4YjGLUGm4efNZ5owBNPNpm"</span>,</span><br><span class="line">        <span class="string">"PublicKey"</span>: <span class="string">"CAESIMhyoHz02Bocf8pACjqJ6si9ydWWt5kN5OMPxXprLXU+"</span>,</span><br><span class="line">        <span class="string">"Addresses"</span>: null,</span><br><span class="line">        <span class="string">"AgentVersion"</span>: <span class="string">"go-ipfs/0.8.0/"</span>,</span><br><span class="line">        <span class="string">"ProtocolVersion"</span>: <span class="string">"ipfs/0.1.0"</span>,</span><br><span class="line">        <span class="string">"Protocols"</span>: null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="在Windows中添加Ubuntu节点"><a href="#在Windows中添加Ubuntu节点" class="headerlink" title="在Windows中添加Ubuntu节点"></a>在Windows中添加Ubuntu节点</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ipfs bootstrap add /ip4/172.29.247.157/tcp/4001/ipfs/12D3KooW9qfu5tmdnuUBdS3R9ETsVjWLmuRgE8XhnZez4gJuXnYm</span><br></pre></td></tr></table></figure>
<p>ip4后面是ip地址，tcp后面是端口号，ipfs后面是ipfs id，修改为对方对应的数值即可。</p>
<p>接下来查看Windows的ip地址、ipfs id。在Ubuntu中添加Windows节点不再赘述，需要注意的是端口号改为前面你修改过的端口号。</p>
<p>至此配置完成。</p>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ipfs daemon <span class="comment">#启动ipfs，可以让他在后台运行。</span></span><br></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在Windows下向ipfs上传文件，在Ubuntu下载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ipfs add file </span><br><span class="line">added QmSRiccSZ2rX6tocuuA84PhfEBr2MWgVmqsMvHsT4qmMjd file <span class="comment">#返回hash值</span></span><br></pre></td></tr></table></figure>
<p>在Ubuntu中下载文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ipfs get QmSRiccSZ2rX6tocuuA84PhfEBr2MWgVmqsMvHsT4qmMjd</span><br><span class="line">Saving file(s) to QmSRiccSZ2rX6tocuuA84PhfEBr2MWgVmqsMvHsT4qmMjd</span><br></pre></td></tr></table></figure>
<p>下载后的文件仍是以该hash值命名，只要改一下后缀就可正常使用了。</p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a><u><strong><em>注意</em></strong></u></h4><p>ipfs add命令添加的文件只是暂时保存在ipfs中，GC时会删除，ipfs pin add hashcode会将对应文件永久保存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ipfs pin add QmSRiccSZ2rX6tocuuA84PhfEBr2MWgVmqsMvHsT4qmMjd <span class="comment">#永久保存在网络中</span></span><br><span class="line">ipfs pin rm QmSRiccSZ2rX6tocuuA84PhfEBr2MWgVmqsMvHsT4qmMjd <span class="comment">#删除</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>IPFS</category>
      </categories>
      <tags>
        <tag>IPFS</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-11.盛最多水的容器</title>
    <url>/leetcode-11-%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8.html</url>
    <content><![CDATA[<p>给你 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0) 。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p>
<p>说明：你不能倾斜容器。</p>
<p><a href="https://leetcode-cn.com/problems/container-with-most-water/" target="_blank" rel="noopener">11. 盛最多水的容器 - 力扣（LeetCode） (leetcode-cn.com)</a></p>
<p>双指针，l、r分别初始化为0和数组长度减一</p>
<p>首先给出计算盛水量的计算公式：area = (r-l)* Math.min(height[l], height[r])，即长度较小的一边乘以两边之间的距离。</p>
<p>下一步是确定下一个容器，由公式我们知道，不管如何移动l、r，<code>r-l</code> 一定是减小的，因此，要使得area变大，只能让min变大，因此，应该移动较小的一边。那么总体的思路就是：初始化双指针指向两边，计算盛水量，然后移动较小的一边，重复上面的过程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">int</span>[] height)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = height.length;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">            <span class="keyword">int</span> area = (r-l)*Math.min(height[l],height[r]);</span><br><span class="line">            ans = Math.max(ans,area);</span><br><span class="line">            <span class="keyword">if</span>(height[l] &gt; height[r])&#123;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>leetcode-1109-航班预定统计</title>
    <url>/leetcode-1109-%E8%88%AA%E7%8F%AD%E9%A2%84%E5%AE%9A%E7%BB%9F%E8%AE%A1.html</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/corporate-flight-bookings/" target="_blank" rel="noopener">1109. 航班预订统计 - 力扣（LeetCode） (leetcode-cn.com)</a></p>
<h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><blockquote>
<p>这里有 n 个航班，它们分别从 1 到 n 进行编号。</p>
<p>有一份航班预订表 bookings ，表中第 i 条预订记录 bookings[i] = [firsti, lasti, seatsi] 意味着在从 firsti 到 lasti （包含 firsti 和 lasti ）的 每个航班 上预订了 seatsi 个座位。</p>
<p>请你返回一个长度为 n 的数组 answer，里面的元素是每个航班预定的座位总数。</p>
</blockquote>
<p>一条预定记录也就是一个区间的增量，解题的最简单的想法就是将这些增量相加，得到总的答案，但是考虑的数据范围，最大可达$10^8$ ，因此这个方法不现实，而是采用<strong>差分</strong>的方法解决。</p>
<h3 id="差分："><a href="#差分：" class="headerlink" title="差分："></a>差分：</h3><p>差分与前缀和相对应，对于数组 [1,2,2,4]，其差分数组为 [1,1,0,2]，差分数组的第 <code>i</code> 个数即为原数组的第 <code>i</code> 个元素减去第<code>i-1</code> 个元素所得的差值，也就是说我们对差分数组求前缀和即可得到原数组。</p>
<p>那么，对原数组一个区间的增量，在差分数组上的反应是，只有起始位置和最后一个位置的后一个位置值改变，剩余中间位置的值不变，例如对数组<code>arr = [1,2,2,4]</code> ，其差分数组<code>diff = [1,1,0,2]</code>，若在位序[1,3]增加5，原数组变为<code>arr = [6,7,7,4]</code>，而差分数组变为<code>diff = [6,1,0,-3]</code> 。而所有的增加完成最后求原数组时，只需对操作差分数组<code>arr[i] = diff[i-1] + diff[i]</code> 。可以看到，只需借助差分数组，一次遍历就可以得到最终答案。</p>
<h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] corpFlightBookings(<span class="keyword">int</span>[][] bookings, <span class="keyword">int</span> n) &#123;</span><br><span class="line">    	<span class="keyword">int</span>[] diff = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>[] book : bookings)&#123;</span><br><span class="line">            diff[book[<span class="number">0</span>] - <span class="number">1</span>] += book[<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">if</span>( book[<span class="number">1</span>] &lt; n)&#123;</span><br><span class="line">                diff[book[<span class="number">1</span>]] -= book[<span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">            diff[i] += diff[i-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> diff;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析:"></a>复杂度分析:</h3><p>时间复杂度：O(n+m)，其中 n 为要求的数组长度，m 为预定记录的数量。我们需要对于每一条预定记录处理一次差分数组，并最后对差分数组求前缀和。</p>
<p>空间复杂度：O(1)。我们只需要常数的空间保存若干变量，<strong>注意返回值不计入空间复杂度</strong>。</p>
]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>差分</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>java笔记</title>
    <url>/java%E7%AC%94%E8%AE%B0.html</url>
    <content><![CDATA[<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="string">"abc"</span>; </span><br><span class="line">        String s2 = <span class="string">"ab"</span>;</span><br><span class="line">        String s3 = s2 + <span class="string">"c"</span>;</span><br><span class="line">        System.out.pringln(s1 == s3); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>s1指向字符串常量池中的“abc”，s2指向字符串常量池“ab”</p>
<p>s3，当字符串之间使用+拼接时，系统底层会自动创建一个StringBuilder对象（在堆中），然后再调用其append方法完成拼接，然后再调用toString方法转换为String类型，同样在堆中，因此这个过程一共创建了三个对象，一个c，一个StringBuilder，最后一个String。</p>
<h3 id="常量优化机制"><a href="#常量优化机制" class="headerlink" title="常量优化机制"></a>常量优化机制</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="string">"abc"</span>;</span><br><span class="line">        String s2 = <span class="string">"a"</span> + <span class="string">"b"</span> +<span class="string">"c"</span>;</span><br><span class="line">        System.out.pringln(s1 == s2); <span class="comment">// true</span></span><br><span class="line">    &#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不同于字符串拼接，“a”+”b”+”c”拼接为”abc”，就相当于<code>String s2 = &quot;abc&quot;</code>，同样指向常量池中的”abc”</p>
<h3 id="链式编程"><a href="#链式编程" class="headerlink" title="链式编程"></a>链式编程</h3><p>对象调用方法后返回对象本身，则可以链式编程，例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">StringBuilder sb2 = sb.append(<span class="string">"abc"</span>); <span class="comment">// sb2 == sb</span></span><br><span class="line">StringBuilder sb3 = sb2.append(<span class="string">"123"</span>); <span class="comment">// sb3 == sb2 == sb</span></span><br><span class="line">StringBuilder sb = sb.append(<span class="string">"abc"</span>).append(<span class="string">"123"</span>); <span class="comment">//链式编程</span></span><br></pre></td></tr></table></figure>
<h3 id="StringBuilder提高效率原理"><a href="#StringBuilder提高效率原理" class="headerlink" title="StringBuilder提高效率原理"></a>StringBuilder提高效率原理</h3><h4 id="String的拼接"><a href="#String的拼接" class="headerlink" title="String的拼接"></a>String的拼接</h4><p>String内容不可改变，String拼接时每次都需要系统底层自动创建StringBuilder对象，然后调用StringBuilder的append()方法，最后使用toString()转换为String对象返回，销毁StringBuilder对象。</p>
<h4 id="StringBuilder拼接"><a href="#StringBuilder拼接" class="headerlink" title="StringBuilder拼接"></a>StringBuilder拼接</h4><p>StringBuilder内容可以更改，都在原来的StringBuilder对象中进行。</p>
<h3 id="循环标号"><a href="#循环标号" class="headerlink" title="循环标号"></a>循环标号</h3><p>在Java中，可以在循环前加入标号，标号只能被continue和break引用，用于跳出多重循环</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lo:</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">    String choice = sc.next();</span><br><span class="line">    <span class="keyword">switch</span>(chice) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">            <span class="keyword">break</span> lo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><div class="table-container">
<table>
<thead>
<tr>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>git init</td>
<td>初始化创建仓库</td>
</tr>
<tr>
<td>git status</td>
<td>查看git状态</td>
</tr>
<tr>
<td>git add</td>
<td>将文件添加到暂存区</td>
</tr>
<tr>
<td>git commit</td>
<td>将暂存区提交到历史仓库</td>
</tr>
<tr>
<td>git log</td>
<td>查看日志</td>
</tr>
<tr>
<td>git reflog</td>
<td>精简日志</td>
</tr>
<tr>
<td>git reset —hard *<em>*</em></td>
<td>切换版本</td>
</tr>
<tr>
<td>git branch 分支名</td>
<td>创建分支，创建的新分支包含现有文件</td>
</tr>
<tr>
<td>git branch</td>
<td>查看分支</td>
</tr>
<tr>
<td>git branch -d 分支名</td>
<td>删除分支</td>
</tr>
<tr>
<td>git checkout 分支名</td>
<td>切换分支</td>
</tr>
<tr>
<td>git merge 分支名</td>
<td>将分支合并到当前分支</td>
</tr>
<tr>
<td>git remote add &lt;远程仓库名称&gt; &lt;远程仓库url&gt;</td>
<td>添加远程仓库</td>
</tr>
<tr>
<td>git push -u &lt;仓库名称&gt; &lt;分支名&gt;</td>
<td>push到远程仓库</td>
</tr>
<tr>
<td>git pull &lt;远程仓库名&gt; &lt;分支名&gt;</td>
<td>从远程仓库拉取文件</td>
</tr>
</tbody>
</table>
</div>
<p>生成ssh公钥<code>ssh-keygen -t rsa -C &lt;username&gt;</code></p>
<h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><p>静态修饰符</p>
<p>特点：</p>
<ol>
<li>被static修饰的成员被该类的所有成员共享</li>
<li>被static修饰的成员会随着类的加载而加载，优先于对象存在</li>
<li>可以通过类名.*<em>*</em>的形式进行调用</li>
</ol>
<p>注意事项：</p>
<ol>
<li>静态方法中只能访问静态成员（成员变量，成员方法）</li>
<li>非静态方法中，可以使用静态成员，也可以使用非静态成员</li>
<li>静态方法中，没有this关键字</li>
</ol>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>好处：</p>
<ol>
<li>提高代码复用性</li>
<li>提高代码的可维护性</li>
<li>让类与类之间产生了关系，是多态的基础</li>
</ol>
<p>弊端：</p>
<ol>
<li>继承导致子类必须拥有父类非私有属性和方法</li>
</ol>
<p>特点：</p>
<ol>
<li>只支持单继承，不支持多继承，但支持多层继承</li>
</ol>
<h3 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h3><div class="table-container">
<table>
<thead>
<tr>
<th>修饰符</th>
<th>同一个类中</th>
<th>同一包中子类无关类</th>
<th>不同包中子类</th>
<th>不同包中无关类</th>
</tr>
</thead>
<tbody>
<tr>
<td>private</td>
<td>:heavy_check_mark:</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>默认</td>
<td>:heavy_check_mark:</td>
<td>:heavy_check_mark:</td>
<td></td>
<td></td>
</tr>
<tr>
<td>protected</td>
<td>:heavy_check_mark:</td>
<td>:heavy_check_mark:</td>
<td>:heavy_check_mark:</td>
<td></td>
</tr>
<tr>
<td>public</td>
<td>:heavy_check_mark:</td>
<td>:heavy_check_mark:</td>
<td>:heavy_check_mark:</td>
<td>:heavy_check_mark:</td>
</tr>
</tbody>
</table>
</div>
<p>private修饰的成员同样会被子类继承，但是对子类不可见，即子类大小包含了父类private成员，可以通过get、set方法获取设置private成员。</p>
<h3 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h3><p>在子父类中</p>
<p>注意事项</p>
<ol>
<li>父类中私有方法不能被重写</li>
<li>父类非静态方法，子类必须通过非静态方法重写，静态方法不能被重写</li>
<li>子类重写父类时，访问权限必须大于等于父类</li>
</ol>
<h3 id="继承中构造方法的特点："><a href="#继承中构造方法的特点：" class="headerlink" title="继承中构造方法的特点："></a>继承中构造方法的特点：</h3><p>子类中所有的构造方法默认都会访问父类中无参的构造方法，系统默认构造方法的第一条语句是<code>super()</code>，会访问父类构造方法。</p>
<h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><p>对扩展内容开放，对修改内容关闭，尽量在不改变原有代码的前提下完成需求。（人话：扩展代码可以，修改代码不行，保存原有代码，添加新的需求实现代码）</p>
<h3 id="抽象类与抽象方法"><a href="#抽象类与抽象方法" class="headerlink" title="抽象类与抽象方法"></a>抽象类与抽象方法</h3><p>Java中的抽象方法就是以abstract修饰的方法，这种方法只声明返回的数据类型、方法名称和所需的参数，没有方法体，也就是说抽象方法只需要声明而不需要实现。</p>
<p>当一个方法为抽象方法时，意味着这个方法应该被子类的方法所重写，否则其子类的该方法仍然是abstract的，这个子类由于继承父类，拥有抽象方法，因此它也是抽象类，即声明为abstract。abstract方法只允许声明不能实现。 </p>
<h4 id="抽象类注意事项"><a href="#抽象类注意事项" class="headerlink" title="抽象类注意事项"></a>抽象类注意事项</h4><ol>
<li>抽象类不能被实例化</li>
<li>抽象类中有构造方法</li>
<li>抽象类的子类必须重写父类中所有抽象方法，或者子类也是抽象类</li>
<li>如果一个类中含有abstract方法，那么这个类必须用abstract来修饰，当然abstract类也可以没有abstract方法。一个抽象类里面没有一个抽象方法可用来禁止产生这种类的对象</li>
</ol>
<h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><p>可以修饰方法类变量</p>
<ol>
<li><p>final修饰的方法不能被重写</p>
</li>
<li><p>final修饰的变量是常量，不能再次被赋值</p>
<p><strong>常量命名规范</strong>：</p>
<p>​    如果是一个单词，所有字母大写，如果是多个单词，同样所有单词大写，但中间需要使用下划线分隔</p>
</li>
<li><p>final修饰的类不能被继承</p>
</li>
<li><p>final修饰的成员变量初始化要么是在创建的时候直接给值，要么是在构造方法结束前给值。</p>
</li>
</ol>
<h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><ol>
<li><p>局部代码块</p>
<p>方法内的一对中括号，限定变量的生命周期，及早释放，提高内存利用率。</p>
</li>
<li><p>构造代码块</p>
<p>类中方法外，每次构造方法执行时，都会执行该代码块代码，并且在构造方法执行前执行</p>
<p>作用：将多个构造方法中相同的代码，抽取到构造代码块中，提高代码的复用性。</p>
</li>
<li><p>静态代码块</p>
<p>类中方法外，需要使用static修饰，随着类的加载而加载，并且只执行一次。</p>
<p>作用：类加载时做数据初始化操作。</p>
</li>
</ol>
<h3 id="基本数据类型（8种）"><a href="#基本数据类型（8种）" class="headerlink" title="基本数据类型（8种）"></a>基本数据类型（8种）</h3><div class="table-container">
<table>
<thead>
<tr>
<th>数据类型</th>
<th>字节数</th>
<th>默认值</th>
<th>包装类</th>
</tr>
</thead>
<tbody>
<tr>
<td>byte</td>
<td>1</td>
<td>0</td>
<td>Byte</td>
</tr>
<tr>
<td>short</td>
<td>2</td>
<td>0</td>
<td>Short</td>
</tr>
<tr>
<td>int</td>
<td>4</td>
<td>0</td>
<td>Integer</td>
</tr>
<tr>
<td>long</td>
<td>8</td>
<td>0L</td>
<td>Long</td>
</tr>
<tr>
<td>char</td>
<td>2</td>
<td>‘u0000’</td>
<td>Character</td>
</tr>
<tr>
<td>float</td>
<td>4</td>
<td>0.0F</td>
<td>Float</td>
</tr>
<tr>
<td>double</td>
<td>8</td>
<td>0.0D</td>
<td>Double</td>
</tr>
<tr>
<td>boolen</td>
<td>1</td>
<td>false</td>
<td>Boolen</td>
</tr>
</tbody>
</table>
</div>
<p>String等引用类型默认值是null</p>
<h4 id="自动装箱"><a href="#自动装箱" class="headerlink" title="自动装箱"></a>自动装箱</h4><p>java底层自动调用 <strong>valueOf()</strong>方法，把一个基本数据类型变成对应的包装类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer i1 = <span class="number">22</span>;</span><br></pre></td></tr></table></figure>
<h4 id="自动拆箱"><a href="#自动拆箱" class="headerlink" title="自动拆箱"></a>自动拆箱</h4><p>把一个包装类，变成基本数据类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i2 = i1;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer i1 = <span class="number">100</span>;</span><br><span class="line">i1 += <span class="number">200</span>;</span><br><span class="line">System.out.println(i1);<span class="comment">// 300</span></span><br></pre></td></tr></table></figure>
<p>上面代码看似简单，但计算过程很重要；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer i1 = <span class="number">100</span>; <span class="comment">//自动装箱，将100转换为Integer类型。</span></span><br><span class="line">i1 += <span class="number">200</span>;	<span class="comment">// i1 = i1 + 200 首先自动拆箱，将i1变为int 100，然后相加，最后将结果300自动装箱赋值给i1</span></span><br><span class="line">System.out.println(i1);<span class="comment">// 300</span></span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：Integer是对象，只要是对象，在使用前就必须进行不为null判断。</p>
<h4 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">char --&gt; int</span><br><span class="line">byte --&gt; short</span><br><span class="line">short --&gt; int</span><br><span class="line">int --&gt; long</span><br><span class="line">long --&gt; float</span><br><span class="line">float --&gt; double</span><br></pre></td></tr></table></figure>
<p>自动提升：两个数值进行二元运算时先将两个操作数转换为同一类型，然后进行运算。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">20_0000_0000</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">long</span> c;</span><br><span class="line">c = a * b;</span><br><span class="line">System.out.println(c); <span class="comment">//这个结果是错误的</span></span><br><span class="line"><span class="comment">//a和b都是int类型，在计算时都使用int类型，计算结果同样使用int类型存储，因为计算结果太大溢出，因此int存储的结果是错误的，再赋值给long类型也是错误的结果。</span></span><br><span class="line">c = (<span class="keyword">long</span>)a * b;</span><br><span class="line">System.out.pringln(c); <span class="comment">//这个结果正确</span></span><br><span class="line"><span class="comment">//将a强制转换为long后，a和b的运算使用long类型进行，最后使用long存储计算结果，赋值给c，结果正确。</span></span><br></pre></td></tr></table></figure>
<h5 id="int转String"><a href="#int转String" class="headerlink" title="int转String"></a>int转String</h5><ol>
<li>直接加双引号，<code>10+&quot;&quot;</code></li>
<li>使用String类中的valueOf()方法。</li>
</ol>
<h5 id="String转int"><a href="#String转int" class="headerlink" title="String转int"></a>String转int</h5><p>​    Integer.parseInt()方法，返回值为int类型。</p>
<h5 id="Arrays-binarySearch-返回值"><a href="#Arrays-binarySearch-返回值" class="headerlink" title="Arrays.binarySearch()返回值"></a>Arrays.binarySearch()返回值</h5><ol>
<li>要查找的元素存在，则返回索引，</li>
<li>要查找的元素不存在，返回（-插入点-1）<ol>
<li>插入点就是这个元素应该在数组中的位置，因为使用二分查找必须是有序的，因此每个元素都可以有一个确定的位置，即插入点。</li>
<li>为什么要-1，若不减1，插入点可能是0，则不能确定元素是否存在。</li>
</ol>
</li>
</ol>
<h3 id="switch支持的表达式类型"><a href="#switch支持的表达式类型" class="headerlink" title="switch支持的表达式类型"></a>switch支持的表达式类型</h3><p>​    int、byte、char、short、枚举类型、字符串（JDK7）</p>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="接口的定义与特点"><a href="#接口的定义与特点" class="headerlink" title="接口的定义与特点"></a>接口的定义与特点</h3><p>接口用关键字interface来定义</p>
<p><code>public interface &lt;Interface_Name&gt;{}</code></p>
<ol>
<li><p>接口不能实例化</p>
</li>
<li><p>接口与类之间是实现关系，通过<code>implements</code>关键字表示</p>
<p><code>public class &lt;Class_Name&gt; implements &lt;Interface_Name&gt; {}</code></p>
</li>
<li><p>接口可以多实现。</p>
</li>
<li><strong>接口中的变量默认是常量</strong>，系统会自动加入三个关键字修饰：public、static、final</li>
<li>接口没有构造方法。</li>
<li>接口中方法没有方法体，默认是public、abstract的，在jdk8后，允许在接口中定义非抽象方法，但需要使用default修饰，这些方法就是默认方法，不强制实现类重写，用于解决接口的升级问题。</li>
</ol>
<p><strong>接口中默认方法注意事项：</strong></p>
<ol>
<li>默认方法不是抽象方法，所以不能被强制重写。但可以重写，重写要去掉default。</li>
<li>public可以省略，但default不能。</li>
<li>如果实现了多个接口，接口中有相同的默认方法声明，子类就必须重写默认方法。</li>
</ol>
<p><strong>JDK8中接口成员的特点：</strong></p>
<ol>
<li>允许在接口中定义非抽象类型，但需要default修饰，用于解决接口的升级问题。</li>
<li>允许定义static静态方法。<code>public static void &lt;Func_Name&gt;(){}</code></li>
</ol>
<p>一个文件中可以有多个类，但只能有一个被public修饰，被public修饰的类必须与文件名保持一致。</p>
<h3 id="接口和抽象类的相同点和区别？"><a href="#接口和抽象类的相同点和区别？" class="headerlink" title="接口和抽象类的相同点和区别？"></a>接口和抽象类的相同点和区别？</h3><p>相同点:</p>
<ol>
<li>都不能被实例化。</li>
<li>接口的实现类或抽象类的子类需实现接口或抽象类中相应的方法才能被实例化。</li>
</ol>
<p>不同点：</p>
<ol>
<li><del>接口只能有方法定义，不能有方法的实现，而抽象类可以有方法的定义与实现。</del>    JDK8后可以有默认接口，默认接口有方法体。</li>
<li>实现接口的关键字为implements,继承抽象类的关键字为extends。一个类可以实现多个接口，只能继承一个抽象类。</li>
<li>当子类和父类之间存在逻辑上的层次结构，推荐使用抽象类，有利于功能的累积。当功能不需要，希望支持差别较大的两个或更多对象间的特定交互行为，推荐使用接口。使用接口能降低软件系统的耦合度，便于日后维护或添加删除方法。</li>
</ol>
<h3 id="类和接口的关系"><a href="#类和接口的关系" class="headerlink" title="类和接口的关系"></a>类和接口的关系</h3><h4 id="类和类的关系"><a href="#类和类的关系" class="headerlink" title="类和类的关系"></a>类和类的关系</h4><p>继承关系，只能单继承，但是可以多层继承。</p>
<h4 id="类和接口的关系-1"><a href="#类和接口的关系-1" class="headerlink" title="类和接口的关系"></a>类和接口的关系</h4><p>实现关系，可以单实现，可以多实现，还可以继承的同时实现多个接口。</p>
<p>如果类实现的接口和继承的父类中有相同的函数，则默认是继承来的函数生效。</p>
<h4 id="接口和接口的关系"><a href="#接口和接口的关系" class="headerlink" title="接口和接口的关系"></a>接口和接口的关系</h4><p>继承关系，可以多继承。</p>
<p>若多个继承的接口有函数代码逻辑冲突，则必须重写。</p>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="多态的成员访问特点"><a href="#多态的成员访问特点" class="headerlink" title="多态的成员访问特点"></a>多态的成员访问特点</h3><ol>
<li>成员变量：编译看左边（父类），运行看左边（父类）   即：编译和运行使用的都是父类的成员变量。</li>
<li>成员方法：编译看左边（父类），运行看右边（子类）   即：编译时看父类中有没有该方法，运行时看子类中具体的逻辑代码。</li>
</ol>
<h3 id="多态的好处"><a href="#多态的好处" class="headerlink" title="多态的好处"></a>多态的好处</h3><p>扩展性提高，定义方法时使用父类作为形式参数，该方法就可以接受任意子类对象。</p>
<h3 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h3><p>不能调用子类中特有的方法。</p>
<h3 id="多态中的转型"><a href="#多态中的转型" class="headerlink" title="多态中的转型"></a>多态中的转型</h3><ol>
<li><p>向上转型</p>
<p>父类引用指向子类对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FuClass f = <span class="keyword">new</span> ZiClass();</span><br></pre></td></tr></table></figure>
</li>
<li><p>向下转型</p>
<p>从父类类型转换成子类类型。类似强制类型转换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FuClass f = <span class="keyword">new</span> ZiClass();</span><br><span class="line">ZiClass z = (ZiClass)f;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><h3 id="定义内部类对象"><a href="#定义内部类对象" class="headerlink" title="定义内部类对象"></a>定义内部类对象</h3><p>外部类名.内部类名 对象名  =  new 外部类对象().new  内部类对象();</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Outer.Inner i = <span class="keyword">new</span> Outer().<span class="keyword">new</span> Inner();</span><br></pre></td></tr></table></figure>
<p><strong>访问特点：</strong>1. 内部类可以使用外部类成员，包括私有成员。 2. 外部类访问内部类成员必须创建对象。</p>
<h3 id="静态成员内部类"><a href="#静态成员内部类" class="headerlink" title="静态成员内部类"></a>静态成员内部类</h3><p>外部类名.内部类名  对象名  = new 外部类名.内部类名();</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Outer.Inner oi = <span class="keyword">new</span> Outer.Inner();</span><br></pre></td></tr></table></figure>
<h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><h4 id="定义方法："><a href="#定义方法：" class="headerlink" title="定义方法："></a>定义方法：</h4><p>在方法内定义类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"show"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Inner i = <span class="keyword">new</span> Inner();</span><br><span class="line">        i.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="访问方式："><a href="#访问方式：" class="headerlink" title="访问方式："></a>访问方式：</h4><p>只能在方法中创建对象并访问。</p>
<h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>将继承\实现，方法重写，创建对象放在了一部进行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Inter</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Inter()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"匿名内部类"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;.show();</span><br></pre></td></tr></table></figure>
<p>应用场景：接口的形参是接口或抽象类。</p>
<h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><p>对匿名内部类进行优化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        goSwimming(<span class="keyword">new</span> Inter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">learn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"learn"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);												<span class="comment">// 匿名内部类</span></span><br><span class="line">        goSwimming(() -&gt; System.out.println(<span class="string">"learn"</span>));  <span class="comment">// lambda表达式 </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">goSwimming</span><span class="params">(Inter inter)</span></span>&#123;</span><br><span class="line">        inter.learn();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Inter</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">learn</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="使用前提："><a href="#使用前提：" class="headerlink" title="使用前提："></a>使用前提：</h4><ol>
<li>有一个接口（只能是接口）</li>
<li>接口中有且仅有一个抽象方法</li>
</ol>
<h4 id="Lambda表达式的省略模式"><a href="#Lambda表达式的省略模式" class="headerlink" title="Lambda表达式的省略模式"></a>Lambda表达式的省略模式</h4><ol>
<li>参数类型可以省略，但有多个参数的情况下，不能只省略一个。</li>
<li>如果参数有且只有一个，那么小括号可以省略。</li>
<li>如果函数体只有一条语句，可以省略大括号和分号，甚至return语句。</li>
</ol>
<h4 id="Lambda表达式和匿名内部类的区别"><a href="#Lambda表达式和匿名内部类的区别" class="headerlink" title="Lambda表达式和匿名内部类的区别"></a>Lambda表达式和匿名内部类的区别</h4><h5 id="所需类型不同："><a href="#所需类型不同：" class="headerlink" title="所需类型不同："></a>所需类型不同：</h5><ul>
<li>匿名内部类可以是接口，也可以是抽象类，还可以是具体类。</li>
<li>Lambda表达式只能是接口。</li>
</ul>
<h5 id="使用限制不同"><a href="#使用限制不同" class="headerlink" title="使用限制不同"></a>使用限制不同</h5><ul>
<li><p>如果接口中有且仅有一个抽象方法，可以使用Lambda表达式，也可以使用匿名内部类。</p>
</li>
<li><p>如果接口中多于一个抽象方法，只能使用匿名内部类，而不能使用Lambda表达式。</p>
</li>
</ul>
<h5 id="实现原理不同"><a href="#实现原理不同" class="headerlink" title="实现原理不同"></a>实现原理不同</h5><ul>
<li>匿名内部类编译之后产生一个单独的.class字节码文件</li>
<li>Lambda表达式编译之后，没有一个单独的.class字节码文件。对应的字节码文件会在运行时动态生成。</li>
</ul>
<h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><h4 id="运行时异常和编译时异常"><a href="#运行时异常和编译时异常" class="headerlink" title="运行时异常和编译时异常"></a>运行时异常和编译时异常</h4><p>运行时异常可以忽略不处理，编译时异常必须处理。</p>
<h4 id="throw和throws的比较"><a href="#throw和throws的比较" class="headerlink" title="throw和throws的比较"></a>throw和throws的比较</h4><ol>
<li>throws用在方法声明后面，跟的是异常的类名；throw在方法体内，跟异常的对象。</li>
<li>throws表示声明一个异常，若交由调用者处理；throw是手动抛出异常，是异常处理。</li>
</ol>
<h4 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h4><ol>
<li>定义异常类</li>
<li>明确继承关系</li>
<li>构造方法（空参、带参）</li>
</ol>
<h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><h4 id="集合和数组对比"><a href="#集合和数组对比" class="headerlink" title="集合和数组对比"></a>集合和数组对比</h4><ol>
<li>数组长度不可变；集合长度可变，会自动扩容。</li>
<li>数组可以存储基本数据类型和引用数据类型；集合只能存储引用数据类型，如果要存储基本数据类型，就要存对应的包装类。int -&gt; Integer</li>
</ol>
<h4 id="集合分类"><a href="#集合分类" class="headerlink" title="集合分类"></a>集合分类</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">集合 --单列--&gt; Collection</span><br><span class="line">集合 --多列--&gt; Map</span><br><span class="line">Collection --可重复--&gt; List</span><br><span class="line">Collection --不可重复--&gt; Set</span><br><span class="line">List --&gt; ArrayList</span><br><span class="line">List --&gt; LinkedList</span><br><span class="line">Set --&gt; HashSet</span><br><span class="line">Set --&gt; TreeSet</span><br><span class="line">Map --&gt; HashMap</span><br><span class="line">Map --&gt; TreeMap</span><br></pre></td></tr></table></figure>
<p><strong>叶子节点是实现类，其他都是接口。</strong></p>
<h4 id="集合常用方法"><a href="#集合常用方法" class="headerlink" title="集合常用方法"></a>集合常用方法</h4><div class="table-container">
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>boolean add(E e)</td>
<td>添加元素</td>
</tr>
<tr>
<td>boolean remove(Object o)</td>
<td>删除元素</td>
</tr>
<tr>
<td>boolean removeIf(Predicate&lt;? super E&gt; filter)</td>
<td>指定条件删除，参数是Lambda表达式</td>
</tr>
<tr>
<td>contains(Object o)</td>
<td>判断集合是否包含元素</td>
</tr>
<tr>
<td>clear()</td>
<td>清空集合</td>
</tr>
<tr>
<td>isEmpty()</td>
<td>判断集合是否为空</td>
</tr>
<tr>
<td>size()</td>
<td>返回集合元素数量</td>
</tr>
<tr>
<td>boolean retainAll(Collection&lt;?&gt; c)</td>
<td>从集合中删除不包含在指定集合中的元素</td>
</tr>
</tbody>
</table>
</div>
<h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><p>集合专用遍历方式</p>
<p>Iterator <e> iterator()     默认指向0索引位置。</e></p>
<h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><div class="table-container">
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>boolean hasNext()</td>
<td>判断<strong>当前位置</strong>是否有元素可以被取出</td>
</tr>
<tr>
<td>E next()</td>
<td>获取<strong>当前位置</strong>元素，并将迭代器移向下一个位置</td>
</tr>
<tr>
<td>remove()</td>
<td>删除迭代器指定元素</td>
</tr>
</tbody>
</table>
</div>
<h4 id="增强for"><a href="#增强for" class="headerlink" title="增强for"></a>增强for</h4><p>简化数组和Collection集合的遍历</p>
<p>是JDK5之后出现的，内部原理是一个Iterator迭代器，只有实现了Iterator接口的类才能使用迭代器和增强for</p>
<p>List和Set可以使用，Map不能使用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Collection&lt;String&gt; collection = new ArrayList&lt;&gt;();</span><br><span class="line">for(String s : collection)&#123;</span><br><span class="line">	System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong>在增强for中，s只是第三方变量，修改其值并不会改变集合中的元素。</p>
<h4 id="在增强for中使用remove方法出现ConcurrentModificationException异常"><a href="#在增强for中使用remove方法出现ConcurrentModificationException异常" class="headerlink" title="在增强for中使用remove方法出现ConcurrentModificationException异常"></a>在增强for中使用remove方法出现ConcurrentModificationException异常</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String[] strArr = &#123;<span class="string">"111"</span>,<span class="string">"222"</span>,<span class="string">"333"</span>,<span class="string">"333"</span>,<span class="string">"444"</span>&#125;;</span><br><span class="line">    List&lt;String&gt; strings = Arrays.asList(strArr);</span><br><span class="line">    Collection&lt;String&gt; collection = <span class="keyword">new</span> ArrayList&lt;&gt;(strings);</span><br><span class="line">    collection.add(<span class="string">"aaa"</span>);</span><br><span class="line">    collection.add(<span class="string">"bbb"</span>);</span><br><span class="line">    collection.add(<span class="string">"ccc"</span>);</span><br><span class="line">    Iterator&lt;String&gt; iterator = collection.iterator();</span><br><span class="line">    <span class="keyword">for</span> (String s : collection) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"aaa"</span>.equals(s))&#123;</span><br><span class="line">            collection.remove(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    String s = collection.toString();</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码使用增强for删除元素，看似没有问题，然而实际运行时会抛出ConcurrentModificationException异常</p>
<blockquote>
<p>这是由于增强for循环底层调用的是迭代器的next和hasnext方法来遍历的，移除元素后，无法预知到元素的位置。这也是增强for的缺点，不能获取下标，不能动态删除集合中的内容。</p>
</blockquote>
<p>大概意思是说在增强for和迭代器Iterator以及forEach中，不能使用remove删除元素，否则会抛出异常。</p>
<h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String[] strArr = &#123;<span class="string">"111"</span>,<span class="string">"222"</span>,<span class="string">"333"</span>,<span class="string">"333"</span>,<span class="string">"444"</span>&#125;;</span><br><span class="line">    List&lt;String&gt; strings = Arrays.asList(strArr);</span><br><span class="line">    Collection&lt;String&gt; collection = <span class="keyword">new</span> ArrayList&lt;&gt;(strings);</span><br><span class="line">    collection.add(<span class="string">"aaa"</span>);</span><br><span class="line">    collection.add(<span class="string">"bbb"</span>);</span><br><span class="line">    collection.add(<span class="string">"ccc"</span>);</span><br><span class="line">    Iterator&lt;String&gt; iterator = collection.iterator();</span><br><span class="line">    List&lt;String&gt; removeList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String s : collection) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"aaa"</span>.equals(s))&#123;</span><br><span class="line">            removeList.add(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    collection.removeAll(removeList);</span><br><span class="line">    String s = collection.toString();</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="三种集合遍历方式"><a href="#三种集合遍历方式" class="headerlink" title="三种集合遍历方式"></a>三种集合遍历方式</h4><ol>
<li><p>普通for循环</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; collection.size(); i++) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用场景：需要操作索引</p>
</li>
<li><p>迭代器Iterator</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator&lt;String&gt; it = collection.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">    System.out.println(it.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用场景：遍历时删除元素</p>
</li>
<li><p>增强for</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(String s : collection)&#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用场景：仅遍历</p>
</li>
</ol>
<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><h5 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h5><p>使用TreeSet时，对于自定义类，必须定义排序规则，定义排序规则的方式有两种：</p>
<ol>
<li><p>自然排序：自定义类实现Comparable接口，并重写其中的compareTo方法，根据返回值进行排序，返回负数，插入前面；返回0，不插入；返回正数，插入到后面。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Student</span>&gt;</span>&#123; <span class="comment">// Comparable中的泛型应该是TreeSet中的数据类型</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Student o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getAge()-o.getAge();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 构造方法、get和set方法省略。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>比较器排序：创建TreeSet对象时使用有参构造方法，参数是Comparator对象，重写compare方法，根据返回值进行排序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//有参构造的两种方式</span></span><br><span class="line">    <span class="comment">//第一种，Lambda表达式</span></span><br><span class="line">    TreeSet&lt;Student&gt; set = <span class="keyword">new</span> TreeSet&lt;&gt;((Student s1,Student s2) -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> s1.getAge()-s2.getAge();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//第二种，匿名内部类</span></span><br><span class="line">    TreeSet&lt;Student&gt; ts = <span class="keyword">new</span> TreeSet&lt;&gt;(<span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 主要条件：根据age排序</span></span><br><span class="line">                <span class="keyword">int</span> result = o1.getAge() - o2.getAge();</span><br><span class="line">                <span class="comment">// 次要条件：根据name排序</span></span><br><span class="line">                result = result == <span class="number">0</span> ? o1.getName().compareTo(o2.getName()) : result;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    Student s1 = <span class="keyword">new</span> Student(<span class="string">"zhangsan"</span>, <span class="number">23</span>);</span><br><span class="line">    Student s2 = <span class="keyword">new</span> Student(<span class="string">"lisi"</span>, <span class="number">22</span>);</span><br><span class="line">    Student s3 = <span class="keyword">new</span> Student(<span class="string">"wangwu"</span>, <span class="number">24</span>);</span><br><span class="line">    set.add(s1);</span><br><span class="line">    set.add(s2);</span><br><span class="line">    set.add(s3);</span><br><span class="line">    </span><br><span class="line">    System.out.println(set);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><p>红黑树添加节点时，默认节点是红色效率高。</p>
<p>红黑树添加节点</p>
<p><img src="java%E7%AC%94%E8%AE%B0/image-20210703005228607.png" alt="image-20210703005228607"></p>
<h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol>
<li>Object类中的hashCode方法根据地址值计算hash值，因此可能有相同内容的对象存储到set中，若HashSet中存储自定义类，需要重写hashCode和equals方法。</li>
<li>不能使用索引遍历set。</li>
</ol>
<h4 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h4><ol>
<li>JDK1.7以前，HashSet的底层使用Hash表+链表的形式存储数据，即链地址法。HashSet默认的加载因子是0.75，最大容量是16，因此可以得出HashMap的默认容量是：0.75*16=12，当存储空间&gt;=12时，发生扩容。当数据要添加到set中时，通过hashCode函数计算出数据应该在hash表中的索引，如果该位置当前无数据（null），直接添加，如果该位置不为空，则通过equals方法判断当前数据和hash表中数据是否相等，相等不添加，不等则添加到链表头部。</li>
<li>由于使用链表，当链表长度过长时，添加、查询效率太低，在JDK1.8之后，自动将长度大于等于8的链表转换为红黑树存储。因此在1.8之后，hash表中不仅有链表，还有红黑树。</li>
</ol>
<h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><h2 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h2><h3 id="获取方法"><a href="#获取方法" class="headerlink" title="获取方法"></a>获取方法</h3><ol>
<li><p>单列集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashSet&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;String&gt;(Set.of(<span class="string">"张三"</span>,<span class="string">"李四"</span>,<span class="string">"王五"</span>,<span class="string">"赵六"</span>));</span><br><span class="line">set.stream().forEach(s-&gt; System.out.println(s));</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>双列集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(Map.of(<span class="string">"张三"</span>,<span class="number">23</span>,<span class="string">"李四"</span>,<span class="number">24</span>));</span><br><span class="line">map.keySet().stream().forEach(s-&gt;System.out.println(s));</span><br><span class="line"><span class="comment">//map.entrySet().stream().forEach(s-&gt;System.out.println(s));</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">Arrays.stram(arr).forEach(s-&gt;System.out.println(s));</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>同类型数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stram.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>).forEach(s-&gt;System.out.println(s));</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h3><p><img src="java%E7%AC%94%E8%AE%B0/image-20210812172232737.png" alt="image-20210812172232737"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">IO流--&gt;字节流</span><br><span class="line">IO流--&gt;字符流</span><br><span class="line">字节流</span><br></pre></td></tr></table></figure>
<h3 id="乐观锁和悲观锁"><a href="#乐观锁和悲观锁" class="headerlink" title="乐观锁和悲观锁"></a>乐观锁和悲观锁</h3><p>乐观锁：从乐观的角度出发，假设每次获取数据时其他线程都不会修改，所以不上锁，只有修改数据的时候，会检查其他线程有没有修改数据。如果原数据被修改，则再次获取内存数据值，重新更新。如果没有修改，直接更新。CAS</p>
<p>悲观锁：从悲观的角度出发，假设每次获取数据时其他线程都可能修改，所以每次操作共享数据前都要加锁。synchronized</p>
<p>CurrentHashMap</p>
<p>Java中泛型必须是引用类型。</p>
<p>BigDecimal精确计算需要使用String进行构造BigDecimal对象。使用double不行。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 111.二叉树的最小深度</title>
    <url>/leetcode-111-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6.html</url>
    <content><![CDATA[<p>给定一个二叉树，找出其最小深度。</p>
<p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p>
<p><strong>说明：</strong>叶子节点是指没有子节点的节点。</p>
<p><img src="leetcode-111-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6/image-20210915190518140.png" alt="image-20210915190518140"></p>
<p>可以想到使用广度优先搜索的方法，遍历整棵树。</p>
<p>当我们找到一个叶子节点时，直接返回这个叶子节点的深度。广度优先搜索的性质保证了最先搜索到的叶子节点的深度一定最小。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Deque&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="keyword">int</span> depth = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>( !queue.isEmpty() )&#123;</span><br><span class="line">            <span class="keyword">int</span> n = queue.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">                TreeNode node = queue.poll();</span><br><span class="line">                <span class="keyword">if</span>(node.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    queue.offer(node.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(node.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    queue.offer(node.right);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(node.left == <span class="keyword">null</span> &amp;&amp; node.right == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> depth;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            depth++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>时间复杂度和空间复杂度：O(N)。</p>
<p>结合leetcode 752转盘锁，可以总结BFS算法的核心代码及应用场景。</p>
<p>对于知道起点、终点，求解问题含最短、最小、最少等字眼，可以考虑使用BFS。如本题起点是树根节点，终点是叶子节点，求最小深度；转盘锁问题，起点是0000，重点是target，求最少旋转次数。</p>
<p>BFS会一层一层的遍历问题树或者图，类似树的层次遍历，需要一个队列。在图中，为了防止重复遍历，往往需要一个visited数组，树一般不需要。</p>
<p>他的优点是时间复杂度较小，在找到最小后一定会停止，但相应的，需要队列，空间复杂度较大。</p>
<p>BFS核心代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">BFS</span><span class="params">(Node start, Node target)</span></span>&#123;</span><br><span class="line">    Deque&lt;Node&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    HashSet&lt;Node&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> step = <span class="number">0</span>;</span><br><span class="line">    queue.offer(start);</span><br><span class="line">    visited.add(start);</span><br><span class="line">    <span class="keyword">while</span>( !queue.isEmpty() )&#123;</span><br><span class="line">        <span class="keyword">int</span> size = queue.size();</span><br><span class="line">        <span class="comment">// 向四周扩散</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">            Node node = queue.poll();</span><br><span class="line">            <span class="comment">// 到达终点，直接返回</span></span><br><span class="line">            <span class="keyword">if</span>(node = target)&#123;</span><br><span class="line">                <span class="keyword">return</span> step;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 遍历过，跳过</span></span><br><span class="line">            <span class="keyword">if</span>(visited.contains(node))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将相邻节点加入队列，以便下次遍历</span></span><br><span class="line">            <span class="comment">// adj()表示node的所有相邻节点</span></span><br><span class="line">            <span class="keyword">for</span>(Node x : node.adj())&#123;</span><br><span class="line">                queue.offer(x);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 加入已遍历集合</span></span><br><span class="line">            visited.add(node);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 更新遍历步数</span></span><br><span class="line">        step++;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 找不到重点，返回默认值或者异常值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上便是BFS的核心代码，无非是确定终点，更新队列，更新次数。</p>
]]></content>
      <categories>
        <category>BFS</category>
      </categories>
      <tags>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-1524-和为奇数的子数组数目</title>
    <url>/leetcode-1524-%E5%92%8C%E4%B8%BA%E5%A5%87%E6%95%B0%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84%E6%95%B0%E7%9B%AE.html</url>
    <content><![CDATA[<p>给你一个整数数组 <code>arr</code> 。请你返回和为 <strong>奇数</strong> 的子数组数目。</p>
<p>由于答案可能会很大，请你将结果对 <code>10^9 + 7</code> 取余后返回。</p>
<p>示例1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：arr = [1,3,5]</span><br><span class="line">输出：4</span><br><span class="line">解释：所有的子数组为 [[1],[1,3],[1,3,5],[3],[3,5],[5]] 。</span><br><span class="line">所有子数组的和为 [1,4,9,3,8,5].</span><br><span class="line">奇数和包括 [1,9,3,5] ，所以答案为 4 。</span><br></pre></td></tr></table></figure>
<h3 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h3><p>要求和为奇数的子数组的个数，很容易想到前缀和的方法。</p>
<p>前缀和数组：<code>preSum[i]</code> 表示当前下标<code>i</code> 之前的（包含<code>i</code>）所有元素的和，显然：<code>preSum[i+1] = preSum[i] + arr[i]</code> ，并且，任意起始位置<code>（i，j）</code> 的子数组元素和为<code>preSum[j] - preSum[i-1]</code></p>
<h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>了解了上面的知识点，这个题目的解题思路就很明显了，首先，我们可以先求出前缀和数组，然后两层循环遍历前缀和数组，找到位置 <code>i</code> 和 <code>j</code> ，其中<code>i &lt; j &amp;&amp; preSum[i] 和 preSum[j] 奇偶性不同</code> ，那么，子数组<code>(i+1, j)</code> 的和为奇数。</p>
<p>这样做结果是对的，但是在leetcode上面会超时，代码就不写了。</p>
<h3 id="优化1："><a href="#优化1：" class="headerlink" title="优化1："></a>优化1：</h3><p>让我们想一想哪里还可以优化以下。首先肯定想到的是循环，两层循环<code>O(n*(n+1)/2)</code> 太大，那么怎么优化呢？循环的思想是对于每个<code>j</code> ，我们对于每一个<code>i 其中 i&lt;j &amp;&amp; preSum[i],preSum[j]奇偶性不同</code> ，都更新res++；核心思想就是找到<code>j</code> 之前的奇偶数字个数啊，这个在一次遍历到<code>j</code>之前不久能够实现嘛。因此，优化后的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numOfSubarrays</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = arr.length;</span><br><span class="line">        <span class="keyword">int</span>[] preSum = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">        <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">        preSum[<span class="number">0</span>] = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// 前缀和数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i)&#123;</span><br><span class="line">            preSum[i] = preSum[i-<span class="number">1</span>] + arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 0个元素时和为偶数，因此even初始化为1</span></span><br><span class="line">        <span class="comment">// 也可以preSum[0] = 0，然后从1 开始为preSum赋值。那么odd，even都是0</span></span><br><span class="line">        <span class="keyword">int</span> odd = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> even = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)&#123;</span><br><span class="line">            <span class="comment">// 如果是奇数，前面有多少个偶数，就有多少个和为奇的子数组</span></span><br><span class="line">            <span class="keyword">if</span>((preSum[i] &amp; <span class="number">1</span>) == <span class="number">1</span>)&#123;</span><br><span class="line">                ++odd;</span><br><span class="line">                res += even;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123; <span class="comment">// 同理</span></span><br><span class="line">                ++even;</span><br><span class="line">                res += odd;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 原方法</span></span><br><span class="line">        <span class="comment">// for(int i = 1; i &lt; len; ++i)&#123;</span></span><br><span class="line">        <span class="comment">//     if((preSum[i] &amp; 1) == 1)&#123;</span></span><br><span class="line">        <span class="comment">//         ++res;</span></span><br><span class="line">        <span class="comment">//         for(int j = 0; j &lt; i; ++j)&#123;</span></span><br><span class="line">        <span class="comment">//             if((preSum[j] &amp; 1) == 0)&#123;</span></span><br><span class="line">        <span class="comment">//                 ++res;</span></span><br><span class="line">        <span class="comment">//             &#125;</span></span><br><span class="line">        <span class="comment">//         &#125;</span></span><br><span class="line">        <span class="comment">//     &#125;else&#123;</span></span><br><span class="line">        <span class="comment">//         for(int j = 0; j &lt; i; ++j)&#123;</span></span><br><span class="line">        <span class="comment">//             if((preSum[j] &amp; 1) == 1)&#123;</span></span><br><span class="line">        <span class="comment">//                 ++res;</span></span><br><span class="line">        <span class="comment">//             &#125;</span></span><br><span class="line">        <span class="comment">//         &#125;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        res = (<span class="keyword">long</span>)(res % (<span class="number">1e9</span>+<span class="number">7</span>));</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个时间复杂度<code>O(n)</code> ，在leetcode上面能够通过。</p>
<h3 id="优化2："><a href="#优化2：" class="headerlink" title="优化2："></a>优化2：</h3><p>观察上面的代码你会发现，我们求了前缀和<code>preSum</code> 的具体值，但是后面并没有使用，而是仅仅使用了前缀和的奇偶性，因此，前缀和可以不具体计算他的值，而是用奇偶性代替，于是有了下面的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numOfSubarrays</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> odd = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> even = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">long</span> r = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, sum = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">            sum ^= (arr[i] &amp; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(sum &amp; <span class="number">1</span> == <span class="number">1</span>)&#123;</span><br><span class="line">                odd++;</span><br><span class="line">                r += even;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                even++;</span><br><span class="line">                r += odd;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)(r % (<span class="number">1e9</span>+<span class="number">7</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numOfSubarrays</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// s[0] 表示偶数  s[1]是奇数</span></span><br><span class="line">        <span class="keyword">int</span>[] s = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">long</span> r = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, sum = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            ++s[sum ^= arr[i] &amp; <span class="number">1</span>];</span><br><span class="line">            r += s[sum ^ <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span> )(r % <span class="number">1000000007</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>前缀和</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-1637-两点之间不包含任何点的最宽垂直面积</title>
    <url>/leetcode-1637-%E4%B8%A4%E7%82%B9%E4%B9%8B%E9%97%B4%E4%B8%8D%E5%8C%85%E5%90%AB%E4%BB%BB%E4%BD%95%E7%82%B9%E7%9A%84%E6%9C%80%E5%AE%BD%E5%9E%82%E7%9B%B4%E9%9D%A2%E7%A7%AF.html</url>
    <content><![CDATA[<p>给你 n 个二维平面上的点 points ，其中 points[i] = [xi, yi] ，请你返回两点之间内部不包含任何点的 最宽垂直面积 的宽度。</p>
<p>垂直面积 的定义是固定宽度，而 y 轴上无限延伸的一块区域（也就是高度为无穷大）。 最宽垂直面积 为宽度最大的一个垂直面积。</p>
<p>请注意，垂直区域 边上 的点 不在 区域内。</p>
<p><img src="leetcode-1637-%E4%B8%A4%E7%82%B9%E4%B9%8B%E9%97%B4%E4%B8%8D%E5%8C%85%E5%90%AB%E4%BB%BB%E4%BD%95%E7%82%B9%E7%9A%84%E6%9C%80%E5%AE%BD%E5%9E%82%E7%9B%B4%E9%9D%A2%E7%A7%AF/image-20220324223601717.png" alt="image-20220324223601717"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxWidthOfVerticalArea</span><span class="params">(<span class="keyword">int</span>[][] points)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = points[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> min = points[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>[] p : points)&#123;</span><br><span class="line">            max = Math.max(p[<span class="number">0</span>], max);</span><br><span class="line">            min = Math.min(p[<span class="number">0</span>], min);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(max == min)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[][] c = <span class="keyword">new</span> <span class="keyword">int</span>[points.length + <span class="number">1</span>][];</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> d = max - min;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>[] p : points)&#123;</span><br><span class="line">            <span class="keyword">int</span> idx = (<span class="keyword">int</span>)((p[<span class="number">0</span>] - min) * (<span class="keyword">long</span>)(points.length) / d);</span><br><span class="line">            <span class="keyword">if</span>(c[idx] == <span class="keyword">null</span>)&#123;</span><br><span class="line">                c[idx] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;p[<span class="number">0</span>],p[<span class="number">0</span>]&#125;;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                c[idx][<span class="number">0</span>] = Math.min(p[<span class="number">0</span>],c[idx][<span class="number">0</span>]);</span><br><span class="line">				c[idx][<span class="number">1</span>] = Math.min(p[<span class="number">0</span>],c[idx][<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> last = c[<span class="number">0</span>][<span class="number">1</span>], <span class="keyword">int</span> i = <span class="number">1</span>; i &lt; points.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c[i] != <span class="keyword">null</span>)&#123;</span><br><span class="line">                res = Math.max(res, c[i][<span class="number">0</span>] - last);</span><br><span class="line">                last = c[i][<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 162.寻找峰值</title>
    <url>/leetcode-162-%E5%AF%BB%E6%89%BE%E5%B3%B0%E5%80%BC.html</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exist</span><span class="params">(<span class="keyword">char</span>[][] board, String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h = board.length, w = board[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">boolean</span>[][] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[h][w];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; h; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; w; j++) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> flag = check(board, visited, i, j, word, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">boolean</span>[][] visited, <span class="keyword">int</span> i, <span class="keyword">int</span> j, String s, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (board[i][j] != s.charAt(k)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (k == s.length() - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        visited[i][j] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span>[][] directions = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] dir : directions) &#123;</span><br><span class="line">            <span class="keyword">int</span> newi = i + dir[<span class="number">0</span>], newj = j + dir[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (newi &gt;= <span class="number">0</span> &amp;&amp; newi &lt; board.length &amp;&amp; newj &gt;= <span class="number">0</span> &amp;&amp; newj &lt; board[<span class="number">0</span>].length) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!visited[newi][newj]) &#123;</span><br><span class="line">                    <span class="keyword">boolean</span> flag = check(board, visited, newi, newj, s, k + <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                        result = <span class="keyword">true</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        visited[i][j] = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>79</p>
]]></content>
  </entry>
  <entry>
    <title>leetcode 220.存在重复元素</title>
    <url>/leetcode-220-%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0.html</url>
    <content><![CDATA[<h2 id="220-存在重复元素"><a href="#220-存在重复元素" class="headerlink" title="220.存在重复元素"></a>220.存在重复元素</h2><p>给你一个整数数组 nums 和两个整数 k 和 t 。请你判断是否存在 两个不同下标 i 和 j，使得 abs(nums[i] - nums[j]) &lt;= t ，同时又满足 abs(i - j) &lt;= k 。</p>
<p>如果存在则返回 true，不存在返回 false。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 滑动窗口+有序集合</span></span><br><span class="line"><span class="comment">// 空间复杂度O(min(n,k))，需要维护一颗min(n,k)个节点的查找树，空间复杂度为O(min(n,k))</span></span><br><span class="line"><span class="comment">// 时间复杂度O(nlog(min(n,k))),对于一个有min(n,k)个节点的二叉查找树，每次插入删除的时间复杂度为O(log(min(n,k)))，n个元素每个元素至多被插入和删除一次。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsNearbyAlmostDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">        TreeSet&lt;Long&gt; set = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; nums.length;i++)&#123;</span><br><span class="line">            <span class="comment">// ceiling函数，返回一个大于等于给定参数的最小元素。</span></span><br><span class="line">            <span class="comment">// long强制转换防止整型溢出</span></span><br><span class="line">            Long n = set.ceiling((<span class="keyword">long</span>)nums[i] - (<span class="keyword">long</span>)t);</span><br><span class="line">            <span class="keyword">if</span>( n != <span class="keyword">null</span> &amp;&amp; n &lt;= (<span class="keyword">long</span>)nums[i] + (<span class="keyword">long</span>)t)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; </span><br><span class="line">            set.add((<span class="keyword">long</span>)nums[i]);</span><br><span class="line">            <span class="keyword">if</span>(set.size() &gt; k)&#123;</span><br><span class="line">                set.remove((<span class="keyword">long</span>)nums[i-k]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 法二，桶排序：设置桶大小为t+1，若在滑动窗口内的两元素出现在同一个桶中，则两元素符合条件，否则，若存在相邻桶中，需要继续验证其差的绝对值是否小于t，若成立，则两元素也符合条件。</span></span><br><span class="line"><span class="comment">// 通过将int范围内的整数x通过x = (t+1)*a+b (0&lt;=b&lt;=t)来映射到桶a中</span></span><br><span class="line"><span class="comment">// 时间复杂度O(n),n个元素最多需要插入、删除一次，哈希表插入、删除的时间复杂度是O(1)</span></span><br><span class="line"><span class="comment">// 空间复杂度O(min(n,k))，哈希表最多存储min(n,k)个元素</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsNearbyAlmostDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="comment">// 因为相邻桶需要再次验证其值是否符合条件，因此需要使用map存放桶以及具体值</span></span><br><span class="line">        Map&lt;Long, Long&gt; map = <span class="keyword">new</span> HashMap&lt;Long, Long&gt;();</span><br><span class="line">        <span class="keyword">long</span> w = (<span class="keyword">long</span>) t + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">long</span> id = getID(nums[i], w);</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(id)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(id - <span class="number">1</span>) &amp;&amp; Math.abs(nums[i] - map.get(id - <span class="number">1</span>)) &lt; w) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(id + <span class="number">1</span>) &amp;&amp; Math.abs(nums[i] - map.get(id + <span class="number">1</span>)) &lt; w) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(id, (<span class="keyword">long</span>) nums[i]);</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= k) &#123;</span><br><span class="line">                map.remove(getID(nums[i - k], w));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 求x对应的桶</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getID</span><span class="params">(<span class="keyword">long</span> x, <span class="keyword">long</span> w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> x / w;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (x + <span class="number">1</span>) / w - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 221.最大正方形</title>
    <url>/leetcode-221-%E6%9C%80%E5%A4%A7%E6%AD%A3%E6%96%B9%E5%BD%A2.html</url>
    <content><![CDATA[<p>q 求最大面积，也就是求最大的边长，首先肯定可以通过暴力求解，遍历数组中的每一个元素，遇到’1’就以当前位置为正方形的右下角，向左上角遍历得到最大的正方形。二维数组遍历完成后就得到了整体最大正放心，然后求边长即可。</p>
<p>暴力法的时间复杂度是$O(mn*min(m,n)^2)$ ，遍历matrix需要O(mn)，对于每一个元素，需要求当前最大正方形，其边长小于等于min（m,n），遍历这样一个正方形需要$O(min(m,n)^2)$ </p>
<p>空间复杂度O(1)</p>
<p>仔细想暴力方法，其实前面已知的最大正方形是有助于我们得出当前最大正方形的，即当前（i，j）位置左上角（i-1，j-1）处最大正方形边长为k，则（i，j）位置最大为k+1，这取决于上面和左面是不是全是0，同样地，上面（i-1，j）位置最大正方形的边长就可以表示当前位置上面最多有几个0，左面（i，j-1）同样，因此，递归公式为：</p>
<script type="math/tex; mode=display">
dp=\begin{cases}
    dp[i][j] = 0 &  matrix[i][j] = 0 \\
    dp[i][j] = min(dp[i-1][j],dp[i][j-1],dp[i-1][j-1])+1 & matrix[i][j] = 1
\end{cases}</script><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximalSquare</span><span class="params">(<span class="keyword">char</span>[][] matrix)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> rowLen = matrix.length;</span><br><span class="line">        <span class="keyword">int</span> columnLen = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">if</span>(rowLen == <span class="number">0</span> || columnLen == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[rowLen][columnLen];</span><br><span class="line">        <span class="comment">// 以当前位置为右下角的最大正方形边长</span></span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rowLen; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; columnLen; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(matrix[i][j] == <span class="string">'0'</span>)&#123;</span><br><span class="line">                    dp[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 边缘位置</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">0</span> || j == <span class="number">0</span>)&#123;</span><br><span class="line">                    dp[i][j] = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span>(max &lt; <span class="number">1</span>)&#123;</span><br><span class="line">                        max = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j] = Math.min(Math.min(dp[i-<span class="number">1</span>][j],dp[i][j-<span class="number">1</span>]),dp[i-<span class="number">1</span>][j-<span class="number">1</span>])+<span class="number">1</span>;</span><br><span class="line">                    <span class="comment">// 更新最大值</span></span><br><span class="line">                    <span class="keyword">if</span>(dp[i][j] &gt; max)&#123;</span><br><span class="line">                        max = dp[i][j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max*max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>时间复杂度：O(mn)，需要遍历一遍matrix。</p>
<p>空间复杂度：O(mn)，dp数组大小。</p>
<p>代码优化，for循环里面的代码有数组值赋0的操作，而实际上数组初始化各个位置上的值都是0，因此这个操作是多余的。另外，i=0和j=0的判断实际上是避免i-1和j-1数组越界，可以通过设置一个大一圈的数组来减少这个判断。优化后代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximalSquare</span><span class="params">(<span class="keyword">char</span>[][] matrix)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> rowLen = matrix.length;</span><br><span class="line">        <span class="keyword">int</span> columnLen = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">if</span>(rowLen == <span class="number">0</span> || columnLen == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[rowLen+<span class="number">1</span>][columnLen+<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 以当前位置为右下角的最大正方形边长</span></span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= rowLen; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= columnLen; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(matrix[i-<span class="number">1</span>][j-<span class="number">1</span>] == <span class="string">'1'</span>)&#123;</span><br><span class="line">                    dp[i][j] = Math.min(Math.min(dp[i-<span class="number">1</span>][j],dp[i][j-<span class="number">1</span>]),dp[i-<span class="number">1</span>][j-<span class="number">1</span>])+<span class="number">1</span>;</span><br><span class="line">                    <span class="comment">// 更新最大值</span></span><br><span class="line">                    <span class="keyword">if</span>(dp[i][j] &gt; max)&#123;</span><br><span class="line">                        max = dp[i][j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max*max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上代码均通过leetcode测试。</p>
<p>参考</p>
<blockquote>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzU0ODMyNDk0Mw==&amp;mid=2247490443&amp;idx=1&amp;sn=fc1b5e2f52083366fa73c0b9b47c6d31&amp;chksm=fb4188abcc3601bda60a042d2908d50f00b362cd14631b30bf4bff0e277e3187134a666ddd2c&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">530，动态规划解最大正方形 (qq.com)</a></p>
</blockquote>
]]></content>
      <categories>
        <category>leetcode</category>
        <category>算法</category>
        <category>动态规划</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 416.分割等和子集</title>
    <url>/leetcode-416-%E5%88%86%E5%89%B2%E7%AD%89%E5%92%8C%E5%AD%90%E9%9B%86.html</url>
    <content><![CDATA[<p>LeetCode第416题</p>
<p>难度：中等</p>
<p>给你一个<strong>只包含正整数的非空数组nums</strong> 。请你判断是否可以将这个数组分割成两个子集， 使得两个子集的元素<strong>和相等</strong>。</p>
<p>背包问题</p>
<p>基本想法是：遍历数组，求出所有元素的和，然后判断是否能构成一个一半的背包。</p>
<p>法一：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canPartition</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 奇数，因为数组只有正整数，不可能等分</span></span><br><span class="line">        <span class="keyword">if</span>((sum &amp; <span class="number">1</span>) == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 只需要找一个子集，他的和是原数组和的一半</span></span><br><span class="line">        <span class="keyword">int</span> target = sum &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// dp数组表示：考虑到nums中前i+1个数字时，dp[i][j]表示能否找到一个子集和为j</span></span><br><span class="line">        <span class="comment">// 和最大需要target，因此开辟target-1个空间</span></span><br><span class="line">        <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[len][target+<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 第一行单独处理，nums[0]可以填充，因此对应为true</span></span><br><span class="line">        <span class="keyword">if</span>(nums[<span class="number">0</span>] &lt;= target)&#123;</span><br><span class="line">	        dp[<span class="number">0</span>][nums[<span class="number">0</span>]] = <span class="keyword">true</span>;        </span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// 后面每行根据上一行填充</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;= target; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j &lt; nums[i])&#123;</span><br><span class="line">                    dp[i][j] = dp[i-<span class="number">1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j] = dp[i-<span class="number">1</span>][j] || dp[i-<span class="number">1</span>][j-nums[i]];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(dp[i][target])&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[len-<span class="number">1</span>][target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>法二：</p>
<p>因为dp数组只用到了当前行和上一行，因此dp数组可以简化为只有两行的二维数组甚至简化为一维数组，下面是简化成一维数组的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canPartition</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((sum &amp; <span class="number">1</span>) == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> target = sum &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">boolean</span>[] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[target+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[<span class="number">0</span>] &lt;= target)&#123;</span><br><span class="line">            dp[nums[<span class="number">0</span>]] = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="comment">// 必须从后往前更新，因为后面的需要依赖前面的，先把前面的改了，后面的就错了</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = target; j&gt;=<span class="number">0</span> &amp;&amp; j&gt;=nums[i]; j--)&#123;</span><br><span class="line">                <span class="comment">// dp[j]表示背包不考虑当前值，因此不变</span></span><br><span class="line">                <span class="comment">// dp[j-nums[i]]表示考虑nums[i]，因此要更新</span></span><br><span class="line">                dp[j] = dp[j] || dp[j-nums[i]];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(dp[target])&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>法三：还有更巧妙的方法，通过前面两种方法可以看的出来，更新dp的过程实际上是将当前位置的值向后移动nums[i]个位置的过程，移动完成后，最后目标值的结果为true，则可以分割。</p>
<p>同样的思想，其实可以通过位运算解决，开辟一个有target+1个长度的byte数组bit，bit[0]置1，当前数组为1的位置表示在这个时刻，数组可以组成的值，我们只需要遍历nums数组，每次向左移动nums[i]个位置，并与上一数组做与运算，留下所有为1的位置，最后target的值是否为1就表示是否可以分割。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canPartition</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((sum &amp; <span class="number">1</span>) == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> target = sum &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] bits = <span class="keyword">new</span> <span class="keyword">byte</span>[target+<span class="number">1</span>];</span><br><span class="line">        bits[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">            <span class="keyword">int</span> pos = target - num;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = pos; i &gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">                <span class="comment">// 这里不能写成 bits[i+num] = bits[i+num] | bits[i]</span></span><br><span class="line">                <span class="comment">// 因为两个byte运算的结果是int，需要强制转换</span></span><br><span class="line">                bits[i+num] |= bits[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(bits[target] == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上所有代码都可以通过leetcode测试。</p>
]]></content>
      <categories>
        <category>leetcode</category>
        <category>算法</category>
        <category>动态规划</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 24.两两交换链表种的节点</title>
    <url>/leetcode-24-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9.html</url>
    <content><![CDATA[<h2 id="24-两两交换链表中的节点"><a href="#24-两两交换链表中的节点" class="headerlink" title="24.两两交换链表中的节点"></a>24.两两交换链表中的节点</h2><p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</p>
<p><strong>你不能只是单纯的改变节点内部的值</strong>，而是需要实际的进行节点交换。</p>
<p><img src="20210816/image-20210816162010101.png" alt="image-20210816162010101"></p>
<ol>
<li>递归</li>
</ol>
<p>每次递归将第二个节点指向第一个节点，第一个节点指向下一次递归返回的头节点，直到链表中长度为0或者1结束，返回头节点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 递归</span></span><br><span class="line">    <span class="comment">// 时间复杂度O(n)，需要完整遍历一遍链表</span></span><br><span class="line">    <span class="comment">// 空间复杂度O(n)，n次递归调用的栈空间</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">swapPairs</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 长度为0或1，不需要交换直接返回</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// p指向下一次递归的链表头节点</span></span><br><span class="line">        ListNode p = head.next.next;</span><br><span class="line">        <span class="comment">// newHead指向第二个节点，也就是交换后的头节点</span></span><br><span class="line">        ListNode newHead = head.next;</span><br><span class="line">        newHead.next = head;</span><br><span class="line">        head.next = swapPairs(p);</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>迭代，循环遍历链表，每次两两交换位置，直到最后剩一个节点或者不剩节点。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">solution</span></span>&#123;</span><br><span class="line">    <span class="comment">// 迭代</span></span><br><span class="line">    <span class="comment">// 时间复杂度O(n),遍历一遍链表</span></span><br><span class="line">    <span class="comment">// 空间复杂度O(1)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">swapPairs</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode dummyNode = <span class="keyword">new</span> ListNode(-<span class="number">1</span>,head);</span><br><span class="line">        ListNode p = dummyNode;</span><br><span class="line">        ListNode q = head;</span><br><span class="line">        ListNode r = head.next;</span><br><span class="line">        <span class="keyword">while</span>(q != <span class="keyword">null</span> &amp;&amp; r != <span class="keyword">null</span>)&#123;</span><br><span class="line">            q.next = r.next;</span><br><span class="line">            r.next = q;</span><br><span class="line">            p.next = r;</span><br><span class="line">            p = q;</span><br><span class="line">            q = q.next;</span><br><span class="line">            <span class="keyword">if</span>(q!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                r = q.next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummyNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="25-K个一组反转链表"><a href="#25-K个一组反转链表" class="headerlink" title="25.K个一组反转链表"></a>25.K个一组反转链表</h2><p>给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。</p>
<p>k 是一个正整数，它的值小于或等于链表的长度。</p>
<p>如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。</p>
<p><img src="20210816/image-20210816170352318.png" alt="image-20210816170352318"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 时间复杂度O(n)</span></span><br><span class="line">    <span class="comment">// 空间复杂度O(1)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseKGroup</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        ListNode dummyNode = <span class="keyword">new</span> ListNode(-<span class="number">1</span>,head);</span><br><span class="line">        ListNode end = dummyNode;</span><br><span class="line">        </span><br><span class="line">        ListNode start = end;</span><br><span class="line">        <span class="keyword">while</span>(start.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(end == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> dummyNode.next;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    end = end.next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(end != <span class="keyword">null</span>)&#123; </span><br><span class="line">                ListNode next = end.next;</span><br><span class="line">                ListNode p = start.next;</span><br><span class="line">                ListNode q = p.next;</span><br><span class="line">                <span class="comment">// 使用头插法反转链表</span></span><br><span class="line">                <span class="comment">// 同样可以每次将第一个插入到最后来实现</span></span><br><span class="line">                <span class="keyword">while</span>(q != next)&#123;</span><br><span class="line">                    p.next = q.next;</span><br><span class="line">                    q.next = start.next;</span><br><span class="line">                    start.next = q;</span><br><span class="line">                    q = p.next;</span><br><span class="line">                &#125;           </span><br><span class="line">                start = p;</span><br><span class="line">                end = start;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummyNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="147-对链表进行插入排序"><a href="#147-对链表进行插入排序" class="headerlink" title="147.对链表进行插入排序"></a>147.对链表进行插入排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">insertionSortList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode dummyNode = <span class="keyword">new</span> ListNode(-<span class="number">65536</span>,head);</span><br><span class="line">        ListNode p = head;</span><br><span class="line">        ListNode q = dummyNode;</span><br><span class="line">        ListNode rear = q;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(rear.val &lt;= p.val)&#123;</span><br><span class="line">                rear = rear.next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ListNode next = p.next;</span><br><span class="line">                q = dummyNode;</span><br><span class="line">                <span class="keyword">while</span>(q.next.val &lt;= p.val)&#123;</span><br><span class="line">                    q = q.next;</span><br><span class="line">                &#125;</span><br><span class="line">                p.next = q.next;</span><br><span class="line">                q.next = p;</span><br><span class="line">                rear.next = next;</span><br><span class="line">            &#125;</span><br><span class="line">            p = rear.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummyNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="237-删除链表中的节点"><a href="#237-删除链表中的节点" class="headerlink" title="237.删除链表中的节点"></a>237.删除链表中的节点</h2><p>请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点。传入函数的唯一参数为 <strong>要被删除的节点</strong> 。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// public void deleteNode(ListNode node) &#123;</span></span><br><span class="line">    <span class="comment">//     ListNode p = node;</span></span><br><span class="line">    <span class="comment">//     while(p.next.next != null)&#123;</span></span><br><span class="line">    <span class="comment">//         p.val = p.next.val;</span></span><br><span class="line">    <span class="comment">//         p = p.next;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//     p.val = p.next.val;</span></span><br><span class="line">    <span class="comment">//     p.next = null;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 官方答案，牛</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(ListNode node)</span></span>&#123;</span><br><span class="line">        node.val = node.next.val;</span><br><span class="line">        node.next = node.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="19-删除链表的倒数第N个结点"><a href="#19-删除链表的倒数第N个结点" class="headerlink" title="19 删除链表的倒数第N个结点"></a>19 删除链表的倒数第N个结点</h2><p>给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。</p>
<p><strong>进阶：</strong>你能尝试使用一趟扫描实现吗？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 双指针，一趟扫描实现。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode temp = <span class="keyword">new</span> ListNode(<span class="number">0</span>,head);</span><br><span class="line">        ListNode p = temp,q = temp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;n+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            q = q.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(q != <span class="keyword">null</span>)&#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">            q = q.next;</span><br><span class="line">        &#125;</span><br><span class="line">        p.next = p.next.next;</span><br><span class="line">        <span class="keyword">return</span> temp.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>61，143，234</p>
]]></content>
      <categories>
        <category>leetcode</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 447.回旋镖的数量</title>
    <url>/leetcode-447-%E5%9B%9E%E6%97%8B%E9%95%96%E7%9A%84%E6%95%B0%E9%87%8F.html</url>
    <content><![CDATA[<p>根据题目描述，可以每次确定一个顶点i，统计其他各点到i点距离及其对应数量。若有n个距离i相等的点，则对应的回旋镖数量为n*(n-1)</p>
<p>为什么是n*(n-1)？对于每一个顶点，要选择两个端点构成回旋镖，因为考虑元组的顺序，第一次有n个选择，第二次有n-1个选择，因此，总共是n*(n-1)个回旋镖。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numberOfBoomerangs</span><span class="params">(<span class="keyword">int</span>[][] points)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = points.length;</span><br><span class="line">        <span class="keyword">if</span>(n &lt; <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="comment">// 需要记录距离对应的数量，因此需要用map</span></span><br><span class="line">            HashMap&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(n);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i != j)&#123;</span><br><span class="line">                    <span class="keyword">int</span> d = dis(points[i],points[j]);</span><br><span class="line">                    map.put(d,map.getOrDefault(d,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">           	<span class="keyword">for</span>(Integer n : map.values())&#123;</span><br><span class="line">                res += n*(n-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算两点之间的距离。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">dis</span><span class="params">(<span class="keyword">int</span>[] pointi, <span class="keyword">int</span>[] pointj)</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> (pointi[<span class="number">0</span>]-pointj[<span class="number">0</span>])*(pointi[<span class="number">0</span>]-pointj[<span class="number">0</span>])+(pointi[<span class="number">1</span>]-pointj[<span class="number">1</span>])*(pointi[<span class="number">1</span>]-pointj[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>时间复杂度：O(n^2)，n是points的长度。</p>
<p>空间复杂度：O(n)，需要长度为n的map</p>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 51.N皇后</title>
    <url>/leetcode-51-N%E7%9A%87%E5%90%8E.html</url>
    <content><![CDATA[<p>回溯算法， backtrack中对选择列表中的每一项做选择，递归后撤销选择。</p>
<p>对每一行，选择一个符合条件的位置，继续向下选择，如果选择完成，则加入最终结果，然后回溯，改变上一次选择继续向下进行。</p>
<p>16-23行是算法精髓。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; solveNQueens(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">char</span>[][] board = <span class="keyword">new</span> <span class="keyword">char</span>[n][n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span>[] c : board)&#123;</span><br><span class="line">            Arrays.fill(c,<span class="string">'.'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        backtrack(res,board,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(List&lt;List&lt;String&gt;&gt; res,<span class="keyword">char</span>[][] board, <span class="keyword">int</span> row)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(row == board.length)&#123;</span><br><span class="line">            res.add(arrToList(board));</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> len = board[<span class="number">0</span>].length;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; len; col++)&#123;</span><br><span class="line">                <span class="keyword">if</span>( !isValid(board,row,col) )&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                board[row][col] = <span class="string">'Q'</span>;</span><br><span class="line">                backtrack(res,board,row+<span class="number">1</span>);</span><br><span class="line">                board[row][col] = <span class="string">'.'</span>; </span><br><span class="line">        	&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = board.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(board[i][col] == <span class="string">'Q'</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = row-<span class="number">1</span>, j = col+<span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; j &lt; n; i--,j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(board[i][j] == <span class="string">'Q'</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = row-<span class="number">1</span>, j = col - <span class="number">1</span>;  i &gt;= <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>; i--,j--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(board[i][j] == <span class="string">'Q'</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">arrToList</span><span class="params">(<span class="keyword">char</span>[][] board)</span></span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span>[] c : board)&#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> String(c));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>时间复杂度：O(N!)，所有选择都要遍历，第一次有n个，第二次n-1个······因此时间复杂度是O(N!)；</p>
<p>空间复杂度：O(N^2)，board数组。</p>
<p>优化：</p>
<ol>
<li>上面代码的isValid方法用于判断当前位置是否可以放置皇后，使用遍历的方法确定。实际上，通过观察规律，可以在单位时间复杂度内确定是否可以放置。</li>
<li>由于每一行只有一个皇后，因此可以通过一维数组表示皇后的位置。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; solveNQueens(<span class="keyword">int</span> n)&#123;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span>[] queens = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        Arrays.fill(queens,<span class="string">'.'</span>);</span><br><span class="line">        HashSet&lt;Integer&gt; column = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        HashSet&lt;Integer&gt; diagonals1 = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        HashSet&lt;Integer&gt; diagonals2 = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        backtrack(res,queens,<span class="number">0</span>,column,diagonals1,diagonals2);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(List&lt;List&lt;String&gt;&gt; res, <span class="keyword">int</span>[] queens, <span class="keyword">int</span> row, Set&lt;Integer&gt; columns, Set&lt;Integer&gt; diagonals1, Set&lt;Integer&gt; diagonals2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(row == queens.length)&#123;</span><br><span class="line">            res.add(generateBoard(queens));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; queens.length; i++)&#123;</span><br><span class="line">                <span class="comment">// O(1)时间复杂度排除位置</span></span><br><span class="line">                <span class="keyword">if</span>(columns.contains(i))&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> diagonal1 = row - i;</span><br><span class="line">                <span class="keyword">if</span>(diagonals1.contains(diagonal1))&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> diagonal2 = row + i;</span><br><span class="line">                <span class="keyword">if</span>(diagonals2.contains(diagonal2))&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                queens[row] = i;</span><br><span class="line">                columns.add(i);</span><br><span class="line">                diagonals1.add(diagonal1);</span><br><span class="line">                diagonals2.add(diagonal2);</span><br><span class="line">                backtrack(res, queens, row + <span class="number">1</span>, columns, diagonals1, diagonals2);</span><br><span class="line">                <span class="comment">// 回溯</span></span><br><span class="line">                queens[row] = -<span class="number">1</span>;</span><br><span class="line">                columns.remove(i);</span><br><span class="line">                diagonals1.remove(diagonal1);</span><br><span class="line">                diagonals2.remove(diagonal2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">generateBoard</span><span class="params">(<span class="keyword">int</span>[] queens)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; board = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; queens.length; i++) &#123;</span><br><span class="line">            <span class="keyword">char</span>[] row = <span class="keyword">new</span> <span class="keyword">char</span>[queens.length];</span><br><span class="line">            Arrays.fill(row, <span class="string">'.'</span>);</span><br><span class="line">            row[queens[i]] = <span class="string">'Q'</span>;</span><br><span class="line">            board.add(<span class="keyword">new</span> String(row));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> board;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>时间复杂度：O(N!)，因为不可避免遍历所有选择，因此时间复杂度不会变化，使用集合set一定程度加速程序，但总体上问题仍是N!规模。因为集合规模确定，因此可以使用数组代替set。</p>
<p>空间复杂度：O(N)，使用一维数组代替二维数组，同时递归调用的时间复杂度是O(N)</p>
<ul>
<li>[ ] 使用位运算记录皇后信息，将空间复杂度将为O(1)</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
        <category>回溯</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>回溯</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 695.岛屿的最大面积</title>
    <url>/leetcode-695-%E5%B2%9B%E5%B1%BF%E7%9A%84%E6%9C%80%E5%A4%A7%E9%9D%A2%E7%A7%AF.html</url>
    <content><![CDATA[<p>给你一个大小为 m x n 的二进制矩阵 grid 。</p>
<p>岛屿 是由一些相邻的 1 (代表土地) 构成的组合，这里的「相邻」要求两个 1 必须在 水平或者竖直的四个方向上 相邻。你可以假设 grid 的四个边缘都被 0（代表水）包围着。</p>
<p>岛屿的面积是岛上值为 1 的单元格的数目。</p>
<p>计算并返回 grid 中最大的岛屿面积。如果没有岛屿，则返回面积为 0 。</p>
<blockquote>
<p>输入：grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]<br>输出：6<br>解释：答案不应该是 11 ，因为岛屿只能包含水平或垂直这四个方向上的 1 .</p>
</blockquote>
<p>深度优先搜索</p>
<p>遍历数组，对于每一个1，向上下左右四个方向递归遍历，直到到达边界结束，在遍历的过程中，将遍历过的位置置为0，防止重复遍历。这样求出当前岛屿的面积，与最大面积求最大值即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxAreaOfIsland</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                    ans = Math.max(ans,area(grid,i,j));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">area</span><span class="params">(<span class="keyword">int</span>[][] grid, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || j &lt; <span class="number">0</span> || i == grid.length || j == grid[<span class="number">0</span>].length || grid[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        grid[i][j] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> area(grid,i-<span class="number">1</span>,j)+area(grid,i,j-<span class="number">1</span>)+area(grid,i+<span class="number">1</span>,j)+area(gi,j+<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-474.一和零</title>
    <url>/leetcode-474-%E4%B8%80%E5%92%8C%E9%9B%B6.html</url>
    <content><![CDATA[<p>给你一个二进制字符串数组 strs 和两个整数 m 和 n 。</p>
<p>请你找出并返回 strs 的最大子集的长度，该子集中 最多 有 m 个 0 和 n 个 1 。</p>
<p>如果 x 的所有元素也是 y 的元素，集合 x 是集合 y 的 子集 。</p>
<blockquote>
<p>输入：strs = [“10”, “0001”, “111001”, “1”, “0”], m = 5, n = 3<br>输出：4<br>解释：最多有 5 个 0 和 3 个 1 的最大子集是 {“10”,”0001”,”1”,”0”} ，因此答案是 4 。<br>其他满足题意但较小的子集包括 {“0001”,”1”} 和 {“10”,”1”,”0”} 。{“111001”} 不满足题意，因为它含 4 个 1 ，大于 n 的值 3 。</p>
</blockquote>
<p>注意是子集不是子串。</p>
<p>动态规划，和经典的背包问题很相似，但是经典的背包问题只有一种容量，但是在本题中，有0和1两种容量，因此可以使用三维的动态规划。</p>
<p>定义三维数组dp，dp[k][i][j]表示在前k个字符串中，使用i个0和j个1能包含的最大子集数。因此dp转移函数如下：</p>
<script type="math/tex; mode=display">
dp\left[ k \right] \left[ i \right] \left[ j \right] \left\{ \begin{array}{l}
    dp\left[ k-1 \right] \left[ i \right] \left[ j \right] ,\ i\ <\ zero\ ||\ j\ <\ one\\
    \max \left( dp\left[ k-1 \right] \left[ i \right] \left[ j \right] ,\ 1+dp\left[ k-1 \right] \left[ i-zero \right] \left[ j-one \right] \right) ,\ i\ >\ zero\ \&\&\ m\ >\ one\\
\end{array} \right.</script><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMaxForm</span><span class="params">(String[] strs,<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length  = strs.length;</span><br><span class="line">        <span class="keyword">int</span>[][][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[length+<span class="number">1</span>][m+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span>[] zerosOnes = getZerosOnes(strs[i-<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">int</span> zeros = zerosOnes[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> ones = zerosOnes[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m; j++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= n; k++)&#123;</span><br><span class="line">                    dp[i][j][k] = dp[i-<span class="number">1</span>][j][k];</span><br><span class="line">                    <span class="keyword">if</span>(j &gt;= zeros &amp;&amp; k &gt;= ones)&#123;</span><br><span class="line">                        dp[i][j][k] = Math.max(dp[i][j][k],dp[i-<span class="number">1</span>][j-zeros][k-ones]+<span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[length][m][n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] getZerosOnes(String s)&#123;</span><br><span class="line">        <span class="keyword">int</span>[] num = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            num[s.charAt(i)-<span class="string">'0'</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，当前行的修改只与上一行有关，因此可以将三维数组改为二维数组，因为后面数据的修改需要用到前面的数据，因此每次从后往前修改数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMaxForm</span><span class="params">(String[] strs,<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">int</span> length = strs.length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span>[] zerosOnes = getZerosOnes(strs[i-<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">int</span> zero = zerosOnes[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> one = zerosOnes[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = m; j &gt;= zero; j--)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = n; k &gt;= one; k--)&#123;</span><br><span class="line">                    dp[j][k] = Math.max(<span class="number">1</span>+dp[j-zero][k-one],dp[j][k]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] getZerosOnes(String s)&#123;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            res[s.charAt(i)-<span class="string">'0'</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/leetcode-71-%E7%AE%80%E5%8C%96%E8%B7%AF%E5%BE%84.html</url>
    <content><![CDATA[<hr>
<p>title: leetcode 71.简化路径<br>date: 2021-09-03 20:20:23<br>tags:</p>
<ul>
<li>leetcode</li>
<li>算法<br>categories:</li>
<li>leetcode</li>
<li>算法<br>keywords:</li>
<li>leetcode</li>
<li>算法<br>description: 给你一个字符串 path ，表示指向某一文件或目录的 Unix 风格 绝对路径 （以 ‘/‘ 开头），请你将其转化为更加简洁的规范路径。在 Unix 风格的文件系统中，一个点（.）表示当前目录本身；此外，两个点 （..） 表示将目录切换到上一级（指向父目录）；两者都可以是复杂相对路径的组成部分。任意多个连续的斜杠（即，’//‘）都被视为单个斜杠 ‘/‘ 。 对于此问题，任何其他格式的点（例如，’…’）均被视为文件/目录名称。请注意，返回的 规范路径 必须遵循下述格式：始终以斜杠 ‘/‘ 开头。两个目录名之间必须只有一个斜杠 ‘/‘ 。最后一个目录名（如果存在）不能 以 ‘/‘ 结尾。此外，路径仅包含从根目录到目标文件或目录的路径上的目录（即，不含 ‘.’ 或 ‘..’）。返回简化后得到的 规范路径 。<h2 id="71-简化路径"><a href="#71-简化路径" class="headerlink" title="71.简化路径"></a>71.简化路径</h2></li>
</ul>
<blockquote>
<p>题目描述：</p>
<p>给你一个字符串 path ，表示指向某一文件或目录的 Unix 风格 绝对路径 （以 ‘/‘ 开头），请你将其转化为更加简洁的规范路径。</p>
<p>在 Unix 风格的文件系统中，一个点（.）表示当前目录本身；此外，两个点 （..） 表示将目录切换到上一级（指向父目录）；两者都可以是复杂相对路径的组成部分。任意多个连续的斜杠（即，’//‘）都被视为单个斜杠 ‘/‘ 。 对于此问题，任何其他格式的点（例如，’…’）均被视为文件/目录名称。</p>
<p>请注意，返回的 规范路径 必须遵循下述格式：</p>
<p>始终以斜杠 ‘/‘ 开头。<br>两个目录名之间必须只有一个斜杠 ‘/‘ 。<br>最后一个目录名（如果存在）不能 以 ‘/‘ 结尾。<br>此外，路径仅包含从根目录到目标文件或目录的路径上的目录（即，不含 ‘.’ 或 ‘..’）。<br>返回简化后得到的 规范路径 。</p>
</blockquote>
<p>给你一个字符串 path ，表示指向某一文件或目录的 Unix 风格 绝对路径 （以 ‘/‘ 开头），请你将其转化为更加简洁的规范路径。</p>
<p>在 Unix 风格的文件系统中，一个点（.）表示当前目录本身；此外，两个点 （..） 表示将目录切换到上一级（指向父目录）；两者都可以是复杂相对路径的组成部分。任意多个连续的斜杠（即，’//‘）都被视为单个斜杠 ‘/‘ 。 对于此问题，任何其他格式的点（例如，’…’）均被视为文件/目录名称。</p>
<p>请注意，返回的 规范路径 必须遵循下述格式：</p>
<p>始终以斜杠 ‘/‘ 开头。<br>两个目录名之间必须只有一个斜杠 ‘/‘ 。<br>最后一个目录名（如果存在）不能 以 ‘/‘ 结尾。<br>此外，路径仅包含从根目录到目标文件或目录的路径上的目录（即，不含 ‘.’ 或 ‘..’）。<br>返回简化后得到的 规范路径 。</p>
<p>144</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Deque&lt;TreeNode&gt; stack = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">        TreeNode node = root;</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty() || node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">                res.add(node.val);</span><br><span class="line">                stack.push(node);</span><br><span class="line">                node = node.left;</span><br><span class="line">            &#125;</span><br><span class="line">            node = stack.pop();</span><br><span class="line">            node = node.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>leetcode 752.打开转盘锁</title>
    <url>/leetcode-752-%E6%89%93%E5%BC%80%E8%BD%AC%E7%9B%98%E9%94%81.html</url>
    <content><![CDATA[<p>你有一个带有四个圆形拨轮的转盘锁。每个拨轮都有10个数字： ‘0’, ‘1’, ‘2’, ‘3’, ‘4’, ‘5’, ‘6’, ‘7’, ‘8’, ‘9’ 。每个拨轮可以自由旋转：例如把 ‘9’ 变为 ‘0’，’0’ 变为 ‘9’ 。每次旋转都只能旋转一个拨轮的一位数字。锁的初始数字为 ‘0000’ ，一个代表四个拨轮的数字的字符串。列表 deadends 包含了一组死亡数字，一旦拨轮的数字和列表里的任何一个元素相同，这个锁将会被永久锁定，无法再被旋转。字符串 target 代表可以解锁的数字，你需要给出解锁需要的最小旋转次数，如果无论如何不能解锁，返回 -1 。</p>
<p><img src="leetcode-752-%E6%89%93%E5%BC%80%E8%BD%AC%E7%9B%98%E9%94%81/image-20210915175912929.png" alt="image-20210915175912929"></p>
<p>使用广度优先搜索，从0000开始，每次改变一个数字加入队列，旋转次数加一，直到target出现在队列中，直接返回旋转次数，如果遇到deadends，则直接跳过旋转，不继续处理。<strong>同时，为了避免走回头路、重复搜索，也需要一个已遍历集合visited，对于集合中的组合，直接跳过</strong> 。考虑到deadends和visited集合中元素处理方法是相同的，因此可以放到一个集合中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">openLock</span><span class="params">(String[] deadends, String target)</span></span>&#123;</span><br><span class="line">        <span class="comment">// visited\deadends 集合</span></span><br><span class="line">        HashSet&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(String s : deadends)&#123;</span><br><span class="line">            set.add(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// BFS 队列</span></span><br><span class="line">        Deque&lt;String&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.offer(<span class="string">"0000"</span>);</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>( !queue.isEmpty() )&#123;</span><br><span class="line">            <span class="keyword">int</span> n = queue.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            	String s = queue.poll();</span><br><span class="line">                <span class="keyword">if</span>(target.equals(s))&#123;</span><br><span class="line">                    <span class="keyword">return</span> count;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(set.contains(s))&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)&#123;</span><br><span class="line">	                String up = turnUp(s,j);    </span><br><span class="line">    				String down = turnDown(s,j);</span><br><span class="line">                    queue.offer(up);</span><br><span class="line">                    queue.offer(down);</span><br><span class="line">                &#125;</span><br><span class="line">                set.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 时间复杂度O(d): new String(arr)，即锁长度</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">turnUp</span><span class="params">(String s, <span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">char</span>[] arr = s.toCharArray();</span><br><span class="line">        <span class="keyword">if</span>(arr[i] == <span class="string">'9'</span>)&#123;</span><br><span class="line">            arr[i] = <span class="string">'0'</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            arr[i] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(arr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">turnDown</span><span class="params">(String s, <span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">char</span>[] arr = s.toCharArray();</span><br><span class="line">        <span class="keyword">if</span>(arr[i] == <span class="string">'0'</span>)&#123;</span><br><span class="line">            arr[i] = <span class="string">'9'</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            arr[i] -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>时间复杂度：$O(b^d d^2+md)$，其中，b是进制，d是锁位数，m是deadend数组长度，对于长度为d，进制为b的锁，共有$b^d$ 个数字，最坏情况下，广度优先搜索需要遍历所有数字，对于每个数组，d个位置每个位置都需要旋转，旋转turnUp/turnDown的时间复杂度为O(d)，是new String(arr)所需。另外，set集合初始化需要对deadend数组m个数字计算hash，每次O(d)，O(md)，因此总的时间复杂度是$O(b^d d^2+md)$ 。</p>
<p>下面是hashCode函数：for循环对于长度为d的数组所需时间为O(d)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">(<span class="keyword">byte</span>[] value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> length = value.length &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        h = <span class="number">31</span> * h + getChar(value, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>空间复杂度：$O(b^d d+md)$ ，在最差情况下，队列最多存储$b^d$ 个长度为d的字符串，空间复杂度为$O(b^d d)$ 。哈希表需要O(md)的空间。</p>
]]></content>
      <categories>
        <category>BFS</category>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>BFS</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/leetcode.html</url>
    <content><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ol>
<li>荷兰国旗问题</li>
</ol>
<h3 id="寻找下标三元组"><a href="#寻找下标三元组" class="headerlink" title="寻找下标三元组"></a>寻找下标三元组</h3><p>给定数组arr，判断是否存在 <code>i , j ,k</code> ，使得 <code>arr[i] &lt; arr[j] &lt; arr[k]</code> </p>
<p>法一：暴力</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="keyword">null</span> || arr.length &lt; <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length &amp;&amp; arr[j] &gt; arr[i]; j++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt; arr.length &amp;&amp; arr[k] &gt; arr[j]; k++)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>法二：保证第二个数尽可能小，第二个数越小，找到的可能性越大。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr == <span class="keyword">null</span> || arr.length &lt; <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// m 指已经遍历的最小的数字， i 是遍历的下标， j 是已经找到的 arr[i] &lt; arr[j] 的尽量小的arr[j]的下标</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> m = arr[<span class="number">0</span>], <span class="keyword">int</span> i = <span class="number">1</span>, j = -<span class="number">1</span>; i &lt; arr.length; i++ )&#123;</span><br><span class="line">            <span class="comment">// j != -1 表示已经找到了一个 (i, j)&amp;(arr[i] &lt; arr[j]), 如果又找到了arr[k] &gt; arr[j]直接返回true </span></span><br><span class="line">            <span class="keyword">if</span>(j &gt; <span class="number">0</span> &amp;&amp; arr[i] &gt; arr[j])&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 更新 m 和 j</span></span><br><span class="line">            <span class="keyword">if</span>( m &lt; arr[i])&#123;</span><br><span class="line">                <span class="keyword">if</span>( j == -<span class="number">1</span> || arr[i] &lt; arr[j])&#123;</span><br><span class="line">                    j = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                m = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="数组作为特殊map"><a href="#数组作为特殊map" class="headerlink" title="数组作为特殊map"></a>数组作为特殊map</h3><h4 id="找到所有重复的数"><a href="#找到所有重复的数" class="headerlink" title="找到所有重复的数"></a>找到所有重复的数</h4><p>一个正整数数组nums（非空，非null）里面的数的范围在<code>[1, nums.length - 1]</code> 之间，这个数组里的所有数要么只出现一次，要么出现两次，返回所有出现两次的数。<strong>希望只遍历一次，且常数级额外空间。</strong></p>
<p>tips：计数的思想，但是不能有额外的存储空间，因此<strong>利用数组里面数的范围固定这一特点，遍历时对于当前<code>temp = nums[i]</code> ，对nums[temp-1]取反表示已经找到过一次，如果nums[temp-1]为负值，则加入结果中</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">func</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">            <span class="comment">// 可能num已经被取反了，因此需要取绝对值</span></span><br><span class="line">            <span class="keyword">int</span> idx = Math.abs(num) - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(num[idx] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                list.add(idx+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            nums[idx] = -<span class="number">1</span> * nums[idx];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>leetcode.287</p>
<p>leetcode.1637</p>
]]></content>
  </entry>
  <entry>
    <title>leetcode 881.救生艇</title>
    <url>/leetcode-881-%E6%95%91%E7%94%9F%E8%89%87.html</url>
    <content><![CDATA[<p>881.救生艇</p>
<p>第 i 个人的体重为 people[i]，每艘船可以承载的最大重量为 limit。</p>
<p>每艘船最多可同时载两人，但条件是这些人的重量之和最多为 limit。</p>
<p>返回载到每一个人所需的最小船数。(保证每个人都能被船载)。</p>
<p>思路很简单，要使需要的船最少，就要满足每艘船尽可能满，因此先满足最重的，如果最重的满足后还可以加人，那就再加一个。注意题目的条件，最多只能载两个人。</p>
<p>先放自己写的：(每次要找最重的，竟然没想到数组排序····而是首先想到要找能乘的下的最大的，因此想到了floor····)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// map初始化</span></span><br><span class="line">    TreeMap&lt;Integer,Integer&gt; map = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = people.length-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        map.put(people[i],map.getOrDefault(people[i],<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 一直循环到map为空，即所有人都上船</span></span><br><span class="line">    <span class="keyword">while</span>(map.size() &gt; <span class="number">0</span> )&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> left = limit;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 还能乘的下人</span></span><br><span class="line">        <span class="keyword">while</span>(flag &amp;&amp; count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">// 取出当前能乘的下的最大值</span></span><br><span class="line">            Integer n = map.floorKey(left);</span><br><span class="line">            <span class="comment">// 不存在说明没有符合条件的人了，下一条船</span></span><br><span class="line">            <span class="keyword">if</span>( n == <span class="keyword">null</span> )&#123;</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                left -= n;</span><br><span class="line">                <span class="keyword">int</span> num = map.getOrDefault(n,<span class="number">0</span>);</span><br><span class="line">                <span class="comment">// 上船</span></span><br><span class="line">                <span class="keyword">if</span>(num == <span class="number">1</span>)&#123;</span><br><span class="line">                    map.remove(n);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    map.put(n,num-<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再放官方版本：</p>
<p>贪心算法，排序+双指针</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numRescueBoats</span><span class="params">(<span class="keyword">int</span>[] people, <span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    Arrays.sort(people);</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = people.length-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">        <span class="comment">// 如果可以的话，最轻的和最重的同乘是最优方案。</span></span><br><span class="line">        <span class="keyword">if</span>(people[left] + people[right] &lt;= limit)&#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        right--;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>没学算法的菜鸡只能靠着强大的集合硬干:chicken:</p>
]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>linux命令</title>
    <url>/linux%E5%91%BD%E4%BB%A4.html</url>
    <content><![CDATA[<h1 id="ssh免密登陆"><a href="#ssh免密登陆" class="headerlink" title="ssh免密登陆"></a>ssh免密登陆</h1><h2 id="在本地生成密钥"><a href="#在本地生成密钥" class="headerlink" title="在本地生成密钥"></a>在本地生成密钥</h2><p><code>ssh-keygen</code>连续回车三次，会在c:/user/username/.ssh（username替换成你的用户名）文件夹下生成私钥id_rsa和公钥id_rsa.pub，通过<a href="#scp命令">scp</a>命令将公钥id_rsa.pub上传到服务器用户个人目录下的.ssh文件夹下。</p>
<p><strong>将公钥导入到authorized_keys中</strong> <strong><u><em>很重要</em></u></strong></p>
<p><code>cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</code></p>
<h2 id="修改服务器文件权限"><a href="#修改服务器文件权限" class="headerlink" title="修改服务器文件权限"></a>修改服务器文件权限</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~/.ssh权限设置为700 </span><br><span class="line">~/.ssh/authorized_keys的权限设置为600</span><br><span class="line"># 这是linux的安全要求，如果权限不对，自动登录将不会生效</span><br></pre></td></tr></table></figure>
<h2 id="修改ssh配置"><a href="#修改ssh配置" class="headerlink" title="修改ssh配置"></a>修改ssh配置</h2><p>修改服务器的ssh配置<code>vim /etc/ssh/sshd_config</code>，将<code>PubkeyAuthentication</code>改为yes即可。若root用户无法登陆则需修改<code>PermitRootLogin</code>为yes。</p>
<p>用户登陆时，会去登陆账户文件夹下的.ssh文件夹的<strong>authorized_keys</strong>中验证密钥是否正确，若正确，则可登陆。</p>
<h1 id="创建新用户"><a href="#创建新用户" class="headerlink" title="创建新用户"></a>创建新用户</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">useradd [-mMnr][-c &lt;备注&gt;][-d &lt;登入目录&gt;][-e &lt;有效期限&gt;][-f &lt;缓冲天数&gt;][-g &lt;群组&gt;][-G &lt;群组&gt;][-s &lt;shell&gt;][-u &lt;uid&gt;][用户帐号]</span><br></pre></td></tr></table></figure>
<h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><ul>
<li>-c&lt;备注&gt; 　加上备注文字。备注文字会保存在passwd的备注栏位中。</li>
<li>-d&lt;登入目录&gt; 　指定用户登入时的起始目录。</li>
<li>-g&lt;群组&gt; 　指定用户所属的群组。</li>
<li>-m 　自动建立用户的登入目录。</li>
<li>-r 　建立系统帐号。</li>
<li>-u<uid> 指定用户ID。</uid></li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>添加一般用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">useradd username</span><br></pre></td></tr></table></figure>
<p>为添加的用户指定相应的用户组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">useradd -g root username</span><br></pre></td></tr></table></figure>
<p>创建一个系统用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">useradd -r username</span><br></pre></td></tr></table></figure>
<p>为新添加的用户指定home目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">useradd -d /home/myd username</span><br></pre></td></tr></table></figure>
<p>建立用户且制定ID</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">useradd username -u 544</span><br></pre></td></tr></table></figure>
<h1 id="更改密码"><a href="#更改密码" class="headerlink" title="更改密码"></a>更改密码</h1><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">passwd [-k] [-l] [-u [-f]] [-d] [-S] [username]</span><br></pre></td></tr></table></figure>
<h2 id="常用参数："><a href="#常用参数：" class="headerlink" title="常用参数："></a>常用参数：</h2><ul>
<li>-d —delete删除密码</li>
<li>-f —force强迫用户下次登录时必须修改口令</li>
<li>-k —keep更新只能发送在过期之后</li>
<li>-l —lock停止账号使用</li>
<li>-S —status显示密码信息</li>
<li>-u —unlock启用已被停止的账户</li>
<li>-x —maximum指定口令最长存活期</li>
<li>-n —minimum指定口令最短存活期</li>
<li>-w —warning口令要到期提前警告的天数</li>
<li>-i —inactive口令过期后多少天停用账户</li>
</ul>
<h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><p>设置密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">passwd username</span><br></pre></td></tr></table></figure>
<p>删除用户密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">passwd -d username</span><br></pre></td></tr></table></figure>
<h1 id="scp命令"><a href="#scp命令" class="headerlink" title="scp命令"></a>scp命令</h1><p>Linux scp 命令用于 Linux 之间复制文件和目录。</p>
<p>scp 是 secure copy 的缩写, scp 是 linux 系统下基于 ssh 登陆进行安全的远程文件拷贝命令。</p>
<p>scp 是加密的，<a href="https://www.runoob.com/linux/linux-comm-rcp.html" target="_blank" rel="noopener">rcp</a> 是不加密的，scp 是 rcp 的加强版。</p>
<h2 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp [-1246BCpqrv] [-c cipher] [-F ssh_config] [-i identity_file]</span><br><span class="line">[-l limit] [-o ssh_option] [-P port] [-S program]</span><br><span class="line">[[user@]host1:]file1 [...] [[user@]host2:]file2</span><br></pre></td></tr></table></figure>
<h2 id="常用参数-1"><a href="#常用参数-1" class="headerlink" title="常用参数"></a>常用参数</h2><ul>
<li>-r： 递归复制整个目录。</li>
<li>-q： 不显示传输进度条。</li>
<li>-P port：注意是大写的P, port是指定数据传输用到的端口号</li>
<li>-i identity_file： 从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。适用于禁止ssh密码登陆的情况。</li>
<li>-p：保留原文件的修改时间，访问时间和访问权限。</li>
<li>-C： 允许压缩。（将-C标志传递给ssh，从而打开压缩功能）</li>
<li>-F ssh_config： 指定一个替代的ssh配置文件，此参数直接传递给ssh。</li>
</ul>
<h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2><p>目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp -r local_folder user@ip:path</span><br></pre></td></tr></table></figure>
<p>非目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp local_file user@ip:path</span><br></pre></td></tr></table></figure>
<p>更改最后一个参数的文件名可以实现传输的同时改名。</p>
<h2 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h2><p>将scp的最后两个参数位置调换即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp -r user@ip:path local_path</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/snarkjs%20&amp;%20circom.html</url>
    <content><![CDATA[<ol>
<li>编写电路</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pragma circom 2.0.0;</span><br><span class="line"></span><br><span class="line">template Multiplier2() &#123;</span><br><span class="line">    signal input a;</span><br><span class="line">    signal input b;</span><br><span class="line">    signal output c;</span><br><span class="line">    c &lt;== a*b;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> component main = Multiplier2();</span><br></pre></td></tr></table></figure>
<ol>
<li>编译上述电路</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">circom multiplier2.circom --r1cs --wasm --sym --c</span><br></pre></td></tr></table></figure>
<ul>
<li><code>--r1cs</code>: it generates the file <code>multiplier2.r1cs</code> that contains the <a href="https://docs.circom.io/background/background#rank-1-constraint-system" target="_blank" rel="noopener">R1CS constraint system</a> of the circuit in binary format.</li>
<li><code>--wasm</code>: it generates the directory <code>multiplier2_js</code> that contains the <code>Wasm</code> code (multiplier2.wasm) and other files needed to generate the <a href="https://docs.circom.io/background/background#witness" target="_blank" rel="noopener">witness</a>.</li>
<li><code>--sym</code> : it generates the file <code>multiplier2.sym</code> , a symbols file required for debugging or for printing the constraint system in an annotated mode.</li>
<li><p><code>--c</code> : it generates the directory <code>multiplier2_cpp</code> that contains several files (multiplier2.cpp, multiplier2.dat, and other common files for every compiled program like main.cpp, MakeFile, etc) needed to compile the C code to generate the witness.</p>
<p>The set of inputs, intermediate signals and output is called <a href="https://docs.circom.io/background/background#witness" target="_blank" rel="noopener">witness</a>.</p>
</li>
</ul>
<h2 id="Power-of-Tau"><a href="#Power-of-Tau" class="headerlink" title="Power of Tau"></a>Power of Tau</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">snarkjs powersoftau new bn128 12 pot12_0000.ptau -v</span><br><span class="line">snarkjs powersoftau contribute pot12_0000.ptau pot12_0001.ptau --name=<span class="string">"First contribution"</span> -v</span><br><span class="line"><span class="comment"># phase 2</span></span><br><span class="line">snarkjs powersoftau prepare phase2 pot12_0001.ptau pot12_final.ptau -v</span><br><span class="line">snarkjs groth16 setup multiplier2.r1cs pot12_final.ptau multiplier2_0000.zkey</span><br><span class="line">snarkjs zkey contribute multiplier2_0000.zkey multiplier2_0001.zkey --name=<span class="string">"1st Contributor Name"</span> -v</span><br><span class="line">snarkjs zkey <span class="built_in">export</span> verificationkey multiplier2_0001.zkey verification_key.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># generating a proof</span></span><br><span class="line">snarkjs groth16 prove multiplier2_0001.zkey witness.wtns proof.json public.json</span><br><span class="line">snarkjs groth16 verify verification_key.json public.json proof.json</span><br><span class="line"></span><br><span class="line">snarkjs zkey <span class="built_in">export</span> solidityverifier multiplier2_0001.zkey verifier.sol</span><br><span class="line"></span><br><span class="line">snarkjs generatecall</span><br></pre></td></tr></table></figure>
<h2 id="remix"><a href="#remix" class="headerlink" title="remix"></a>remix</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">remixd -s E:\project\remix\contract --remix-ide https://remix.ethereum.org</span><br></pre></td></tr></table></figure>
<h2 id="ethereum"><a href="#ethereum" class="headerlink" title="ethereum"></a>ethereum</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">geth --datadir . --networkid 1881005 --http --http.corsdomain=<span class="string">"*"</span> --http.port 8545 --http.addr <span class="string">"0.0.0.0"</span> --http.api <span class="string">"db,web3,eth,debug,personal,net,miner,admin"</span> --allow-insecure-unlock --nodiscover console 2&gt;&gt;output.log</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/zk%20papers.html</url>
    <content><![CDATA[<ol>
<li><p>Marlin: Preprocessing zkSNARKs with Universal and Updatable SRS</p>
<p><a href="E:\lzx\zotero\storage\42A4BRHT\Chiesa 等。 - 2020 - Marlin Preprocessing zkSNARKs with Universal and.pdf" target="_blank" rel="noopener">原文地址</a></p>
<p>我们提出了一种构建<strong>预处理 zkSNARK</strong> 的方法，其中<strong>结构化参考字符串 (SRS) 是通用且可更新的</strong>。这利用了holography的新用途 [Babai et al., STOC 1991]，只要以编码形式给出被检查的语句，就可以实现快速验证。</p>
<pre><code>我们使用我们的方法来获得预处理 zkSNARK，其中 SRS 具有线性大小并且参数具有恒定大小。我们的结构改进了 Sonic [Maller et al., CCS 2019]，这是zkSNARK方面的state of the art，在所有效率参数方面：证明速度快一个数量级，验证速度快三倍，即使 更小的SRS大小和论证大小。我们的构造在代数群模型（也被 Sonic 使用）中实例化时最有效，但我们也演示了如何在具体的知识假设下实现它。我们实施和评估我们的建设。
我们预处理 zkSNARK 的核心是一种高效的代数全息证明algebraic holographic proof（AHP），用于满足线性证明长度和恒定查询复杂度的 rank-1 约束可满足性（Rank - 1 constraint satisfiability, R1CS）。
</code></pre></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/zk.html</url>
    <content><![CDATA[<p>zk-SNARK 是“zero knowledge Succinct Non-interactive Argument of Knowledge”的缩写，是 非交互式零知识证明 中的一种，一个将实际的零知识证明类问题转为计算机程序问题的理论。作为目前密码学及其应用领域中最令人激动的成果之一，它使得人们可以对形如“给定一个公开的谓词和一个公开输入，我知道某个秘密输入，使得为真”的语句进行证明和验证。其实现过程大致可以分为以下几步：</p>
<ol>
<li>将要验证的程序拆解成一个个逻辑上的验证步骤，将这些逻辑上的步骤拆解成由加减乘除构成的算数电路。</li>
<li>通过一系列的变换将需要验证的程序转换成验证多项式乘积是相等的，如证明t(x)h(x)= w(x)v(x)。</li>
<li>为了使得证明更加简洁，验证者预先 随机选择几个检查点s ，检查在这几个点上的等式是否成立。</li>
<li>通过 同态编码/加密 的方式使得验证者在计算等式时不知道实际的输入数值，但是仍能进行验证。</li>
<li>在等式左右两边可以同时乘上一个不为0的保密的数值k，那么在验证(t(s)h(s)k)=(w(s)v(s)k)时，就无法知道具体的t(s)、h(s)、w(s)、v(s)，因此可以使得信息得到保护。</li>
</ol>
<p><img src="zk/image-20211209190344755.png" alt="image-20211209190344755"></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/zksnark.html</url>
    <content><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p> Schwatz-Zippel 定理：两个不等的d阶多项式，最多有d个重合点。</p>
<p>多项式的「知识」就是多项式的系数。所谓「知道」多项式就是指「知道」多项式的系数。</p>
<p>伪随机数是用确定性的算法计算出来自[0,1]均匀分布的随机数序列。并不真正的随机，但具有类似于随机数的统计特征，如均匀性、独立性等。在计算伪随机数时，若使用的初值（种子）不变，那么伪随机数的数序也不变。</p>
<p>承诺方案</p>
<h3 id="零知识证明："><a href="#零知识证明：" class="headerlink" title="零知识证明："></a>零知识证明：</h3><p>零知识证明(Zero—Knowledge Proof)，是由S.Goldwasser、S.Micali及C.Rackoff在20世纪80年代初提出的。它指的是证明者能够在不向验证者提供任何有用的信息的情况下，使验证者相信某个论断是正确的。</p>
<h3 id="研究背景（隐私问题）"><a href="#研究背景（隐私问题）" class="headerlink" title="研究背景（隐私问题）"></a>研究背景（隐私问题）</h3><p>比特币网络通过以下三个措施进行隐私保护或匿名：</p>
<p>1、地址的生成无需实名认证；</p>
<p>2、通过地址不能对应出真实身份；</p>
<p>3、同一拥有者的不同账号之间没有直接关联，无法得知特定用户的全部比特币数量。</p>
<p>二、 比特币的匿名性弱点</p>
<p>1、与法币的兑换环节。比特币交易所的实名认证，是有效的反匿名措施，其他要求实名的比特币服务商也如此。有人说可以用假身份证件来逃过，在目前这是可行的，但以后交易所的身份验证一定会越来越严格。</p>
<p>2、交易公开。只需知道一个地址就可以找到关联人的一系列地址。另外，在论坛、微博、TWITTER、REDDIT、BBS等留下的许多信息，通过大数据分析可以汇总起来，会发现一系列的线索，除非你谨慎得像中本聪。</p>
<p>3、交易的汇总输入会暴露拥有人的其他地址。一旦你发送钱包中的大部分币给某人或某交易所，基本上会把你的全部地址都暴露无遗。因为交易会汇总大部分地址中的币打出去。</p>
<p>4、比特币的通讯协议未加密，向外打款时，协议分析软件可以找出IP地址与比特币地址的对应关系，如果在全国布署了这种监控系统，那定位到你的单位或小区就不是问题。(当然可以用TOR、VPN之类逃避)</p>
<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>阿里巴巴与四十大盗，数独·····</p>
<h3 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h3><p>零知识证明的一些用处：——安比实验室</p>
<ul>
<li><strong>数据的隐私保护</strong>：在一个数据表格中，多多少少都有一些信息不想被暴露，比如当年我的成绩单，我只想向人证明，我的成绩及格了，但是我不想让别人知道我到底考了61分还是62分，这会很尴尬。我没有心脏病，但是保险公司需要了解这一点，但是我不想让保险公司知道我的隐私信息。那我可以证明给保险公司看，我没有心脏病，但是病历的全部并不需要暴露。我是一家企业，我想向银行贷款，我只想向银行证明我具备健康的业务与还款能力，但是我不想让银行知道我们的一些商业秘密。</li>
<li><strong>计算压缩与区块链扩容</strong>：<strong>在众多的区块链扩容技术中，Vitalik 采用 zkSNARK 技术能够给现有的以太坊框架带来几十倍的性能提升。</strong>因为有了计算的证明，同样一个计算就没必要重复多次了，在传统的区块链架构中，同样的计算被重复多次，比如签名的校验，交易合法性校验，智能合约的执行等等。这些计算过程都可以被零知识证明技术进行压缩。</li>
<li><strong>端到端的通讯加密</strong>：用户之间可以互相发消息，但是不用担心服务器拿到所有的消息记录，同时消息也可以按照服务器的要求，出示相应的零知识证明，比如消息的来源、与发送的目的地。</li>
<li><strong>身份认证</strong>：用户可以向网站证明，他拥有私钥，或者知道某个只要用户自己才知道的秘密答案，而网站并不需要知道，但是网站可以通过验证这个零知识证明， 从而确认用户的身份</li>
<li><strong>去中心化存储</strong>：服务器可以向用户证明他们的数据被妥善保存，并且不泄露数据的任何内容。</li>
<li><strong>信用记录</strong>：信用记录是另一个可以充分发挥零知识证明优势的领域，用户可以有选择性的向另一方出示自己的信用记录，一方面可以有选择的出示满足对方要求的记录分数，同时证明信用记录的真实性。</li>
<li>构造完全公平的线上数字化商品的交易协议。</li>
<li>更多的例子，可以是任何形式的数据共享，数据处理与数据传输。</li>
</ul>
<h3 id="现有应用"><a href="#现有应用" class="headerlink" title="现有应用"></a>现有应用</h3><p>Zcash 是第一个应用zk-SNARK技术的区块链，它能够提供完全隐私化和加密化的虚拟货币转账。</p>
<p>以太坊(Ethereum)目前也在试图把Zcash的隐私交易功能作为一个预编译合约链接到其上的其他智能合约中（由于如果不使用预编译，每个区块的gas限制将无法完成复杂的zk-SNARK运算）。这被称为ZoE (Zcash over Ethereum)，不过即使做了预编译优化，他能提供的隐私验证能力非常有限。</p>
<p>匿名 Coin，比如 Monero, 比如 ZCash。</p>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>但与此同时，它还并不是一项完美的技术。其一，<strong>它需要建立信任的设置</strong>，如果涉及的用户彼此争吵，只要有一个人表示不同意，在这些用户所在的群里没有建立起信任设置，就无法建立零知识证明。</p>
<p>其二，<strong>生成证明效率低</strong>。但在明年的升级中，我们能够将生成证明的效率从四十秒削减到七秒。</p>
<p>最后，<strong>这项新兴的技术仍有待时间的验证</strong>。像哈希算法，历经30年才从被提出到真正落地应用，而零知识证明，相对来说，才被投入运用一年多，还是一项没有经过测试的技术。</p>
<p>在2017年12月3日举办的亚太以太坊技术交流会上，以太坊创始人Vitalik Buter压轴出场，发表了主题为“以太坊区块链中的隐私保护”的演讲。在演讲中，Vitalik Buterin为在场听众介绍了四种适用于以太坊区块链的兼顾隐私性和安全性的解决方案：通道（Channels）闪电网络、混合器（Mixers）、环签名（Ring Signature）及零知识证明(Zero knowledge proofs)。</p>
<p>安全性依赖于指数知识假设</p>
<h2 id="零知识证明入门"><a href="#零知识证明入门" class="headerlink" title="零知识证明入门"></a>零知识证明入门</h2><p><a href="https://kid1999.github.io/2021/06/18/区块链基础/#区块链基础" target="_blank" rel="noopener">区块链基础 | Kid1999’ Blog</a></p>
<p><a href="https://blog.csdn.net/luckydog612/article/details/80396343" target="_blank" rel="noopener">零知识证明<em>象牙塔下的渣渣-CSDN博客</em>零知识证明</a> ：通俗易懂，但不涉及细节</p>
<p><a href="https://mp.weixin.qq.com/s/XQL_taBhPkCHGZOBc24MyQ" target="_blank" rel="noopener">初识「零知识」与「证明」 (qq.com)</a> ： </p>
<p><a href="https://arxiv.org/abs/1906.07221" target="_blank" rel="noopener">[1906.07221] Why and How zk-SNARK Works (arxiv.org)</a> ：</p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzIxNjkwODE5NQ==&amp;mid=2247484148&amp;idx=1&amp;sn=7cc0f42d16cdc9dd3ec9aced08b68ee8&amp;chksm=9780aa38a0f7232e5ed8f939f4ef2dd9a6fa8be0514adb552ca0139cbe4815bc2d3804ca70cf#rd" target="_blank" rel="noopener">从零开始学习 zk-SNARK（一）——多项式的性质与证明 (qq.com)</a> ：why and how zkSNARK works 中文版</p>
<p><a href="https://www.jianshu.com/p/b6a14c472cc1?from=timeline" target="_blank" rel="noopener">零知识证明与zkSNARK - 简书 (jianshu.com)</a></p>
<h3 id="开发工具包"><a href="#开发工具包" class="headerlink" title="开发工具包"></a>开发工具包</h3><ol>
<li><p>gnark: go语言实现的zksnark库，支持Groth16和PlonK</p>
<p> GitHub：<a href="https://github.com/ConsenSys/gnark" target="_blank" rel="noopener">ConsenSys/gnark: gnark is a fast zk-SNARK library that offers a high-level API to design circuits. The library is open source and developed under the Apache 2.0 license (github.com)</a>  </p>
<p>文档：<a href="https://docs.gnark.consensys.net/en/latest/" target="_blank" rel="noopener">gnark (consensys.net)</a></p>
</li>
<li><p>circom + snarkjs： 基于以太坊的零知识证明实现</p>
<p>snarkjs：<a href="https://github.com/iden3/snarkjs" target="_blank" rel="noopener">iden3/snarkjs: zkSNARK implementation in JavaScript &amp; WASM (github.com)</a></p>
<p>circom：<a href="https://github.com/iden3/circom" target="_blank" rel="noopener">github.com</a></p>
<p>入门：<a href="https://learnblockchain.cn/article/1078" target="_blank" rel="noopener">circom与snarkjs经典教程：创建第一个零知识 snark 电路 </a></p>
<p>合法捕鱼实例：<a href="https://github.com/fluree/example-zero-knowledge" target="_blank" rel="noopener">This Github repo demonstrates how one could set up a Fluree ledger to use zero-knowledge proofs.</a></p>
</li>
<li><p>Spartan：<a href="https://github.com/microsoft/Spartan" target="_blank" rel="noopener">microsoft/Spartan: Spartan: High-speed zkSNARKs without trusted setup (github.com)</a></p>
</li>
</ol>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>数学证明最早源于古希腊。他们发明（发现）了公理与逻辑，他们用证明来说服对方，而不是靠权威。这是彻头彻尾的「去中心化」</p>
<p><strong>零知识证明(Zero knowledge proofs)是“最为强大”的解决方案，尽管技术实现难度最高，但在保护在以太坊网络的隐私性和安全性上，其效果最佳。</strong></p>
<blockquote>
<p>「知识」是与「计算难度」相关，而「信息」则不是</p>
<p>「知识」是与公共所知的东西有关，而「信息」主要与部分公开的东西有关</p>
</blockquote>
<p>获得知识对于我求解有帮助，能够简化问题。但是获得信息对我求解并没有帮助。</p>
<p>地图三染色问题是一个 NP-Complete 问题，这是「计算理论」中的一个名词。另外有一个叫做「电路可满足问题」也是同样是 NP-Complete 问题。NP-Complete 是一类问题，他的求解过程是多项式时间内难以完成的，即「求解困难」，但是验证解的过程是多项式时间可以完成的，即「验证简单」。</p>
<p>所谓的电路可满足性就是指，存在满足电路的一个解。如果这个解的输出值等于一个确定值，那么这个解就能「表示」电路的计算过程。</p>
<p><img src="zksnark/image-20211221180927809.png" alt="image-20211221180927809"></p>
<h2 id="Blockchain"><a href="#Blockchain" class="headerlink" title="Blockchain"></a>Blockchain</h2><h3 id="共识算法"><a href="#共识算法" class="headerlink" title="共识算法"></a>共识算法</h3><p>共识算法：本质上就是随机选择节点打包交易生成区块，不管是PoW还是PoS，公链的共识过程就是随机选择的过程，防止打包节点固定而被攻击。</p>
<p>PoW的思想最早由Cynthia Dwork在1993年提出，用于解决垃圾邮件问题。</p>
<p>工作量证明伴随着大量计算资源的消耗，为了改善这种情况，2011年7月，一位名为Quantum Mechanic 的网友在比特币论坛上提出了权益证明（Proof of Stake，PoS），权益证明与工作量证明最大的不同是，节点成为记账节点的概率受到所持权益的影响，所持权益越多，成为记账节点的概率越大。每次挖矿成功后，节点所持权益就会降低，这样就避免了记账权被某一结点垄断。相较于工作量证明，权益证明具有更短的挖矿时间，所以共识速度更快，计算资源消耗也较低。</p>
<p>2000 年Eric Brewer 等人提出了一个关于分布式系统共识的猜想，随后在2002年被Gilbert 等人证明并被命名为CAP 定理（Consistency- Availability- Partition tolerance）。该定理指出，分布式系统最多在一致性、可用性、分区容忍性中同时满足两个条件。一致性是指分布式系统中的所有节点能够在任意时刻关于某个数据拥有相同的共识；可用性是指当系统中的某些节点出现故障时，系统整体还能向外部提供正常的服务；分区容忍性是指当系统中的部分节点无法进行通信时，仍然能够接收并执行数据的查询或更新请求。CAP 定理的出现使得人们在研究设计分布式共识时需要根据应用场景对一致性、可用性、分区容忍性进行取舍，这对后来区块链中的共识机制发展带来了巨大影响。</p>
<p>对于PoW 的优化主要从<strong>降低资源消耗和提高共识速度</strong>的角度进行。2016 年Eyal 等人提出了Bitcoin-NG 共识机制<sup><a href="#fn_1" id="reffn_1">1</a></sup>。Bitcoin-NG 将比特币种区块划分为两种，一种叫做核心块（key block），用于选举记账节点；另一种叫做微块（microblock），用于打包全网交易。微块的生成并不需要挖矿，因此生成速度很快。与比特币原有共识机制相比，Bitcoin-NG 能够在相同时间内接收更多的交易，实现了对比特币的扩容。<br>对于PoS 的优化主要是解决<strong>“无利害关系（Nothing at stake）”</strong>攻击等PoS 存在的安全问题。无利害关系攻击是指PoS 中节点可以同时在分叉的链上挖矿，而不会受到惩罚。2014 年Kwon 等人提出的Tendermint<sup><a href="#fn_2" id="reffn_2">2</a></sup>在PoS 的基础上加入了<strong>保证金机制</strong>，使得同时在两条链上挖矿的节点会损失一部分保证金，从而解决了无利害关系攻击。</p>
<p><img src="zksnark/image-20220105143534128.png" alt="image-20220105143534128"></p>
<h3 id="Fabric-共识算法"><a href="#Fabric-共识算法" class="headerlink" title="Fabric 共识算法"></a>Fabric 共识算法</h3><p>公有链共识机制一般采用主动复制模型，所有节点都会响应交易请求，这要求每个节点都要执行智能合约并且对其他节点的执行结果进行验证，因此具有较低的共识速度。而Fabric 的共识模型结合了被动复制和主动复制，在交易内容合法性上，采用被动复制模型，背书节点执行智能合约，提交节点对执行结果进行验证，这种设计实现了拜占庭环境下的主从备份，既具有较快的共识速度又有一定的安全性。在交易顺序一致性上采用主动复制模型，排序节点之间采用拜占庭容错算法或故障容错算法对全网的交易顺序进行共识。排序节点间的共识独立于背书节点与提交节点，以模块化的形式提供服务，使用者可以根据实际场景灵活的选择合适的共识算法。这种混合复制模型将传统区块链模型中的交易内容合法性与交易顺序一致性进行解耦，使得Fabric 具有很高的扩展性，适用于构建不同信任假设下的区块链系统[26]1-2。</p>
<blockquote id="fn_1">
<sup>1</sup>. Eyal I, Gencer A E, Sirer E G, et al. Bitcoin-ng: A scalable blockchain protocol[C]//13th USENIX symposium on networked systems design and implementation. 2016: 45-59.<a href="#reffn_1" title="Jump back to footnote [1] in the text."> &#8617;</a>
</blockquote>
<blockquote id="fn_2">
<sup>2</sup>. Kwon J. Tendermint: Consensus without mining [EB/OL]. (2014) [2020-01-10]. <a href="https://bitcoin.org/bitcoin.pdf" target="_blank" rel="noopener">https://bitcoin.org/bitcoin.pdf</a>.<a href="#reffn_2" title="Jump back to footnote [2] in the text."> &#8617;</a>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>位运算</title>
    <url>/%E4%BD%8D%E8%BF%90%E7%AE%97.html</url>
    <content><![CDATA[<h2 id="如何不使用三方变量实现数据交换"><a href="#如何不使用三方变量实现数据交换" class="headerlink" title="如何不使用三方变量实现数据交换"></a>如何不使用三方变量实现数据交换</h2><p>使用位运算亦或操作</p>
<p>原理：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a ^ a = <span class="number">0</span></span><br><span class="line">a ^ <span class="number">0</span> = a</span><br></pre></td></tr></table></figure>
<p>因此：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">a = a ^ b;</span><br><span class="line">b = a ^ b;  <span class="comment">// b = a ^ b ^ b  ====&gt; a</span></span><br><span class="line">a = a ^ b;  <span class="comment">// a = a ^ b ^ a  ====&gt; b</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>位运算</category>
      </categories>
      <tags>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title>买面粉</title>
    <url>/%E4%B9%B0%E9%9D%A2%E7%B2%89.html</url>
    <content><![CDATA[<p><strong>题目描述</strong></p>
<p>小X有n元现金（电子货币），要用这n元去买面粉，但市场上有m种面粉，每种面粉都不是散称，而是装袋的，他们的重量和价格都不一样，并且你只能整袋购买。怎样用有限的经费买到更多的面粉？</p>
<p><strong>输入</strong></p>
<p>输入数据首先包含一个正整数T，表示有T组测试用例，每组测试用例的第一行是两个整数n和m(1&lt;=n&lt;=100, 1&lt;=m&lt;=100),分别表示经费的金额和面粉的种类，然后是m行数据，每行包含3个数p，h和c(1&lt;=p&lt;=20,1&lt;=h&lt;=200,1&lt;=c&lt;=20)，分别表示面粉每袋的价格、每袋的重量以及对应种类面粉的袋数。</p>
<p><strong>输出</strong></p>
<p>对于每组测试数据，请输出能够购买面粉的最多重量，你可以假设经费买不光所有的面粉，并且经费你可以不用完。每个实例的输出占一行。</p>
<p>动态规划</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> t = sc.nextInt();</span><br><span class="line">        <span class="keyword">while</span>(t-- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> m = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span>[] p = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span>[] h = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span>[] c = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">                p[i] = sc.nextInt();</span><br><span class="line">                h[i] = sc.nextInt();</span><br><span class="line">                c[i] = sc.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span>[][] help = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>][m+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">                    help[i][j] = help[i-<span class="number">1</span>][j];</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= c[i] &amp;&amp; k * p[i] &lt;= j; k++)&#123;</span><br><span class="line">                        help[i][j] = Math.max(help[i][j],help[i-<span class="number">1</span>][j-k*p[i]] + k * h[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    		System.out.println(help[n][m]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用一维数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> t = sc.nextInt();</span><br><span class="line">        <span class="keyword">while</span>(t-- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> m = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span>[] p = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span>[] h = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span>[] c = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">                p[i] = sc.nextInt();</span><br><span class="line">                h[i] = sc.nextInt();</span><br><span class="line">                c[i] = sc.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span>[] help = <span class="keyword">new</span> <span class="keyword">int</span>[m+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = m; j &gt;= <span class="number">1</span>; j--)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= c[i] &amp;&amp; k * p[i] &lt;= j; k++)&#123;</span><br><span class="line">                        help[j] = Math.max(help[j],help[j-k*p[i]] + k * h[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    		System.out.println(help[n][m]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/%E5%91%A8%E6%8A%A5.html</url>
    <content><![CDATA[<h3 id="4-18-4-24"><a href="#4-18-4-24" class="headerlink" title="4.18 - 4.24"></a>4.18 - 4.24</h3><p>使用 circom 和 snarkjs 实现简单的零知识证明solidity智能合约，并在本地以太坊测试链上部署测试</p>
<ol>
<li>编写电路</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pragma circom 2.0.0;</span><br><span class="line"></span><br><span class="line">template Multiplier2() &#123;</span><br><span class="line">    signal input a;</span><br><span class="line">    signal input b;</span><br><span class="line">    signal output c;</span><br><span class="line">    c &lt;== a*b;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> component main = Multiplier2();</span><br></pre></td></tr></table></figure>
<ol>
<li>编译上述电路</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">circom multiplier2.circom --r1cs --wasm --sym --c</span><br></pre></td></tr></table></figure>
<ul>
<li><code>--r1cs</code>: it generates the file <code>multiplier2.r1cs</code> that contains the <a href="https://docs.circom.io/background/background#rank-1-constraint-system" target="_blank" rel="noopener">R1CS constraint system</a> of the circuit in binary format.</li>
<li><code>--wasm</code>: it generates the directory <code>multiplier2_js</code> that contains the <code>Wasm</code> code (multiplier2.wasm) and other files needed to generate the <a href="https://docs.circom.io/background/background#witness" target="_blank" rel="noopener">witness</a>.</li>
<li><code>--sym</code> : it generates the file <code>multiplier2.sym</code> , a symbols file required for debugging or for printing the constraint system in an annotated mode.</li>
<li><p><code>--c</code> : it generates the directory <code>multiplier2_cpp</code> that contains several files (multiplier2.cpp, multiplier2.dat, and other common files for every compiled program like main.cpp, MakeFile, etc) needed to compile the C code to generate the witness.</p>
<p>The set of inputs, intermediate signals and output is called <a href="https://docs.circom.io/background/background#witness" target="_blank" rel="noopener">witness</a>.</p>
</li>
</ul>
<h4 id="Power-of-Tau"><a href="#Power-of-Tau" class="headerlink" title="Power of Tau"></a>Power of Tau</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">snarkjs powersoftau new bn128 12 pot12_0000.ptau -v</span><br><span class="line">snarkjs powersoftau contribute pot12_0000.ptau pot12_0001.ptau --name=<span class="string">"First contribution"</span> -v</span><br><span class="line"><span class="comment"># phase 2</span></span><br><span class="line">snarkjs powersoftau prepare phase2 pot12_0001.ptau pot12_final.ptau -v</span><br><span class="line">snarkjs groth16 setup multiplier2.r1cs pot12_final.ptau multiplier2_0000.zkey</span><br><span class="line">snarkjs zkey contribute multiplier2_0000.zkey multiplier2_0001.zkey --name=<span class="string">"1st Contributor Name"</span> -v</span><br><span class="line">snarkjs zkey <span class="built_in">export</span> verificationkey multiplier2_0001.zkey verification_key.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># generating a proof</span></span><br><span class="line">snarkjs groth16 prove multiplier2_0001.zkey witness.wtns proof.json public.json</span><br><span class="line">snarkjs groth16 verify verification_key.json public.json proof.json</span><br><span class="line"></span><br><span class="line">snarkjs zkey <span class="built_in">export</span> solidityverifier multiplier2_0001.zkey verifier.sol</span><br><span class="line"></span><br><span class="line">snarkjs generatecall</span><br></pre></td></tr></table></figure>
<h4 id="remix"><a href="#remix" class="headerlink" title="remix"></a>remix</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">remixd -s E:\project\remix\contract --remix-ide https://remix.ethereum.org</span><br></pre></td></tr></table></figure>
<h4 id="ethereum"><a href="#ethereum" class="headerlink" title="ethereum"></a>ethereum</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">geth --datadir . --networkid 1881005 --http --http.corsdomain=<span class="string">"*"</span> --http.port 8545 --http.addr <span class="string">"0.0.0.0"</span> --http.api <span class="string">"db,web3,eth,debug,personal,net,miner,admin"</span> --allow-insecure-unlock --nodiscover console 2&gt;&gt;output.log</span><br></pre></td></tr></table></figure>
<h4 id="生成的智能合约如下："><a href="#生成的智能合约如下：" class="headerlink" title="生成的智能合约如下："></a>生成的智能合约如下：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//</span><br><span class="line">// Copyright 2017 Christian Reitwiessner</span><br><span class="line">// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</span><br><span class="line">// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</span><br><span class="line">// THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</span><br><span class="line">//</span><br><span class="line">// 2019 OKIMS</span><br><span class="line">//      ported to solidity 0.6</span><br><span class="line">//      fixed linter warnings</span><br><span class="line">//      added requiere error messages</span><br><span class="line">//</span><br><span class="line">//</span><br><span class="line">// SPDX-License-Identifier: GPL-3.0</span><br><span class="line">pragma solidity ^0.6.11;</span><br><span class="line">library Pairing &#123;</span><br><span class="line">    struct G1Point &#123;</span><br><span class="line">        uint X;</span><br><span class="line">        uint Y;</span><br><span class="line">    &#125;</span><br><span class="line">    // Encoding of field elements is: X[0] * z + X[1]</span><br><span class="line">    struct G2Point &#123;</span><br><span class="line">        uint[2] X;</span><br><span class="line">        uint[2] Y;</span><br><span class="line">    &#125;</span><br><span class="line">    /// @return the generator of G1</span><br><span class="line">    function P1() internal pure returns (G1Point memory) &#123;</span><br><span class="line">        return G1Point(1, 2);</span><br><span class="line">    &#125;</span><br><span class="line">    /// @return the generator of G2</span><br><span class="line">    function P2() internal pure returns (G2Point memory) &#123;</span><br><span class="line">        // Original code point</span><br><span class="line">        return G2Point(</span><br><span class="line">            [11559732032986387107991004021392285783925812861821192530917403151452391805634,</span><br><span class="line">             10857046999023057135944570762232829481370756359578518086990519993285655852781],</span><br><span class="line">            [4082367875863433681332203403145435568316851327593401208105741076214120093531,</span><br><span class="line">             8495653923123431417604973247489272438418190587263600148770280649306958101930]</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">        // Changed by Jordi point</span><br><span class="line">        return G2Point(</span><br><span class="line">            [10857046999023057135944570762232829481370756359578518086990519993285655852781,</span><br><span class="line">             11559732032986387107991004021392285783925812861821192530917403151452391805634],</span><br><span class="line">            [8495653923123431417604973247489272438418190587263600148770280649306958101930,</span><br><span class="line">             4082367875863433681332203403145435568316851327593401208105741076214120093531]</span><br><span class="line">        );</span><br><span class="line">*/</span><br><span class="line">    &#125;</span><br><span class="line">    /// @return r the negation of p, i.e. p.addition(p.negate()) should be zero.</span><br><span class="line">    function negate(G1Point memory p) internal pure returns (G1Point memory r) &#123;</span><br><span class="line">        // The prime q in the base field F_q for G1</span><br><span class="line">        uint q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;</span><br><span class="line">        if (p.X == 0 &amp;&amp; p.Y == 0)</span><br><span class="line">            return G1Point(0, 0);</span><br><span class="line">        return G1Point(p.X, q - (p.Y % q));</span><br><span class="line">    &#125;</span><br><span class="line">    /// @return r the sum of two points of G1</span><br><span class="line">    function addition(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) &#123;</span><br><span class="line">        uint[4] memory input;</span><br><span class="line">        input[0] = p1.X;</span><br><span class="line">        input[1] = p1.Y;</span><br><span class="line">        input[2] = p2.X;</span><br><span class="line">        input[3] = p2.Y;</span><br><span class="line">        bool success;</span><br><span class="line">        // solium-disable-next-line security/no-inline-assembly</span><br><span class="line">        assembly &#123;</span><br><span class="line">            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)</span><br><span class="line">            // Use &quot;invalid&quot; to make gas estimation work</span><br><span class="line">            switch success case 0 &#123; invalid() &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        require(success,&quot;pairing-add-failed&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    /// @return r the product of a point on G1 and a scalar, i.e.</span><br><span class="line">    /// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.</span><br><span class="line">    function scalar_mul(G1Point memory p, uint s) internal view returns (G1Point memory r) &#123;</span><br><span class="line">        uint[3] memory input;</span><br><span class="line">        input[0] = p.X;</span><br><span class="line">        input[1] = p.Y;</span><br><span class="line">        input[2] = s;</span><br><span class="line">        bool success;</span><br><span class="line">        // solium-disable-next-line security/no-inline-assembly</span><br><span class="line">        assembly &#123;</span><br><span class="line">            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)</span><br><span class="line">            // Use &quot;invalid&quot; to make gas estimation work</span><br><span class="line">            switch success case 0 &#123; invalid() &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        require (success,&quot;pairing-mul-failed&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    /// @return the result of computing the pairing check</span><br><span class="line">    /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1</span><br><span class="line">    /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should</span><br><span class="line">    /// return true.</span><br><span class="line">    function pairing(G1Point[] memory p1, G2Point[] memory p2) internal view returns (bool) &#123;</span><br><span class="line">        require(p1.length == p2.length,&quot;pairing-lengths-failed&quot;);</span><br><span class="line">        uint elements = p1.length;</span><br><span class="line">        uint inputSize = elements * 6;</span><br><span class="line">        uint[] memory input = new uint[](inputSize);</span><br><span class="line">        for (uint i = 0; i &lt; elements; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            input[i * 6 + 0] = p1[i].X;</span><br><span class="line">            input[i * 6 + 1] = p1[i].Y;</span><br><span class="line">            input[i * 6 + 2] = p2[i].X[0];</span><br><span class="line">            input[i * 6 + 3] = p2[i].X[1];</span><br><span class="line">            input[i * 6 + 4] = p2[i].Y[0];</span><br><span class="line">            input[i * 6 + 5] = p2[i].Y[1];</span><br><span class="line">        &#125;</span><br><span class="line">        uint[1] memory out;</span><br><span class="line">        bool success;</span><br><span class="line">        // solium-disable-next-line security/no-inline-assembly</span><br><span class="line">        assembly &#123;</span><br><span class="line">            success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)</span><br><span class="line">            // Use &quot;invalid&quot; to make gas estimation work</span><br><span class="line">            switch success case 0 &#123; invalid() &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        require(success,&quot;pairing-opcode-failed&quot;);</span><br><span class="line">        return out[0] != 0;</span><br><span class="line">    &#125;</span><br><span class="line">    /// Convenience method for a pairing check for two pairs.</span><br><span class="line">    function pairingProd2(G1Point memory a1, G2Point memory a2, G1Point memory b1, G2Point memory b2) internal view returns (bool) &#123;</span><br><span class="line">        G1Point[] memory p1 = new G1Point[](2);</span><br><span class="line">        G2Point[] memory p2 = new G2Point[](2);</span><br><span class="line">        p1[0] = a1;</span><br><span class="line">        p1[1] = b1;</span><br><span class="line">        p2[0] = a2;</span><br><span class="line">        p2[1] = b2;</span><br><span class="line">        return pairing(p1, p2);</span><br><span class="line">    &#125;</span><br><span class="line">    /// Convenience method for a pairing check for three pairs.</span><br><span class="line">    function pairingProd3(</span><br><span class="line">            G1Point memory a1, G2Point memory a2,</span><br><span class="line">            G1Point memory b1, G2Point memory b2,</span><br><span class="line">            G1Point memory c1, G2Point memory c2</span><br><span class="line">    ) internal view returns (bool) &#123;</span><br><span class="line">        G1Point[] memory p1 = new G1Point[](3);</span><br><span class="line">        G2Point[] memory p2 = new G2Point[](3);</span><br><span class="line">        p1[0] = a1;</span><br><span class="line">        p1[1] = b1;</span><br><span class="line">        p1[2] = c1;</span><br><span class="line">        p2[0] = a2;</span><br><span class="line">        p2[1] = b2;</span><br><span class="line">        p2[2] = c2;</span><br><span class="line">        return pairing(p1, p2);</span><br><span class="line">    &#125;</span><br><span class="line">    /// Convenience method for a pairing check for four pairs.</span><br><span class="line">    function pairingProd4(</span><br><span class="line">            G1Point memory a1, G2Point memory a2,</span><br><span class="line">            G1Point memory b1, G2Point memory b2,</span><br><span class="line">            G1Point memory c1, G2Point memory c2,</span><br><span class="line">            G1Point memory d1, G2Point memory d2</span><br><span class="line">    ) internal view returns (bool) &#123;</span><br><span class="line">        G1Point[] memory p1 = new G1Point[](4);</span><br><span class="line">        G2Point[] memory p2 = new G2Point[](4);</span><br><span class="line">        p1[0] = a1;</span><br><span class="line">        p1[1] = b1;</span><br><span class="line">        p1[2] = c1;</span><br><span class="line">        p1[3] = d1;</span><br><span class="line">        p2[0] = a2;</span><br><span class="line">        p2[1] = b2;</span><br><span class="line">        p2[2] = c2;</span><br><span class="line">        p2[3] = d2;</span><br><span class="line">        return pairing(p1, p2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract Verifier &#123;</span><br><span class="line">    using Pairing for *;</span><br><span class="line">    struct VerifyingKey &#123;</span><br><span class="line">        Pairing.G1Point alfa1;</span><br><span class="line">        Pairing.G2Point beta2;</span><br><span class="line">        Pairing.G2Point gamma2;</span><br><span class="line">        Pairing.G2Point delta2;</span><br><span class="line">        Pairing.G1Point[] IC;</span><br><span class="line">    &#125;</span><br><span class="line">    struct Proof &#123;</span><br><span class="line">        Pairing.G1Point A;</span><br><span class="line">        Pairing.G2Point B;</span><br><span class="line">        Pairing.G1Point C;</span><br><span class="line">    &#125;</span><br><span class="line">    function verifyingKey() internal pure returns (VerifyingKey memory vk) &#123;</span><br><span class="line">        vk.alfa1 = Pairing.G1Point(</span><br><span class="line">            12337750874814986638183658287417226184821865034780062781169448227927843085437,</span><br><span class="line">            20789784105513116652447837778798744770812372834441090975130560939386240638449</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        vk.beta2 = Pairing.G2Point(</span><br><span class="line">            [18784773432458773856533621653352594216310804914846082882128369129867537056603,</span><br><span class="line">             15993147364930271011119857771229518400843864334160483000463925699781638094398],</span><br><span class="line">            [14426808660924769767209049580514677357290856656181006011291452963595796297437,</span><br><span class="line">             20849839715092881998024103134500501732489517045392067824309586274941085058084]</span><br><span class="line">        );</span><br><span class="line">        vk.gamma2 = Pairing.G2Point(</span><br><span class="line">            [11559732032986387107991004021392285783925812861821192530917403151452391805634,</span><br><span class="line">             10857046999023057135944570762232829481370756359578518086990519993285655852781],</span><br><span class="line">            [4082367875863433681332203403145435568316851327593401208105741076214120093531,</span><br><span class="line">             8495653923123431417604973247489272438418190587263600148770280649306958101930]</span><br><span class="line">        );</span><br><span class="line">        vk.delta2 = Pairing.G2Point(</span><br><span class="line">            [6111397131408822340052935052704500884297146961431774811308133271014030453383,</span><br><span class="line">             20257662194508954709330260176873004684846702285506792201377179815653163601689],</span><br><span class="line">            [6925686265402714784473799066161817568880279684260461258791863079183992598211,</span><br><span class="line">             232599846384973218731329320006391615042059720103935983598945368024486252821]</span><br><span class="line">        );</span><br><span class="line">        vk.IC = new Pairing.G1Point[](2);</span><br><span class="line">        </span><br><span class="line">        vk.IC[0] = Pairing.G1Point( </span><br><span class="line">            18962681638181644814620786412357572954435556887442787314425322833857457400640,</span><br><span class="line">            20931347130095835758845105591609451396603467861399243873929590769728350128676</span><br><span class="line">        );                                      </span><br><span class="line">        </span><br><span class="line">        vk.IC[1] = Pairing.G1Point( </span><br><span class="line">            10821775866028401376039912101097412401059716038949182737075130411672179882951,</span><br><span class="line">            14378620393193287343898032009055968536407856858577257301546616957060075180530</span><br><span class="line">        );                                      </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    function verify(uint[] memory input, Proof memory proof) internal view returns (uint) &#123;</span><br><span class="line">        uint256 snark_scalar_field = 21888242871839275222246405745257275088548364400416034343698204186575808495617;</span><br><span class="line">        VerifyingKey memory vk = verifyingKey();</span><br><span class="line">        require(input.length + 1 == vk.IC.length,&quot;verifier-bad-input&quot;);</span><br><span class="line">        // Compute the linear combination vk_x</span><br><span class="line">        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);</span><br><span class="line">        for (uint i = 0; i &lt; input.length; i++) &#123;</span><br><span class="line">            require(input[i] &lt; snark_scalar_field,&quot;verifier-gte-snark-scalar-field&quot;);</span><br><span class="line">            vk_x = Pairing.addition(vk_x, Pairing.scalar_mul(vk.IC[i + 1], input[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        vk_x = Pairing.addition(vk_x, vk.IC[0]);</span><br><span class="line">        if (!Pairing.pairingProd4(</span><br><span class="line">            Pairing.negate(proof.A), proof.B,</span><br><span class="line">            vk.alfa1, vk.beta2,</span><br><span class="line">            vk_x, vk.gamma2,</span><br><span class="line">            proof.C, vk.delta2</span><br><span class="line">        )) return 1;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    /// @return r  bool true if proof is valid</span><br><span class="line">    function verifyProof(</span><br><span class="line">            uint[2] memory a,</span><br><span class="line">            uint[2][2] memory b,</span><br><span class="line">            uint[2] memory c,</span><br><span class="line">            uint[1] memory input</span><br><span class="line">        ) public view returns (bool r) &#123;</span><br><span class="line">        Proof memory proof;</span><br><span class="line">        proof.A = Pairing.G1Point(a[0], a[1]);</span><br><span class="line">        proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);</span><br><span class="line">        proof.C = Pairing.G1Point(c[0], c[1]);</span><br><span class="line">        uint[] memory inputValues = new uint[](input.length);</span><br><span class="line">        for(uint i = 0; i &lt; input.length; i++)&#123;</span><br><span class="line">            inputValues[i] = input[i];</span><br><span class="line">        &#125;</span><br><span class="line">        if (verify(inputValues, proof) == 0) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的library paring是椭圆曲线相关操作，其中的paring函数是椭圆曲线的配对函数，用在零知识证明zksnark的最后一步，比较两个等式是否相等。其实具体也看不太懂</p>
<p>contract 下面的 varify是智能合约向外界提供的接口，该接口调用paring函数比较用户提供的证明是否符合条件，并返回0，1</p>
<p>在上面的代码中，library库是libsnark算法的solidity实现，其算法的安全性、正确性证明相信在linsnark算法中都已经给出，那么整个过程不会涉及到隐私泄露的问题，而从verify函数中也可以看出，对用户提供的证明的预处理操作不过是解析证明到两个椭圆曲线上的点，然后就调用paring函数，因为在零知识证明理论中，证明本身不包含任何有用的信息，因此整个解析的过程也不会涉及到隐私泄露。<strong>总的来说，在零知识证明这个框架中，若能保证<code>libsnark</code> 算法的具体实现逻辑没有漏洞，那么整个过程没有知识的泄露</strong>。</p>
<h2 id="4-25-5-1"><a href="#4-25-5-1" class="headerlink" title="4.25 - 5.1"></a>4.25 - 5.1</h2><p>学习Hyperledger Fabric源码、Gossip和Raft协议</p>
<h3 id="Gossip协议"><a href="#Gossip协议" class="headerlink" title="Gossip协议"></a>Gossip协议</h3><p>​    出自1987 年发布的一篇论文：《Epidemic Algorithms for Replicated Database Maintenance》，弱一致性共识算法</p>
<h4 id="数据更新的三种方法："><a href="#数据更新的三种方法：" class="headerlink" title="数据更新的三种方法："></a>数据更新的三种方法：</h4><p><img src="%E5%91%A8%E6%8A%A5/image-20220513211724020.png" alt="image-20220513211724020"></p>
<p>直接邮寄：当一个节点数据变化，通知所有节点。简单、直接但是缺点是节点可能并不知道其他节点的存在</p>
<p>反熵：<code>熵</code> 即混乱、差异程度，反熵就是消去节点直接的不同。节点随机选择其他节点，互相交换数据达成一致。可靠但是数据量大，开销大、速度慢。</p>
<p>传谣：类似反熵但是只传播<code>谣言</code> 即 信息不平等的部分。可靠、网络开销小。</p>
<p><strong>Gossip 设计了两种可能的消息传播模式：反熵（Anti-Entropy）和传谣（Rumor-Mongering）。</strong></p>
<h4 id="Gossip协议的模拟过程"><a href="#Gossip协议的模拟过程" class="headerlink" title="Gossip协议的模拟过程"></a>Gossip协议的模拟过程</h4><p><a href="https://flopezluis.github.io/gossip-simulator/" target="_blank" rel="noopener">https://flopezluis.github.io/gossip-simulator/</a></p>
<blockquote>
<p>一个节点想与网络中的其他节点分享一些信息。然后，它定期从节点集合中随机选择一个节点并交换信息，收到信息的节点也做同样的事情。<br>该信息定期发送到 N 个目标，N 被称为扇出（Fanout）。</p>
<p>算法复杂度为O(LogN)</p>
<p>节点加入网路的方式是将自己添加到Gossip成员节点的节点集合中。</p>
</blockquote>
<h3 id="Raft"><a href="#Raft" class="headerlink" title="Raft"></a>Raft</h3><p>一种强一致性共识算法，Hyperledger Fabric 1.4 之后支持Raft共识</p>
<p>共识算法就是保证一个集群的多台机器协同工作，在遇到请求时，数据能够保持一致。即使遇到机器宕机，整个系<strong>统仍然能够对外保持</strong>服务的可用性。</p>
<p>Raft 将共识问题分解三个子问题：</p>
<ol>
<li><strong>Leader election 领导选举</strong>：有且仅有一个 leader 节点，如果 leader 宕机，通过选举机制选出新的 leader；</li>
<li><strong>Log replication 日志复制</strong>：leader 从客户端接收数据更新/删除请求，然后日志复制到 follower 节点，从而保证集群数据的一致性；</li>
<li><strong>Safety 安全性</strong>：通过安全性原则来处理一些特殊 case，保证 Raft 算法的完备性；</li>
</ol>
<p>所以，Raft 算法核心流程可以归纳为：</p>
<ul>
<li>首先选出 leader，leader 节点负责接收外部的数据更新/删除请求；</li>
<li>然后日志复制到其他 follower 节点，同时通过安全性的准则来保证整个日志复制的一致性；</li>
<li>如果遇到 leader 故障，followers 会重新发起选举出新的 leader；</li>
</ul>
<h2 id="5-2-5-8"><a href="#5-2-5-8" class="headerlink" title="5.2-5.8"></a>5.2-5.8</h2><h3 id="A-Secure-File-Sharing-System-Based-on-IPFS-and-Blockchain"><a href="#A-Secure-File-Sharing-System-Based-on-IPFS-and-Blockchain" class="headerlink" title="A Secure File Sharing System Based on IPFS and Blockchain"></a>A Secure File Sharing System Based on IPFS and Blockchain</h3><p><a href="E:\lzx\zotero\storage\5WAV27X3\2020_A Secure File Sharing System Based on IPFS and Blockchain_Huang et al.pdf" target="_blank" rel="noopener">原文</a></p>
<p><img src="%E5%91%A8%E6%8A%A5/image-20220505153510618.png" alt="image-20220505153510618"></p>
<ul>
<li>方法比较常规，为了实现访问控制，在IPFS和Blockchain的基础上增加了IPFS_proxy，一个分布式的访问控制和密钥管理系统。这里的文件共享是面向群组的。1用户共享文件前创建群组，IPFS_proxy使用group_key加密文件，只有群组中的user才能获取group key解密文件，以这种方式实现访问控制。user获取group key的方式是key wrapping，即proxy使用user的公钥加密group key，user使用私钥解密获取。</li>
<li>只要知道group_id就可以加入并获取所有文件，这似乎不是一个很好的设计，而且想要将用户从群组中踢出，需要更新group key、通知所有user，re-encrypt所有文件，上链，这个过程太过复杂。而且如何从IPFS上删除原有的数据？</li>
</ul>
<h3 id="A-Blockchain-Based-Decentralized-Federated-Learning-Framework-with-Committee-Consensus"><a href="#A-Blockchain-Based-Decentralized-Federated-Learning-Framework-with-Committee-Consensus" class="headerlink" title="A Blockchain-Based Decentralized Federated Learning Framework with Committee Consensus"></a>A Blockchain-Based Decentralized Federated Learning Framework with Committee Consensus</h3><p><a href="E:\lzx\zotero\storage\3NSGHRER\2021_A Blockchain-Based Decentralized Federated Learning Framework with Committee_Li et al.pdf" target="_blank" rel="noopener">原文</a></p>
<p>模型存储模式、训练过程和新的委员会共识。</p>
<p><img src="%E5%91%A8%E6%8A%A5/image-20220507230338609.png" alt="image-20220507230338609"></p>
<p><img src="%E5%91%A8%E6%8A%A5/image-20220507225830343.png" alt="image-20220507225830343"></p>
<h4 id="出发点："><a href="#出发点：" class="headerlink" title="出发点："></a>出发点：</h4><ol>
<li>FL服务器中心化带来的问题，如单点故障、泄露隐私问题</li>
<li>无法处理恶意节点投毒问题</li>
</ol>
<p>创新点：</p>
<ol>
<li>委员会共识</li>
</ol>
<p>共识机制：选举委员会节点，委员会成员对节点上传的梯度值打分，中位数作为最终得分，根据最终得分选举下一轮委员会成员</p>
<ol>
<li><strong>高效率</strong>:只有少数节点验证更新，而不是广播到每个节点并达成协议。</li>
<li><strong>K-fold交叉验证</strong>:委员会成员不参加本次本地培训。因此，我们将委员会的本地数据作为验证集。随着每一轮委员会成员的交替，验证集也会发生变化。在此设置下，实现了对FL的k-fold交叉验证。</li>
<li><strong>反恶意</strong>:根据验证分数，智能合约将选出相应性能较好的节点，组成下一轮培训的新委员会。这意味着所选的本地数据分布是群居的，节点不是恶意的。</li>
</ol>
<p>存储优化：删除旧节点    ————》 信任问题</p>
<p>激励机制：根据节点提交更新的分数分配奖励</p>
<p>安全性：委员会成员中恶意节点数量小于一半</p>
<p>模型训练：</p>
<ul>
<li>两个问题：<ul>
<li>各个节点所有的数据可能不是独立同分布的  ——》每一轮训练需要足够多的更新以使得全局模型的泛化能力最大化。</li>
<li>节点不能保证随时在线  ——》节点主动获取更新模型进行训练</li>
</ul>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>委员会共识中委员会的概念并不是首创，像EOS中的DPOS中就有委员会的概念</li>
<li>存储优化的概念中本聪在比特币的白皮书中就有初步构想。</li>
<li>每一轮更新上链数据量大。</li>
</ol>
<p><img src="%E5%91%A8%E6%8A%A5/image-20220508111607556.png" alt="image-20220508111607556"></p>
<p><strong>基于竞争的共识机制首先在链上追加区块，然后达成共识。相反，基于通信的共识机制在附加块之前达成一致。</strong></p>
<h2 id="5-9-5-15"><a href="#5-9-5-15" class="headerlink" title="5.9-5.15"></a>5.9-5.15</h2><p>阅读《Hyperledger Fabric技术内幕：架构设计与实现原理》，学习hyperldger Fabric源码并尝试复现北交硕士论文《基于可验证随机函数的hyperledger fabric共识机制优化》</p>
<h3 id="Hyperledger-Fabric1-x-共识机制源码"><a href="#Hyperledger-Fabric1-x-共识机制源码" class="headerlink" title="Hyperledger Fabric1.x  共识机制源码"></a>Hyperledger Fabric1.x  共识机制源码</h3><ol>
<li><code>core\endorser\endorser.go</code> 是背书节点相关处理逻辑代码，其中<code>ProcessProposal</code> 函数为公开对外提供的处理提案函数</li>
</ol>
<p>首先，<code>validation.ValidateProposalMessage()</code> 函数做如下四件事情：</p>
<ol>
<li>检测生成签名的证书有效性，提案message、header可以正确解析时，证书有效</li>
<li>验证证书可信</li>
<li>验证签名有效性</li>
<li>检测重放攻击</li>
</ol>
<p>待整理····</p>
<h3 id="其他概念"><a href="#其他概念" class="headerlink" title="其他概念"></a>其他概念</h3><h4 id="1、LSCC-Lifecycle-System-Chaincode"><a href="#1、LSCC-Lifecycle-System-Chaincode" class="headerlink" title="1、LSCC: Lifecycle System Chaincode"></a>1、LSCC: Lifecycle System Chaincode</h4><p>This system chaincode is used for managing the lifecycle of chaincode. It is used for install, instantiate (实例) and update chaincode. When we install chaincode, the process goes through LSCC</p>
<h4 id="2、ESCC-Endorsement-System-Chaincode"><a href="#2、ESCC-Endorsement-System-Chaincode" class="headerlink" title="2、ESCC: Endorsement System Chaincode"></a>2、ESCC: Endorsement System Chaincode</h4><p>This system chaincode is used to endorse (赞同) the transaction by digitally signing the response.<br>The client sends the transaction proposal to invoke chaincode function at the endorsement phase (相) . client sign proposal with his credential (凭据) and send to endorsement peers. First endorsing (赞同) peer simulate transaction and verify if the client is authorized (授权) to invoke transaction on the channel. The endorsement peer executes the chaincode and creates a read/write(R/W) set. Transaction result includes response value, read set and write set. Then endorsement peer call ESCC and sign this transaction response with peer identity (身份) and send back to client.</p>
<h4 id="3、VSCC-Validation-System-Chaincode"><a href="#3、VSCC-Validation-System-Chaincode" class="headerlink" title="3、VSCC: Validation System Chaincode"></a>3、VSCC: Validation System Chaincode</h4><p>This is used to validate the transaction against its endorsement policy.<br>A Validation system chaincode evaluates (评价) endorsements in the transaction against the endorsement policy specified (指定) for the chaincode. If the endorsement policy is not satisfied, then that transaction is marked invalid.<br>When all peers get a block from the orderer, first they verify orderer’s signature on the block. Every block is decoded and all the transaction goes through VSCC before performing MVCC validation. VSCC validates endorsements in the transaction against endorsement policy specified (指定) for chaincode. If the endorsement policy fails to satisfy, then the transaction is marked as invalid.<br>Note: MVCC - Multiversion Concurrency Control — It ensures that the version of keys read by transaction during the endorsement phase (相) is the same as the current state in a local ledger at commit time. It is performed on all valid transactions in the block which is validated by VSCC. If the read set version does not match (比赛) , the transaction is marked as invalid. MVCC is not chaincode, it’s a mechanism (机制) to avoid the double-spending problem in Hyperledger fabric</p>
<h4 id="4、CSCC-Configuration-system-Chaincode"><a href="#4、CSCC-Configuration-system-Chaincode" class="headerlink" title="4、CSCC: Configuration system Chaincode"></a>4、CSCC: Configuration system Chaincode</h4><p>This chaincode is used to manage channel configuration. When we create a channel, update channel, the process goes through the configuration system chaincode. Actually it validates the channel creation/updation.</p>
<h4 id="5、QSCC-Query-System-Chaincode"><a href="#5、QSCC-Query-System-Chaincode" class="headerlink" title="5、QSCC: Query System Chaincode"></a>5、QSCC: Query System Chaincode</h4><p>This Chaincode runs in all peer and provide ledger API like getTransactionByTransactionID, getBlockByBlockNumber, GetBlockByTxID, GetChainInfo, GetBlockByTxID.</p>
<p>Hope this article will help you. It’s basic information about the system chaincodes.</p>
]]></content>
  </entry>
  <entry>
    <title>多线程实现方式</title>
    <url>/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95.html</url>
    <content><![CDATA[<h3 id="实现多线程方式"><a href="#实现多线程方式" class="headerlink" title="实现多线程方式"></a>实现多线程方式</h3><ol>
<li>继承Thread类<ol>
<li>自定义类继承Thread</li>
<li>重写run方法</li>
<li>创建对象</li>
<li>启动线程</li>
</ol>
</li>
<li>实现Runnable<ol>
<li>定义一个类实现接口</li>
<li>类中重写run方法</li>
<li>创建对象</li>
<li>创建Thread类对象，将自定义类对象作为构造方法的参数传入</li>
<li>启动线程</li>
</ol>
</li>
<li>callable 和future<ol>
<li>自定义类实现callable接口</li>
<li>重写call方法</li>
<li>实例化自定义类</li>
<li>创建future实现类FutureTask对象，将自定义类对象作为构造方法参数传入</li>
<li>创建Thread类对象，将FutureTask对象作为构造方法参数传入</li>
<li>启动线程</li>
</ol>
</li>
</ol>
<p>run方法不开启线程，相当于普通方法的调用</p>
<h3 id="任务拒接策略："><a href="#任务拒接策略：" class="headerlink" title="任务拒接策略："></a>任务拒接策略：</h3><ol>
<li>ThreadPoolExecutor.AbortPolicy()：丢弃任务并抛出RejectedExecutionException异常，是默认策略</li>
<li>ThreadPoolExecutor.DiscardPolicy()，丢弃任务不抛出异常</li>
<li>ThreadPoolExecutor.DiscardOldestPolicy()：丢弃等待最久的任务并把当前任务加入队列。</li>
<li>ThreadPoolExecutor.CallerRunsPolicy()：调用任务的run方法绕过线程池直接执行。</li>
</ol>
<h3 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h3><p>强制线程在每次使用共享数据时查看最新值，而不是数据副本。使用在变量前。</p>
<p>他不会保证原子性</p>
<h3 id="Synchronize"><a href="#Synchronize" class="headerlink" title="Synchronize"></a>Synchronize</h3><ol>
<li>线程获得锁对象</li>
<li>清空线程变量副本</li>
<li>从共享变量中拷贝最新值到变量副本中</li>
<li>执行代码</li>
<li>将修改后变量副本的值赋值给共享数据</li>
<li>释放锁</li>
</ol>
<p>可以保证原子性</p>
<h3 id="AtomicInteger类"><a href="#AtomicInteger类" class="headerlink" title="AtomicInteger类"></a>AtomicInteger类</h3><p>实现原子性的高效方式</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80.html</url>
    <content><![CDATA[<ol>
<li><p>欧拉定理</p>
<p>欧拉定理（也称费马-欧拉定理或欧拉$\varphi$函数定理）是一个关于同余的性质。若<code>n,a</code>为正整数，且<code>n,a</code>互素（即<code>gcd(a,n) = 1</code>），则$\alpha^{\varphi(n)} \equiv 1 (mod\ n)$, 即$\alpha^{\varphi(n)}$ 与 1 在 模n下同余；$\varphi(n)$ 为欧拉函数。欧拉定理得名于瑞士数学家莱昂哈德欧拉。</p>
</li>
<li><p>欧拉函数</p>
<p>对正整数n，欧拉函数$\varphi(n)$ 是小于等于n的正整数中与n互质的数的数目。例如$\varphi(8) = 4$， 因为 1，3，5，7均与8互质。</p>
<p>若<code>n</code>有标准分解$ n = p_1^{k_1} p_2^{k_2}···p_r^{k_r}$ ，其中各$p_i$ 为互异的质因子，各$k_i$ 为质因子的次数，则欧拉函数在该处的值为$\varphi(n) = p_1^{k_1-1} p_2^{k_2-1}···p_r^{k_r-1}(p_1 - 1)(p_2 - 1)····(p_r - 1)$</p>
</li>
<li><p>费马小定理</p>
<p>若p为质数，a为任意正整数，那么$a^p - a$ 可被p整除。</p>
<p>若p为质数，a与p互质，那么$a^{p-1} \equiv 1 (mod\ p)$ </p>
</li>
</ol>
<h2 id="paillier加密"><a href="#paillier加密" class="headerlink" title="paillier加密"></a>paillier加密</h2><p>基于复合剩余类的困难问题，该加密是一种同态加密，满足加法和数乘同态。</p>
<h4 id="密钥生成"><a href="#密钥生成" class="headerlink" title="密钥生成"></a>密钥生成</h4><ol>
<li><p>随机选择两个大质数p和q满足<code>gcd(pq,(p-1)(q-1)) = 1</code> 。这个属性是保证两个质数长度相等。</p>
</li>
<li><p>计算 <code>n = pq</code> 和 <code>λ = lcm(p-1,q-1)</code> 。</p>
</li>
<li><p>选择随机整数g，$g \in \mathbb{Z}^*_{n^2}$ </p>
</li>
<li><p>通过检查模逆元 $\mu = (L(g^\lambda mod n ^ 2))^{-1} mod n$ 存在，使得满足n整除g的阶。其中，函数<code>L</code> 定义为 $L(x) = \frac{x-1}{n}$ 。</p>
<p>注意 $\frac{a}{b}$ 并不表示b的模逆元模乘a次，而是a除以b的商，即满足$a \ge vb, v\ge 0$ 的最大<code>v</code>值。  </p>
</li>
</ol>
<p>​    <strong>公钥：(n, g)</strong></p>
<p>​    <strong>私钥：(λ, u)</strong></p>
<p>​    如果使用相等长度的<code>p,q</code> ，那么以上生成密钥的一个简单变种是：$g = n + 1, \lambda = \varphi(n), and\ \mu = \varphi(n)^{-1} mod\ n, where\ \varphi(n) = (p-1)(q-1)$ </p>
<h4 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h4><ol>
<li>待加密消息m满足 $0 \le m \lt n$</li>
<li>选择随机数r满足$0\lt r \lt n$ </li>
<li>计算密文：$c = g^m r^n\ mod\ n^2$</li>
</ol>
<h4 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h4><ol>
<li>待解密密文c满足$c \in \mathbb{Z}^*_{n^2} $</li>
<li>计算原文： $m = L(c^\lambda \ mod \ n^2) · \mu \ mod \ n$ </li>
</ol>
<h3 id="shannon-cipher-香农密码"><a href="#shannon-cipher-香农密码" class="headerlink" title="shannon cipher 香农密码"></a>shannon cipher 香农密码</h3><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><p>symmetric encryption: 对称加密</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>message \ plaintext</td>
<td>原文 m</td>
<td></td>
</tr>
<tr>
<td>ciphertext</td>
<td>密文 c</td>
<td></td>
</tr>
<tr>
<td>key space \ message space\ ciphertext space</td>
<td>密钥空间 $\mathcal{K}$ 、明文空间$\mathcal{M}$、密文空间$\mathcal{C}$</td>
<td></td>
</tr>
<tr>
<td>encryption</td>
<td>加密</td>
<td></td>
</tr>
<tr>
<td>decryption</td>
<td>解密</td>
<td></td>
</tr>
<tr>
<td>symmetric encryption</td>
<td>对称加密</td>
<td></td>
</tr>
<tr>
<td>public-key encryption</td>
<td>公钥加密（非对称加密）</td>
<td></td>
</tr>
<tr>
<td>digital signatures</td>
<td>数字签名</td>
<td></td>
</tr>
<tr>
<td>message integrity</td>
<td>消息完整性</td>
</tr>
</tbody>
</table>
</div>
]]></content>
  </entry>
  <entry>
    <title>字典序全排列</title>
    <url>/%E5%AD%97%E5%85%B8%E5%BA%8F%E5%85%A8%E6%8E%92%E5%88%97.html</url>
    <content><![CDATA[<blockquote>
<p>i题目描述</p>
<blockquote>
<p>要求计算从1到N的N个整数所能构成的所有排列，并按照字典顺序依次输出。</p>
</blockquote>
<p>输入格式</p>
<blockquote>
<p>输入为一组整数，每行为一个整数N，N&lt;8，结尾行为0。</p>
</blockquote>
<p>输出格式</p>
<blockquote>
<p>对每一个输入N，按照字典序输出1到N的所有排列，数字中间用空格隔开，每个排列的输出占一行。</p>
</blockquote>
<p>输入样例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 2</span><br><span class="line">&gt; 3</span><br><span class="line">&gt; 0</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>输出样例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 1 2 </span><br><span class="line">&gt; 2 1 </span><br><span class="line">&gt; 1 2 3 </span><br><span class="line">&gt; 1 3 2 </span><br><span class="line">&gt; 2 1 3 </span><br><span class="line">&gt; 2 3 1 </span><br><span class="line">&gt; 3 1 2 </span><br><span class="line">&gt; 3 2 1 </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>全排列问题一般使用的方法都是回溯，但是一般的回溯不是按照字典序输出全排列，所以这个特殊一点。</p>
<p>一般的全排列，对当前位置的选择是按照顺序与后面的元素交换，然后继续选择下一层。</p>
<p>举个例子，n = 4个数，普通的全排列初始序列为<code>1 2 3 4</code>，当前排列到 k = 2，也就是  1 2 ···，回溯选择k = 2 的第二个值的时候，是按照2 与 3交换，k = 3，排列下一层，再次回溯回来后， 2 与 4交换然后排列下一层，因此它做不到按字典序输出。</p>
<p>按字典序输出做法的基本思想是：选择当前层 <code>k</code> 的值的时候，是选择一个最小的并且前面 <code>k</code> 前的<code>k-1</code> 个位置没有使用到的值，因为每次选择的都是最小的，因此他能够按照字典序输出。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当前要确定第k个位置的值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">permutation</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> k, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 全部排列结束，输出</span></span><br><span class="line">    <span class="keyword">if</span>( k == n)</span><br><span class="line">    &#123;</span><br><span class="line">        print(arr,n);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从0到n-1循环，找到一个最小没有使用过的数字</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 标志位</span></span><br><span class="line">        <span class="keyword">int</span> isok = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 遍历前k-1个位置，查看当前i是否使用过</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果前面某一个值 使用过 i+1，则标记isok为 0</span></span><br><span class="line">            <span class="keyword">if</span>(arr[j] == i+<span class="number">1</span>) <span class="comment">// i是序号，i+1是对应值</span></span><br><span class="line">            &#123;</span><br><span class="line">                isok = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果前k-1位都没有使用i+1，那么当前第k位可以选择i+1，然后继续下一层。</span></span><br><span class="line">        <span class="keyword">if</span>(isok)</span><br><span class="line">        &#123;</span><br><span class="line">            arr[k] = i+<span class="number">1</span>;</span><br><span class="line">            permutation(arr,k+<span class="number">1</span>,n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n) &amp;&amp; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> arr[n+<span class="number">1</span>];</span><br><span class="line">        permutation(arr,<span class="number">0</span>,n);	<span class="comment">// dfs</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>回溯</tag>
      </tags>
  </entry>
  <entry>
    <title>有向图是否存在环？</title>
    <url>/%E6%9C%89%E5%90%91%E5%9B%BE%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E7%8E%AF%EF%BC%9F.html</url>
    <content><![CDATA[<blockquote>
<p>t题目描述</p>
<blockquote>
<p>写程序判断有向图是否存在环。有向图的输入用n个二元组表示(u,v)，表示从u到v有一条有向边，起点是u，终点是v。</p>
</blockquote>
<p>输入格式</p>
<blockquote>
<p>输入包括多组测试数据，每组测试数据首先是正整数n和m，表示有向图有n个节点（编号从1到n），m条有向边，接下来是m行，每行为两个正整数u和v，用空格隔开，表示从节点u到节点v有一条有向边，u和v都大于等于1且小于等于n<br>最后一行为0 0，表示测试数据结束<br>有向图的节点个数不超过100个，边的个数不超过1000</p>
</blockquote>
<p>输出格式</p>
<blockquote>
<p>如果该有向图存在环，输出YES，否则输出NO</p>
</blockquote>
<p>输入样例</p>
<blockquote>
<p>11 10<br>1 2<br>2 3<br>4 3<br>5 4<br>6 5<br>3 9<br>10 9<br>9 11<br>7 8<br>8 11<br>2 2<br>1 2<br>2 1<br>3 3<br>1 2<br>2 3<br>3 1<br>0 0</p>
</blockquote>
<p>输出样例</p>
<blockquote>
<p>NO<br>YES<br>YES</p>
</blockquote>
</blockquote>
<p>判断有向图是否存在环，有两种解决方法：</p>
<ol>
<li>拓扑排序</li>
<li>DFS</li>
</ol>
<p>首先说拓扑排序，百度是这么说拓扑排序的。</p>
<blockquote>
<p>对一个<a href="https://baike.baidu.com/item/有向无环图/10972513" target="_blank" rel="noopener">有向无环图</a>(Directed Acyclic Graph简称DAG)G进行拓扑排序，是将G中所有顶点排成一个线性序列，使得图中任意一对顶点u和v，若边<u,v>∈E(G)，则u在线性序列中出现在v之前。通常，这样的线性序列称为满足拓扑次序(Topological Order)的序列，简称拓扑序列。简单的说，由某个集合上的一个<a href="https://baike.baidu.com/item/偏序/2439087" target="_blank" rel="noopener">偏序</a>得到该集合上的一个<a href="https://baike.baidu.com/item/全序/10577699" target="_blank" rel="noopener">全序</a>，这个操作称之为拓扑排序。</u,v></p>
</blockquote>
<p>操作的步骤是，重复执行：每次取入度为0的节点，从节点集合中删除，同时删除与之相关的边，更新剩余节点的入度。</p>
<p>删除所有入度为0的节点后，如果节点集合中仍有节点存在，那么他们一定能构成环，因为<strong>对于环中的所有节点，它至少有一个入度</strong>。</p>
<p>因此这是一个判断有向图有无环的方法。</p>
<p>另外一个方法是深度优先搜索DFS，大概的思想是，对于一个没有访问过的节点i，我们访问它相邻的节点j。如果相邻节点j被标记为正在被访问，那么说明当前能够构成一个环，直接返回true，如果相邻节点j没有被访问，那么标记为正在被访问，继续访问j的相邻节点，如果j已经访问过，说明不能构成环，返回false。大体思想就是这样。下面是代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">// 二维数组存储图</span></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">110</span>][<span class="number">110</span>];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="comment">// 访问标记</span></span><br><span class="line"><span class="keyword">int</span> visited[<span class="number">110</span>];</span><br><span class="line"><span class="keyword">bool</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 如果当前节点正在被访问，表示找到了一个环，i是其中一个节点，那么返回true</span></span><br><span class="line">    <span class="keyword">if</span>(visited[i] == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(visited[i] == <span class="number">1</span>) <span class="comment">// 当前节点已经在前面访问过，不可能构成环，直接返回false</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 其他情况就是没有访问过，标记正在访问</span></span><br><span class="line">    visited[i] = <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// 遍历所有节点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果有一条i-》j的边</span></span><br><span class="line">        <span class="keyword">if</span>(arr[i][j] == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dfs(j))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果前面没有return true，则表示i的所有相邻边都不能构成环，把i标记为已访问，返回false</span></span><br><span class="line">    visited[i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        ans=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> ( m == <span class="number">0</span> &amp;&amp; n == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">            arr[x][y] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 外层循环，确保所有节点都访问过</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 当前节点没有被访问</span></span><br><span class="line">            <span class="keyword">if</span>(visited[i] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 深度优先遍历当前节点</span></span><br><span class="line">                ans=dfs(i);</span><br><span class="line">                <span class="comment">// 如果找到环，输出yes，break</span></span><br><span class="line">                <span class="keyword">if</span>(ans)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ans 为false表示没有找到环，循环结束，输出no</span></span><br><span class="line">        <span class="keyword">if</span>(!ans)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(visited,<span class="number">0</span>,<span class="keyword">sizeof</span>(visited));</span><br><span class="line">        <span class="built_in">memset</span>(arr,<span class="number">0</span>,<span class="keyword">sizeof</span>(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>毕设项目bug总结</title>
    <url>/%E6%AF%95%E8%AE%BE%E9%A1%B9%E7%9B%AEbug%E6%80%BB%E7%BB%93.html</url>
    <content><![CDATA[<p>[toc]</p>
<h2 id="Content-type-39-multipart-form-data-boundary-685456864425903977582571-charset-UTF-8-39-not-supported"><a href="#Content-type-39-multipart-form-data-boundary-685456864425903977582571-charset-UTF-8-39-not-supported" class="headerlink" title="Content type &#39;multipart/form-data;boundary=--------------------------685456864425903977582571;charset=UTF-8&#39; not supported]"></a><code>Content type &#39;multipart/form-data;boundary=--------------------------685456864425903977582571;charset=UTF-8&#39; not supported]</code></h2><p>开发完接口后使用postman测试，发现报上面错误，刚开始以为是跨域不支持，后来发现不是。</p>
<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>是接口controller参数使用了<code>@RequestBody</code>注解，它要求必须通过实体对象传参，不能通过form-data表单提交的方式进行传参。</p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol>
<li>postman请求时改成json方式提交</li>
<li>去掉接口的<code>@RequestBody</code>注解</li>
</ol>
]]></content>
      <categories>
        <category>Springboot</category>
        <category>fabric</category>
      </categories>
      <tags>
        <tag>Springboot</tag>
        <tag>fabric</tag>
      </tags>
  </entry>
  <entry>
    <title>素数筛</title>
    <url>/%E7%B4%A0%E6%95%B0%E7%AD%9B.html</url>
    <content><![CDATA[<blockquote>
<p>description </p>
<blockquote>
<p>给你一个七位QQ号,输出小于这个QQ号的所有质数. 质数定义为在大于1的自然数中，除了1和它本身以外不再有其他因数。 </p>
</blockquote>
<p>input </p>
<blockquote>
<p>单组数据 输入一个QQ号(七位QQ号,因为输出数据过多,样例比较小) </p>
</blockquote>
<p>output </p>
<blockquote>
<p>从小到大输出所有小于这个QQ号的质数,一行一个 </p>
</blockquote>
<p>simple input </p>
<blockquote>
<p>20 </p>
</blockquote>
<p>simple output </p>
<blockquote>
<p>2  </p>
<p>3</p>
<p>5</p>
<p>7 </p>
<p>11 </p>
<p>13 </p>
<p>17 </p>
<p>19</p>
</blockquote>
</blockquote>
<p>最一般的写法，就是从2到n遍历，判断是不是素数，但是这个方法超时</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(isPrime(i))&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i*i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(n%i == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是一道素数筛裸题,最简单的筛法就是对于从小到大枚举每个数如果没有标记就是素数，<br>同时将他所有的倍数全都标记。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">boolean</span>[] notPrime = <span class="keyword">new</span> <span class="keyword">boolean</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!notPrime[i])&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                <span class="keyword">if</span>((<span class="keyword">long</span>)i*i &gt;= n)&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 从i*i开始，因为对于每个数都一直往后遍历其倍数。</span></span><br><span class="line">                <span class="comment">// 而i*i之前的i的倍数，如(i-1)*i，早已被i-1遍历，因此不需要再从2*i开始遍历</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = i*i; j &lt; n; j+=i)&#123;</span><br><span class="line">                    notPrime[j] = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>为什么只需要将素数的倍数标记为合数？</p>
<p>合数一定有一个质因数，因此只需要把素数的倍数标记为合数，一定能过够把所有的合数标记完，剩下的就是素数。</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>神奇炸弹</title>
    <url>/%E7%A5%9E%E5%A5%87%E7%82%B8%E5%BC%B9.html</url>
    <content><![CDATA[<blockquote>
<p>题目描述</p>
<blockquote>
<p>一种新型的炸弹，可以摧毁一个边长为R的正方形内的所有的目标。现在地图上有n个目标，用整数xi,yi(0&lt;=xi,yi&lt;=5000)表示目标在地图上的位置，每个目标都有一个价值0&lt;vi&lt;100。激光炸弹的投放是通过卫星定位的，但其有一个缺点，就是其爆破范围，即那个边长为R的正方形的边必须和x，y轴平行。若目标位于爆破正方形的边上，该目标将不会被摧毁。现在你的任务是计算一颗炸弹最多能炸掉地图上总价值为多少的目标。</p>
</blockquote>
<p>输入格式</p>
<blockquote>
<p>第一行为正整数n和正整数R，接下来的n行每行有3个正整数，分别表示xi,yi,vi<br>n&lt;=10000</p>
</blockquote>
<p>输出格式</p>
<blockquote>
<p>仅有一个正整数，表示一颗炸弹最多能炸掉地图上总价值为多少的目标（结果不会超过32767）。</p>
</blockquote>
<p>输入样例</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; &gt; 2 1</span><br><span class="line">&gt; &gt; 0 0 1</span><br><span class="line">&gt; &gt; 1 1 1</span><br><span class="line">&gt; &gt;</span><br></pre></td></tr></table></figure>
</blockquote>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>输出样例</p>
<blockquote>
<p>1</p>
</blockquote>
</blockquote>
<p>比较容易想到的做法是，将输入存储到一个大数组中，然后用边长为R的小数组遍历前面的大数组，找到每个小数组中的总价值，遍历取最大值。</p>
<p>这种做法的复杂在于每次小数组都要重新计算，而且我们发现后一个小数组和前一个小数组有很多重合部分，后一个数组可以通过前一个数组经过少量计算得到，类似于Rabin-karp，但也是比较复杂的。</p>
<p>这是一道前缀和题目，将数据组织成前缀和的形式，也就是数组中存储的不是单个点的value值，而是这个点之前的value值的和，那么很容易得到<code>value[i][j] = value[i-1][j] + value[i][j-1] -value[i-1][j-1]</code> ，那么同样地，当前所在位置之前边长为R的正方形内所有的value和为 <code>value[i][j] - value[i-r][j] - value[i][j-r] + value[i-r][j-r]</code> ，因为题目说了，正方形的边上不计算value值，所以是<code>i-r</code>，否则应该是<code>i-r-1</code>，因为我们的表示value值时，<code>value[i][j]</code> 是包含边的。这样一来代码就比较好写了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5050</span>;</span><br><span class="line"><span class="keyword">int</span> f[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,r;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;r);</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">    <span class="keyword">int</span> x,y,v;</span><br><span class="line">    <span class="comment">// 输入数据，存入数组。</span></span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;v);</span><br><span class="line">        f[x+<span class="number">1</span>][y+<span class="number">1</span>] = v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 重新组织数据</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5001</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">5001</span>; j++)&#123;</span><br><span class="line">            f[i][j] += f[i<span class="number">-1</span>][j] + f[i][j<span class="number">-1</span>] - f[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍历计算最大值</span></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = r; i &lt;= <span class="number">5001</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = r; j &lt;= <span class="number">5001</span>; j++)&#123;</span><br><span class="line">            ans = max(ans,f[i][j] - f[i-r][j] -f[i][j-r] + f[i-r][j-r] );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>前缀和</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA.html</url>
    <content><![CDATA[<h2 id="聊天机器人技术报告"><a href="#聊天机器人技术报告" class="headerlink" title="聊天机器人技术报告"></a>聊天机器人技术报告</h2><p>本项目复现现有开源项目，基于seq2seq+attention实现聊天机器人。</p>
<p>seq2seq模型简介：</p>
<p>经典的RNN模型，输入和输出个数有一定限制，但在聊天场景中，输入和输出个数肯定是不固定的，因此不能采用经典RNN，而采用seq2seq，Seq2Seq 是一种重要的 RNN 模型，也称为 Encoder-Decoder 模型，可以理解为一种 <strong>N×M</strong> 的模型。模型包含两个部分：<strong>Encoder</strong> 用于编码序列的信息，将任意长度的序列信息编码到一个向量 <strong>c</strong> 里。而 <strong>Decoder</strong> 是解码器，解码器得到上下文信息向量 <strong>c</strong> 之后可以将信息解码，并输出为序列。Seq2Seq 模型结构有很多种，下面是几种比较常见的：</p>
<p><strong>第一种</strong></p>
<p><img src="%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA/image-20211104105142690.png" alt="image-20211104105142690"></p>
<p><strong>第二种</strong></p>
<p><img src="%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA/image-20211104105153674.png" alt="image-20211104105153674"></p>
<p><strong>第三种</strong></p>
<p><img src="%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA/image-20211104105214745.png" alt="image-20211104105214745"></p>
<h3 id="编码器"><a href="#编码器" class="headerlink" title="编码器"></a>编码器</h3><p>这三种Seq2Seq模型的主要区别在于Decoder，他们的Encoder是一样的，下图是Encoder部分，Encoder的RNN接受输入x，最终输出一个编码所有信息的上下文变量c，中间的神经元没有输出。Decoder主要传入的是上下文向量c，然后解码出重要信息。</p>
<p><img src="%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA/image-20211104105726146.png" alt="image-20211104105726146"></p>
<p>Encoder与RNN区别不大，只是中间神经元没有输出。上下文变量c可以采用多种方式计算。如</p>
<script type="math/tex; mode=display">
C = h_N \\
c = q(h_N) \\
c = q(h_1,h_2,...,h_N)</script><h3 id="解码器"><a href="#解码器" class="headerlink" title="解码器"></a>解码器</h3><p>Decoder有多种不同的结构，这里主要介绍三种。</p>
<p><strong>第一种</strong></p>
<p><img src="%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA/image-20211104110208445.png" alt="image-20211104110208445"></p>
<p>上下文变量c当成是RNN的初始隐藏状态，输入到RNN中，后续只接受上一个神经元的隐藏层状态$h’$而不接收其他的输入x</p>
<p><strong>第二种</strong></p>
<p><img src="%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA/image-20211104110237978.png" alt="image-20211104110237978"></p>
<p>第二种Decoder有了自己的初始隐藏层状态$h’_0$ 不再把上下文向量c当成是RNN的初始隐藏层状态，而是当成RNN每一个神经元的输入。每个神经元都拥有相同的输入c</p>
<p><strong>第三种</strong></p>
<p><img src="%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA/image-20211104110247009.png" alt="image-20211104110247009"></p>
<p>第三种Decoder与第二种类似，但是在输入部分多了上一个神经元的输出y‘，即每一个神经元的输入包括：上一个神经元的隐藏层向量h’，上一个神经元的输出y‘，当前的输入c。对于第一个神经元的输入$y’_0$ 通常是句子起始标志位的embedding向量。</p>
<h3 id="Teacher-Forcing"><a href="#Teacher-Forcing" class="headerlink" title="Teacher Forcing"></a>Teacher Forcing</h3><p>针对第三种模型，他的当前输出会传递给下一个神经元作为输入，如果当前神经元的输出是错误的，那么下一个神经元的输出也很容易出错，导致错误会一直传递下去。</p>
<p>而Teacher Forcing可以在一定程度上缓解上面的问题，在训练Seq2Seq模型时，Decoder的每一个神经元并非一定使用上一个神经元的输出，而是有一定的比例采用正确的序列作为输入。</p>
<p><img src="%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA/image-20211104111442432.png" alt="image-20211104111442432"></p>
<h3 id="attention"><a href="#attention" class="headerlink" title="attention"></a>attention</h3><p>在Seq2Seq模型，Encoder总是将源句子的所有信息编码到一个固定长度的上下文变量c中，然后在Decoder编码过程中向量c都是不变的。这存在不少缺陷：</p>
<ul>
<li>对于比较长的句子，很难用一个定长的向量c完全表示其意义。</li>
<li>RNN存在长序列梯度消失的问题，只使用最后一个神经元得到的向量c效果不理想</li>
<li>与人类的注意力方式不同，即人类在阅读文章的时候，会把注意力放在当前的句子上</li>
</ul>
<p>Attention即注意力机制，是一种将模型的注意力放在当前翻译单词上的一种机制，例如翻译“I have a cat”时，翻译到“我”时，要将注意力放在原句的“I”上，翻译到“猫”时，要将注意力放在原句的“cat”上。使用Attention后，Decoder的输入就不是固定的上下文变量c了，而是会根据当前翻译的信息计算当前的c。</p>
<p><img src="%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA/image-20211104112443394.png" alt="image-20211104112443394"></p>
<p>本文使用Bahdanau attention机制，Bahdanau本质是一种 <strong>加性attention机制</strong>，将decoder的隐状态和encoder所有位置输出通过线性组合对齐，得到context向量，用于改善序列到序列的翻译模型。</p>
<p><img src="%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA/image-20211104113139529.png" alt="image-20211104113139529"></p>
<h3 id="关键代码分析："><a href="#关键代码分析：" class="headerlink" title="关键代码分析："></a>关键代码分析：</h3><p><strong>Encoder</strong>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个Encoder类，实现Encoder-Decoder结构中的Encoder部分</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Encoder</span><span class="params">(tf.keras.Model)</span>:</span></span><br><span class="line">  <span class="comment"># 定义初始化函数，将形参初始化</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, vocab_size, embedding_dim, enc_units, batch_sz)</span>:</span></span><br><span class="line">    super(Encoder, self).__init__()</span><br><span class="line">    self.batch_sz = batch_sz</span><br><span class="line">    self.enc_units = enc_units</span><br><span class="line">    self.embedding = tf.keras.layers.Embedding(vocab_size, embedding_dim)</span><br><span class="line">    self.gru = tf.keras.layers.GRU(self.enc_units,return_sequences=<span class="literal">True</span>,return_state=<span class="literal">True</span>,</span><br><span class="line">                                   recurrent_initializer=<span class="string">'glorot_uniform'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 定义执行函数，所有的算法逻辑执行都在call函数中完成</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, x, hidden)</span>:</span></span><br><span class="line">    <span class="comment"># 对输入的序列进行embedding</span></span><br><span class="line">    x = self.embedding(x)</span><br><span class="line">    <span class="comment"># 将embedding的结果输入gru神经网络层，得到输出结果和神经元状态</span></span><br><span class="line">    <span class="comment"># gru和lstm类似，能够解决长序列下的梯度消失和梯度爆炸问题</span></span><br><span class="line">    output, state = self.gru(x, initial_state = hidden)</span><br><span class="line">    <span class="comment"># 返回输出结果和神经元状态</span></span><br><span class="line">    <span class="keyword">return</span> output, state</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 进入隐藏层初始化函数</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize_hidden_state</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># 使用全零矩阵进行初始化</span></span><br><span class="line">    <span class="keyword">return</span> tf.zeros((self.batch_sz, self.enc_units))</span><br></pre></td></tr></table></figure>
<p><strong>Attention</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BahdanauAttention</span><span class="params">(tf.keras.Model)</span>:</span></span><br><span class="line">  <span class="comment"># 定义初始化函数，将形参初始化</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, units)</span>:</span></span><br><span class="line">    super(BahdanauAttention, self).__init__()</span><br><span class="line">    <span class="comment"># 分别使用神经网络全连接层初始化W1 W2 V，作为计算Q K V的算法</span></span><br><span class="line">    self.W1 = tf.keras.layers.Dense(units)</span><br><span class="line">    self.W2 = tf.keras.layers.Dense(units)</span><br><span class="line">    self.V = tf.keras.layers.Dense(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 定义执行函数，所有的算法逻辑执行都在call函数中完成</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, query, values)</span>:</span></span><br><span class="line">    <span class="comment"># 将query序列增加一个维度</span></span><br><span class="line">    hidden_with_time_axis = tf.expand_dims(query, <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 使用W1 W2 V计算attention值，也就是score。在计算的过程中，将W1和W2d的计算结果进行了一次非线性变换</span></span><br><span class="line">    score = self.V(tf.nn.tanh(self.W1(values) + self.W2(hidden_with_time_axis)))</span><br><span class="line">    <span class="comment"># 使用softmax将score中的元素值按行转换成概率分布作为attention的权重值</span></span><br><span class="line">    attention_weights = tf.nn.softmax(score, axis=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 将获得attention权重与输入的序列相乘得到语境向量</span></span><br><span class="line">    context_vector = attention_weights * values</span><br><span class="line">    <span class="comment"># 将语境向量按行求和，得到最后的语境向量</span></span><br><span class="line">    context_vector = tf.reduce_sum(context_vector, axis=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 最后返回语境向量和attention权重值</span></span><br><span class="line">    <span class="keyword">return</span> context_vector, attention_weights</span><br></pre></td></tr></table></figure>
<p><strong>Decoder</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个Decoder类，实现Encoder-Decoder结构中的Decoder部分</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decoder</span><span class="params">(tf.keras.Model)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, vocab_size, embedding_dim, dec_units, batch_sz)</span>:</span></span><br><span class="line">    <span class="comment"># 定义初始化函数，将形参初始化</span></span><br><span class="line">    super(Decoder, self).__init__()</span><br><span class="line">    <span class="comment"># 初始化batch_size</span></span><br><span class="line">    self.batch_sz = batch_sz</span><br><span class="line">    <span class="comment"># 初始化神经元数量</span></span><br><span class="line">    self.dec_units = dec_units</span><br><span class="line">    <span class="comment"># 初始化embedding层</span></span><br><span class="line">    self.embedding = tf.keras.layers.Embedding(vocab_size, embedding_dim)</span><br><span class="line">    <span class="comment"># 初始化gru</span></span><br><span class="line">    self.gru = tf.keras.layers.GRU(self.dec_units, return_sequences=<span class="literal">True</span>, return_state=<span class="literal">True</span>,</span><br><span class="line">                                   recurrent_initializer=<span class="string">'glorot_uniform'</span>)</span><br><span class="line">    <span class="comment"># 初始化全连接层</span></span><br><span class="line">    self.fc = tf.keras.layers.Dense(vocab_size)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实例化一个BahdanauAttention</span></span><br><span class="line">    self.attention = BahdanauAttention(self.dec_units)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 定义执行函数，所有的算法逻辑执行都在call函数中完成</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, x, hidden, enc_output)</span>:</span></span><br><span class="line">    <span class="comment"># 首先使用BahdanauAttention对encode的输出和隐藏状态进行attention计算，输出语境向量和attention权重</span></span><br><span class="line">    context_vector, attention_weights = self.attention(hidden, enc_output)</span><br><span class="line">    <span class="comment"># 对decode的输入序列进行embedding计算</span></span><br><span class="line">    x = self.embedding(x)</span><br><span class="line">    <span class="comment"># 将语境向量增加一个维度后与embedding的结果拼接在一起</span></span><br><span class="line">    x = tf.concat([tf.expand_dims(context_vector, <span class="number">1</span>), x], axis=<span class="number">-1</span>)</span><br><span class="line">    <span class="comment"># 将拼接后的结构输入到gru神经网络层，然后返回输出结果和神经元状态</span></span><br><span class="line">    output, state = self.gru(x)</span><br><span class="line">    <span class="comment"># 将输出结果进行维度变换</span></span><br><span class="line">    output = tf.reshape(output, (<span class="number">-1</span>, output.shape[<span class="number">2</span>]))</span><br><span class="line">    <span class="comment"># 将维度变换后的结果输入到输出层，也就是一个全连接神经网络层</span></span><br><span class="line">    output_x = self.fc(output)</span><br><span class="line">    <span class="comment"># 最后返回输出结果，神经元状态和attention的权重</span></span><br><span class="line">    <span class="keyword">return</span> output_x, state, attention_weights</span><br></pre></td></tr></table></figure>
<p><strong>训练函数</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个训练函数，以完成对训练集数据的循环训练</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_step</span><span class="params">(inp, targ, targ_lang,enc_hidden)</span>:</span></span><br><span class="line">  <span class="comment"># 初始化loss</span></span><br><span class="line">  loss = <span class="number">0</span></span><br><span class="line">  <span class="comment"># 当我们使用tf.keras.model进行构造模型时，一般采用tf.GradientTape进行半手工计算梯度，然后将梯度给</span></span><br><span class="line">  <span class="comment"># 优化器进行参数优化。with xxx as : 代表以下的操作都是在同一个spacename下进行的</span></span><br><span class="line">  <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">    <span class="comment"># 首先将训练集输入输出序列和enc_hidden的初始化作为encoder的输入</span></span><br><span class="line">    enc_output, enc_hidden = encoder(inp, enc_hidden)</span><br><span class="line">    <span class="comment"># 然后dec_hidden共享enc_hidden的值</span></span><br><span class="line">    dec_hidden = enc_hidden</span><br><span class="line">    <span class="comment"># 使用字典中的start索引构建一个decoder的输入，也就是意味着第一个词的开始</span></span><br><span class="line">    dec_input = tf.expand_dims([targ_lang.word_index[<span class="string">'start'</span>]] * BATCH_SIZE, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 然后接着开始进行强制循环，把输出的词作为下一个循环的decoder的输入</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> range(<span class="number">1</span>, targ.shape[<span class="number">1</span>]):</span><br><span class="line">      <span class="comment"># 把输出的词作为下一个循环的decoder的输入</span></span><br><span class="line">      predictions, dec_hidden, _ = decoder(dec_input, dec_hidden, enc_output)</span><br><span class="line">      <span class="comment"># 调用loss function计算训练的loss</span></span><br><span class="line">      loss += loss_function(targ[:, t], predictions)</span><br><span class="line">      <span class="comment"># 使用标注数据来构建decoder的输入</span></span><br><span class="line">      dec_input = tf.expand_dims(targ[:, t], <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 计算批量训练的平均loss</span></span><br><span class="line">  batch_loss = (loss / int(targ.shape[<span class="number">1</span>]))</span><br><span class="line">  <span class="comment"># 构造encoder和decoder中可以被优化的参数</span></span><br><span class="line">  variables = encoder.trainable_variables + decoder.trainable_variables</span><br><span class="line">  <span class="comment"># 计算梯度</span></span><br><span class="line">  gradients = tape.gradient(loss, variables)</span><br><span class="line">  <span class="comment"># 使用梯度优化可以被优化的参数</span></span><br><span class="line">  optimizer.apply_gradients(zip(gradients, variables))</span><br><span class="line">  <span class="comment"># 返回批量loss</span></span><br><span class="line">  <span class="keyword">return</span> batch_loss</span><br></pre></td></tr></table></figure>
<p><strong>数据处理过程</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个训练处理函数，就是在训练的前后分别加上start和end</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preprocess_sentence</span><span class="params">(w)</span>:</span></span><br><span class="line">    w = <span class="string">'start '</span> + w + <span class="string">' end'</span></span><br><span class="line">    <span class="comment"># print(w)</span></span><br><span class="line">    <span class="keyword">return</span> w</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取训练集的数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_dataset</span><span class="params">(path, num_examples)</span>:</span></span><br><span class="line">    <span class="comment"># 打开数据集文件，按行读取，并去除换行符</span></span><br><span class="line">    lines = io.open(path, encoding=<span class="string">'UTF-8'</span>).read().strip().split(<span class="string">'\n'</span>)</span><br><span class="line">    <span class="comment"># 循环为每行读取的数据加上start和end</span></span><br><span class="line">    word_pairs = [[preprocess_sentence(w) <span class="keyword">for</span> w <span class="keyword">in</span> l.split(<span class="string">'\t'</span>)] <span class="keyword">for</span> l <span class="keyword">in</span> lines[:num_examples]]</span><br><span class="line">    <span class="keyword">return</span> zip(*word_pairs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个最大长度求取函数，用于求取最长语句的长度</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_length</span><span class="params">(tensor)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> max(len(t) <span class="keyword">for</span> t <span class="keyword">in</span> tensor)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义read_data函数，读取训练集的数据，并对数据进行tokenize处理</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_data</span><span class="params">(path, num_examples)</span>:</span></span><br><span class="line">    <span class="comment"># 将数据进行拆分，也就是拆分成输入集和输出集</span></span><br><span class="line">    input_lang, target_lang = create_dataset(path, num_examples)</span><br><span class="line">    <span class="comment"># 分别对输入数据集和输出数据集进行字符转数字的处理，返回处理后的数字向量和词典</span></span><br><span class="line">    input_tensor, input_token = tokenize(input_lang)</span><br><span class="line">    target_tensor, target_token = tokenize(target_lang)</span><br><span class="line">    <span class="comment"># 最后返回处理后的数字向量和词典</span></span><br><span class="line">    <span class="keyword">return</span> input_tensor, input_token, target_tensor, target_token</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义字符转换函数，其作用是将字符转换为在字典中对应的索引数字</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tokenize</span><span class="params">(lang)</span>:</span></span><br><span class="line">    <span class="comment"># 实例化一个tokenizer</span></span><br><span class="line">    lang_tokenizer = tf.keras.preprocessing.text.Tokenizer(num_words=gConfig[<span class="string">'enc_vocab_size'</span>], oov_token=<span class="number">3</span>)</span><br><span class="line">    <span class="comment"># 使用fit_on_texts的方法在目标数据集上训练，其实就是构建一个数据集的词典</span></span><br><span class="line">    lang_tokenizer.fit_on_texts(lang)</span><br><span class="line">    <span class="comment"># 使用texts_to_sequences对目标数据集进行字符到数字的转换</span></span><br><span class="line">    tensor = lang_tokenizer.texts_to_sequences(lang)</span><br><span class="line">    <span class="comment"># 最后对转换后的数字向量进行padding</span></span><br><span class="line">    tensor = tf.keras.preprocessing.sequence.pad_sequences(tensor, maxlen=max_length_inp, padding=<span class="string">'post'</span>)</span><br><span class="line">    <span class="comment"># 返回数字向量和词典对象</span></span><br><span class="line">    <span class="keyword">return</span> tensor, lang_tokenizer</span><br></pre></td></tr></table></figure>
<p><strong>训练</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义训练函数，对训练集数据进行循环训练</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"Preparing data in %s"</span> % gConfig[<span class="string">'train_data'</span>])</span><br><span class="line">    <span class="comment"># 计算将全部训练集数据训练完一遍所需的步数</span></span><br><span class="line">    steps_per_epoch = len(input_tensor) // gConfig[<span class="string">'batch_size'</span>]</span><br><span class="line">    print(steps_per_epoch) <span class="comment">#390</span></span><br><span class="line">    <span class="comment"># 对encoder的隐藏层状态进行初始化</span></span><br><span class="line">    enc_hidden = seq2seqModel.encoder.initialize_hidden_state()</span><br><span class="line">    <span class="comment"># 读取模型保存在文件夹中的数据</span></span><br><span class="line">    checkpoint_dir = gConfig[<span class="string">'model_data'</span>]</span><br><span class="line">    ckpt = tf.io.gfile.listdir(checkpoint_dir)</span><br><span class="line">    checkpoint_prefix = os.path.join(checkpoint_dir, <span class="string">"ckpt"</span>)</span><br><span class="line">    <span class="comment"># 判断是否存在已经训练好的数据模型，如果存在就加载已有的模型并继续进行训练</span></span><br><span class="line">    <span class="keyword">if</span> ckpt:</span><br><span class="line">        print(<span class="string">"reload pretrained model"</span>)</span><br><span class="line">        seq2seqModel.checkpoint.restore(tf.train.latest_checkpoint(checkpoint_dir))</span><br><span class="line">    <span class="comment"># 赋值需要进行随机打乱的数据数量，我们这里使用全局全打乱</span></span><br><span class="line">    BUFFER_SIZE = len(input_tensor)</span><br><span class="line">    <span class="comment"># 使用tf.data.Dataset对训练数据进行一系列的处理，包括数据的随机打乱</span></span><br><span class="line">    dataset = tf.data.Dataset.from_tensor_slices((input_tensor, target_tensor)).shuffle(BUFFER_SIZE)</span><br><span class="line">    <span class="comment"># 使用batch方法，将数据按照batch_size的大小进行切割，将余数丢掉</span></span><br><span class="line">    dataset = dataset.batch(BATCH_SIZE, drop_remainder=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 获取训练开始时间</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    current_steps = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 开始进行循环训练，设置100次</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(EPOCH):</span><br><span class="line">        <span class="comment"># 获取每个epoch开始的时间</span></span><br><span class="line">        start_time_epoch = time.time()</span><br><span class="line">        total_loss = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 使用enumerate方法穷举遍历所有的批数据，并调用seq2seqModel中的train_step函数进行训练</span></span><br><span class="line">        <span class="keyword">for</span> (batch, (inp, targ)) <span class="keyword">in</span> enumerate(dataset.take(steps_per_epoch)):</span><br><span class="line">            batch_loss = seq2seqModel.train_step(inp, targ, target_token, enc_hidden)</span><br><span class="line">            total_loss += batch_loss</span><br><span class="line">            print(batch_loss.numpy())</span><br><span class="line">        <span class="comment"># 计算每一步消耗的时间</span></span><br><span class="line">        step_time_epoch = (time.time() - start_time_epoch) / steps_per_epoch</span><br><span class="line">        <span class="comment"># 计算每一步的平均loss</span></span><br><span class="line">        step_loss = total_loss / steps_per_epoch</span><br><span class="line">        <span class="comment"># 计算当前训练的步数</span></span><br><span class="line">        current_steps += steps_per_epoch</span><br><span class="line">        <span class="comment"># 计算全部训练每步的平均时间</span></span><br><span class="line">        step_time_total = (time.time() - start_time) / current_steps</span><br><span class="line">        <span class="comment"># 打印出相关的参数</span></span><br><span class="line">        print(<span class="string">'训练总步数: &#123;&#125; 每步耗时: &#123;&#125;  最新每步耗时: &#123;&#125; 最新每步loss &#123;:.4f&#125;'</span>.format(</span><br><span class="line">            current_steps, step_time_total, step_time_epoch, step_loss.numpy()))</span><br><span class="line">        <span class="comment"># 保存训练完成的模型</span></span><br><span class="line">        seq2seqModel.checkpoint.save(file_prefix=checkpoint_prefix)</span><br><span class="line">        <span class="comment"># 刷新输出屏幕</span></span><br><span class="line">        sys.stdout.flush()</span><br></pre></td></tr></table></figure>
<p><strong>45w+条数据</strong>，即45w+条对话，<strong>设置epoch为100</strong>，<strong>batch_size=128</strong>，多次训练，一共训练了130轮。最后结果<strong>loss在1.4左右</strong>。</p>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA/image-20211104120135014.png" alt="image-20211104120135014"></p>
<p>使用源项目作者提供的交互网页测试项目，能进行简单的沟通，多半能正常交流，但有些结果也会答非所问。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://www.jianshu.com/p/80436483b13b" target="_blank" rel="noopener">Seq2Seq 模型详解 - 简书 (jianshu.com)</a></p>
<p><a href="https://blog.csdn.net/daniellibin/article/details/103290169" target="_blank" rel="noopener">基于seq2seq的中文聊天机器人（一）_daniellibin的博客-CSDN博客</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/%E8%93%9D%E6%A1%A5%E6%9D%AF.html</url>
    <content><![CDATA[<ol>
<li>在nextInt()后面使用nextLine()后出错，因为nextInt()遇到回车就停止了，而换行符留在缓冲区内，因此nextInt()后的第一个nextLine()读入了换行符。解决方式：在nextInt()后面加一行nextLine()读取换行符</li>
<li>基本数据类型 int long等都是不对称的，如int~[-2^31, 2^31-1]，对负数求相反数时会移除，因此需要转为long再继续。</li>
</ol>
<h3 id="闰年判断"><a href="#闰年判断" class="headerlink" title="闰年判断"></a>闰年判断</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">year % <span class="number">400</span> == <span class="number">0</span> || year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>能被400整除 </p>
<p>或者</p>
<p>能被4整除但不能被100整除</p>
<h3 id="进制转化"><a href="#进制转化" class="headerlink" title="进制转化"></a>进制转化</h3><ol>
<li><p>十进制 —-&gt; 2 8 16 其他进制</p>
<p><code>public static String toBinaryString(int i)</code></p>
<p><code>public static String toOctalString(int i)</code></p>
<p><code>public static String toHexString(int i)</code></p>
<p><code>public static String toString(int i, int radix)</code></p>
<p>这个函数有一个限制，即<code>radix &gt;= 2 &amp;&amp; radix &lt;= 36</code>，且使用字符表示时用的是小写字母。</p>
</li>
<li><p>其他进制转十进制</p>
<p><code>public static int parseInt(String s, int radix) throws NumberFormatException</code></p>
<p>同样限制<code>radix &gt;= 2 &amp;&amp; radix &lt;= 36</code>。可能因为字母只有26个。</p>
</li>
</ol>
<h3 id="字符串排序"><a href="#字符串排序" class="headerlink" title="字符串排序"></a>字符串排序</h3><p>​    compareTo(String s)</p>
<p>java 位宽输出</p>
<p>并查集 ： HDU1232， POJ1988， POJ1182， POJ1703</p>
<p>前缀和：数列的平方和，</p>
<p>Lucas卢卡斯定理</p>
<h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">pow</span><span class="params">(<span class="keyword">double</span> n, <span class="keyword">long</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(; m &gt; <span class="number">0</span>; m &gt;&gt;= <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>((m &amp; <span class="number">1</span>) == <span class="number">1</span>)&#123;</span><br><span class="line">            res *= n;</span><br><span class="line">        &#125;</span><br><span class="line">        n *= n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><ol>
<li><p>求逆元</p>
<p>（x±y）% q = (x % q ± y % q) % q</p>
<p>​    x<em>y % q = (x % q \</em> y % q) % q</p>
<p>加减乘对取余是封闭的，但是除法不支持，那么如何计算( x / y) % q呢？  利用<strong>费马小定理</strong></p>
<p><img src="%E8%93%9D%E6%A1%A5%E6%9D%AF/image-20220121213622020.png" alt="image-20220121213622020"></p>
</li>
<li></li>
</ol>
<h3 id="卡特兰数"><a href="#卡特兰数" class="headerlink" title="卡特兰数"></a>卡特兰数</h3><ol>
<li>n个数的入栈出栈序列数</li>
<li></li>
</ol>
<h2 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h2><p>key word： 线性表，连续若干个节点 ， 和</p>
<p>leetcode.1004 最大连续1的个数III</p>
<h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><p>leetcode.1004 最大连续1的个数III</p>
<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>特殊情况处理 <code>dummy.next = head</code></p>
<h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><p>路径压缩</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x != root[x])</span><br><span class="line">        root[x] = find(root[x]);</span><br><span class="line">    <span class="keyword">return</span> root[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>装箱与拆箱</title>
    <url>/%E8%A3%85%E7%AE%B1%E4%B8%8E%E6%8B%86%E7%AE%B1.html</url>
    <content><![CDATA[<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>8种基本数据类型，char,byte,short , int , long ,float ,double , boolean</p>
<p>每一种都有对应的包装类</p>
<h2 id="值类型和引用类型"><a href="#值类型和引用类型" class="headerlink" title="值类型和引用类型"></a>值类型和引用类型</h2><p><strong>值类型</strong></p>
<ol>
<li>变量名指向具体的值</li>
<li>变量声明后，立即分配存储空间，一般在栈上</li>
<li>使用前需要赋值初始化，判断相等使用==</li>
</ol>
<p><strong>引用类型</strong></p>
<ol>
<li>变量名指向存储内容的地址</li>
<li>变量声明后不会分配内存，只是存储</li>
<li>使用时可以是null，判断相等用equals方法</li>
</ol>
<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>装箱</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer a = <span class="number">10</span>; <span class="comment">// &lt;==&gt; Integer a = Integer.valueOf(10)</span></span><br></pre></td></tr></table></figure>
<p>int型数据10赋值给Integer 变量时，会自动调用其valueOf方法，返回对应的包装类，进而赋值给变量a</p>
<p>拆箱</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = a; <span class="comment">// &lt;===&gt; int b = a.intValue()</span></span><br></pre></td></tr></table></figure>
<p>Integer类变量a赋值给int 型变量b时，a会自动调用其intValue方法，返回int型数值赋值给b。</p>
<p>装箱过程是通过调用包装器的valueOf方法实现的，而拆箱过程是通过调用包装器的 xxxValue方法实现的，xxx是基本数据类型。</p>
<h3 id="eg1"><a href="#eg1" class="headerlink" title="eg1"></a>eg1</h3><ol>
<li>下面结果输出是</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">        Integer i1 = <span class="number">100</span>;</span><br><span class="line">        Integer i2 = <span class="number">100</span>;</span><br><span class="line">        Integer i3 = <span class="number">200</span>;</span><br><span class="line">        Integer i4 = <span class="number">200</span>;</span><br><span class="line">         </span><br><span class="line">        System.out.println(i1==i2); <span class="comment">// true</span></span><br><span class="line">        System.out.println(i3==i4); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>引用类型变量使用==是判断类地址啊，明明是四个不同的类，为什么i1会等于i2呢？</p>
<p>类似于String类型 字符串常量池，Integer类中也有整型常量池。</p>
<p>在装箱时，调用valueOf方法源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Integer中有个静态内部类IntegerCache，里面有个cache[],也就是Integer常量池，常量池的大小为一个字节[-128~127]，在JDK6之后，可以通过JVM的启动参数设置最大值（<code>-XX:AutoBoxCacheMax=size</code>）。</p>
<p>因此，在创建i1时，会在常量池中初始化出来，后面的相同值的Integer不再实例化，直接指向常量池中的对象。因此<code>i1 = i2</code>，而i3和i4不在常量池范围内，因此每次都会实例化一个对象。</p>
<p><strong>注意</strong></p>
<p>与String类似，只有自动装箱的时候会只有一个对象。若创建对象时使用了new关键字，则还是会在堆中创建一个对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer i1 = <span class="keyword">new</span> Integer(<span class="number">100</span>); <span class="comment">// 实际上这个方法从jdk9开始已经弃用，官方推荐valueOf()方法</span></span><br><span class="line">Integer i2 = <span class="keyword">new</span> Integer(<span class="number">100</span>); <span class="comment">// 不触发装箱过程</span></span><br><span class="line">System.out.println(i1 == i2); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>除了Integer，其他整数类型（byte,short,long）对应包装类也都有常量池，大小都是[-128,127]，且大小不能通过参数改变，<strong>可以看出，Byte的所有值都在缓存区中，用它生成的相同值对象都是相等的。</strong> 同时Character对象也有常量池，大小是[0,127]。</p>
<p><strong>浮点数类型没有，因为在一个区间内整型数是有限的，但浮点数是无限多的。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Boolean i1 = <span class="keyword">false</span>;</span><br><span class="line">Boolean i2 = <span class="keyword">false</span>;</span><br><span class="line">Boolean i3 = <span class="keyword">true</span>;</span><br><span class="line">Boolean i4 = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(i1==i2); <span class="comment">// true</span></span><br><span class="line">System.out.println(i3==i4); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>Boolean类的valueOf方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static Boolean valueOf(boolean b) &#123;</span><br><span class="line">	return (b ? TRUE : FALSE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而TRUE和FALSE：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Boolean TRUE = <span class="keyword">new</span> Boolean(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Boolean FALSE = <span class="keyword">new</span> Boolean(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure>
<h3 id="eg2"><a href="#eg2" class="headerlink" title="eg2"></a>eg2</h3><p>在重载方法中，可能出现问题：</p>
<p><img src="%E8%A3%85%E7%AE%B1%E4%B8%8E%E6%8B%86%E7%AE%B1/image-20210817220049244.png" alt="image-20210817220049244"></p>
<p>remove有上图两个重载方法，那下面的代码执行结果是什么？remove掉的是值为2的还是索引为2的？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">Integer a = <span class="number">2</span>;</span><br><span class="line">Integer b = <span class="number">1</span>;</span><br><span class="line">list.add(a);</span><br><span class="line">list.add(b);</span><br><span class="line">list.remove(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<p>在这种情况下，编译器不会自动拆装箱，默认2是int类型，因此调用的是remove掉索引为2对应的元素。</p>
<p>如果要删除值为2 的对象，应该调用的方法是：<code>list.remove(a)</code> ，即传入Object对象Integer。</p>
<h3 id="eg3"><a href="#eg3" class="headerlink" title="eg3"></a>eg3</h3><p>下面的代码使用==比较时，会发生Integer的拆箱然后比较int数值，还是发生int装箱生成Integer比较地址值？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer i1 = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">int</span> i2 = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">boolean</span> compared = (i1 == i2);</span><br></pre></td></tr></table></figure>
<p>当 “==”运算符的两个操作数都是 包装器类型的引用，则是比较指向的是否是同一个对象，而如果其中有一个操作数是表达式(即包含算术运算)则比较的是数值，即会触发自动拆箱的过程。</p>
<p><strong>对于包装器类型，equals方法并不会进行类型转换</strong></p>
<p>Integer的equals方法只有参数是Integer类型时才有可能返回true，</p>
<p>当参数是基本类型int时，编译器会给int自动装箱成Integer类，然后再进行比较。：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Integer) &#123;</span><br><span class="line">        <span class="keyword">return</span> value == ((Integer)obj).intValue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>相类似的还有String等，只有同类型的或者子类做参数比较才有可能返回true，否则都是false。因为有<code>instance of</code>语句。</p>
<p>算术运算会触发装箱与拆箱过程</p>
<h3 id="eg4"><a href="#eg4" class="headerlink" title="eg4"></a>eg4</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer a = <span class="number">1</span>;</span><br><span class="line">Integer b = <span class="number">2</span>;</span><br><span class="line">Integer c = <span class="number">3</span>;</span><br><span class="line">Integer d = <span class="number">3</span>;</span><br><span class="line">Integer e = <span class="number">321</span>;</span><br><span class="line">Integer f = <span class="number">321</span>;</span><br><span class="line">Long g = <span class="number">3L</span>;</span><br><span class="line">Long h = <span class="number">2L</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(c==d); <span class="comment">// true</span></span><br><span class="line">System.out.println(e==f); <span class="comment">// false</span></span><br><span class="line">System.out.println(c==(a+b)); <span class="comment">// true 算术运算会触发装箱与拆箱过程</span></span><br><span class="line">System.out.println(c.equals(a+b)); <span class="comment">// true</span></span><br><span class="line">System.out.println(g==(a+b)); <span class="comment">// true</span></span><br><span class="line">System.out.println(g.equals(a+b)); <span class="comment">// false</span></span><br><span class="line">System.out.println(g.equals(a+h)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>第一个和第二个前面提到了，没有问题。</p>
<p>第三个，算术运算会触发装箱与拆箱过程，a+b的过程因为涉及算术运算，会调用a和b的intValue函数，拆箱后计算，结果仍然是int型，int型（a+b） 和 Integer对象c 用<code>==</code> 判断时会将c拆箱，判断数值是否相等。</p>
<p>第四个 (a+b)触发自动拆箱计算，结果是int类型，当int类型传给Integer.equals()方法时，会触发自动装箱，将(a+b)装箱后比较，因此是true</p>
<p>第五个跟第三个是一样的。</p>
<p>第六个(a+b)装箱后是Integer类型，跟long类型比较时是false。</p>
<p>第七个(a+h)拆箱计算时会自动类型转换，最后结果是较大的一个long型，装箱后是相同类型且值相同因此结果是true。</p>
<h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><ol>
<li>int 明明不是Object对象，为什么可以在c.equals()方法中传入，而且结果还是true！</li>
</ol>
<p><img src="%E8%A3%85%E7%AE%B1%E4%B8%8E%E6%8B%86%E7%AE%B1/image-20210817222804724.png" alt="image-20210817222804724"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Integer) &#123;</span><br><span class="line">        <span class="keyword">return</span> value == ((Integer)obj).intValue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当参数是基本类型int时，编译器会给int自动装箱成Integer类，然后再进行比较。</p>
]]></content>
      <categories>
        <category>源码</category>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>源码</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93.html</url>
    <content><![CDATA[<h2 id="基于零知识证明的账户模型区块链系统隐私保护研究"><a href="#基于零知识证明的账户模型区块链系统隐私保护研究" class="headerlink" title="基于零知识证明的账户模型区块链系统隐私保护研究"></a>基于零知识证明的账户模型区块链系统隐私保护研究</h2><p>​    <a href="E:\lzx\blockchain\Zero-Knowledge Proof\基于零知识证明的账户模型区块链系统隐私保护研究_管章双.pdf" target="_blank" rel="noopener">原文</a> 山大 2020 软工 硕</p>
<ul>
<li><p>现有ZKProof大都针对UTXO模型，如zerocash，zerocoin，Monero、Dash、CoinJoin，但是针对账户模型的隐私保护方案很少，<a href="E:\lzx\blockchain\Zero-Knowledge Proof\An_Efficient_NIZK_Scheme_for_Privacy-Preserving_Transactions_Over_Account-Model_Blockchain.pdf" target="_blank" rel="noopener">DSC</a>是一个，本文提出基于zksnarks的BlockMaze，<strong>第一个从底层实现隐私保护的基于账户模型的区块链</strong> （是一个全新的系统），同时保护交易金额、发送方、接收方、账户余额。提出了账户模型区块链的双余额模型，余额由明文余额和零知识余额组成。为了隐藏交易发送方和接收方之间的转账关系，设计了基于隐私保护交易的两步资金转移操作。</p>
<p><img src="%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/image-20211106151627921.png" alt="image-20211106151627921"></p>
</li>
</ul>
<p>同态加密：ELGamal。全同态加密方案因为效率较低，不能在区块链中使用。</p>
<p><img src="%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/image-20211106152657303.png" alt="image-20211106152657303"></p>
<p><img src="%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/image-20211108110353192.png" alt="image-20211108110353192"></p>
<p>问题：</p>
<ul>
<li>提出了双账户模型，一个明文余额，一个零知识余额，两个余额可以相互转换。总余额是两者的和，交易使用零知识余额进行。zk_balanceA由A的拥有者私密存储（那为什么不 区块链中存储加密后的余额，明文余额私密存储呢）</li>
<li>共识的过程有零知识证明吗？根据华为例子来看，验证在chaincode进行，然后提交，根没有使用零知识证明没有其他不同。在联盟链场景中，或者在教学平台上，只有个别受信任设备充当节点，是否需要零知识证明。</li>
</ul>
<ul>
<li>Merkle Patricia Tree（又称为Merkle Patricia Trie）是一种经过改良的、融合了默克尔树和前缀树两种树结构优点的数据结构，是以太坊中用来组织管理账户数据、生成交易集合哈希的重要数据结构。</li>
</ul>
<h2 id="zkSNARKs-in-a-Nutshell"><a href="#zkSNARKs-in-a-Nutshell" class="headerlink" title="zkSNARKs in a Nutshell"></a>zkSNARKs in a Nutshell</h2><p>Christian Reitwiebner ——solidity 创建者</p>
<p>zkSNARKs有四个主要部分：</p>
<ol>
<li><p>Encoding as a polynomial problem</p>
<p>要被检查的问题被编译成多项式的二次等式，t(x)h(x) = w(x)v(x),当且仅当程序正确执行。证明者要使验证者相信等式成立</p>
</li>
<li><p>Succinctness by random sampling</p>
<p>验证者选择一个随机评估点s，验证在该点t(s)h(s) = w(s)v(s)是否成立。这样做使多项式乘法简化成简单的标量乘法。</p>
</li>
<li><p>Homomorphic encoding / encryption</p>
<p>加密函数具有同态属性（但不是全同态，全同态现在还没有实用价值），这允许证明者在不知道随机评估点s，只知道其加密值E(s)的情况下计算E(t(s)),E(h(s)),E(v(s)),E(w(s))</p>
</li>
<li><p>Zero Knowledge</p>
<p>prover将上面四个加密值乘以一个数来混淆他们，使得verifier不知道实际加密值而可以进行检查，因为检查t(s)h(s) = w(s)v(s)与检查t(s)h(s)k = w(s)v(s)k，（k是一个随机非零数）是等价的</p>
</li>
</ol>
<p>RSA</p>
<p><img src="%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/image-20211114222242995.png" alt="image-20211114222242995"></p>
<h3 id="4-18-4-24"><a href="#4-18-4-24" class="headerlink" title="4.18 - 4.24"></a>4.18 - 4.24</h3><p>使用 circom 和 snarkjs 实现简单的零知识证明solidity智能合约，并在本地以太坊测试链上部署测试</p>
<ol>
<li>编写电路</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pragma circom 2.0.0;</span><br><span class="line"></span><br><span class="line">template Multiplier2() &#123;</span><br><span class="line">    signal input a;</span><br><span class="line">    signal input b;</span><br><span class="line">    signal output c;</span><br><span class="line">    c &lt;== a*b;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> component main = Multiplier2();</span><br></pre></td></tr></table></figure>
<ol>
<li>编译上述电路</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">circom multiplier2.circom --r1cs --wasm --sym --c</span><br></pre></td></tr></table></figure>
<ul>
<li><code>--r1cs</code>: it generates the file <code>multiplier2.r1cs</code> that contains the <a href="https://docs.circom.io/background/background#rank-1-constraint-system" target="_blank" rel="noopener">R1CS constraint system</a> of the circuit in binary format.</li>
<li><code>--wasm</code>: it generates the directory <code>multiplier2_js</code> that contains the <code>Wasm</code> code (multiplier2.wasm) and other files needed to generate the <a href="https://docs.circom.io/background/background#witness" target="_blank" rel="noopener">witness</a>.</li>
<li><code>--sym</code> : it generates the file <code>multiplier2.sym</code> , a symbols file required for debugging or for printing the constraint system in an annotated mode.</li>
<li><p><code>--c</code> : it generates the directory <code>multiplier2_cpp</code> that contains several files (multiplier2.cpp, multiplier2.dat, and other common files for every compiled program like main.cpp, MakeFile, etc) needed to compile the C code to generate the witness.</p>
<p>The set of inputs, intermediate signals and output is called <a href="https://docs.circom.io/background/background#witness" target="_blank" rel="noopener">witness</a>.</p>
</li>
</ul>
<h4 id="Power-of-Tau"><a href="#Power-of-Tau" class="headerlink" title="Power of Tau"></a>Power of Tau</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">snarkjs powersoftau new bn128 12 pot12_0000.ptau -v</span><br><span class="line">snarkjs powersoftau contribute pot12_0000.ptau pot12_0001.ptau --name=<span class="string">"First contribution"</span> -v</span><br><span class="line"><span class="comment"># phase 2</span></span><br><span class="line">snarkjs powersoftau prepare phase2 pot12_0001.ptau pot12_final.ptau -v</span><br><span class="line">snarkjs groth16 setup multiplier2.r1cs pot12_final.ptau multiplier2_0000.zkey</span><br><span class="line">snarkjs zkey contribute multiplier2_0000.zkey multiplier2_0001.zkey --name=<span class="string">"1st Contributor Name"</span> -v</span><br><span class="line">snarkjs zkey <span class="built_in">export</span> verificationkey multiplier2_0001.zkey verification_key.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># generating a proof</span></span><br><span class="line">snarkjs groth16 prove multiplier2_0001.zkey witness.wtns proof.json public.json</span><br><span class="line">snarkjs groth16 verify verification_key.json public.json proof.json</span><br><span class="line"></span><br><span class="line">snarkjs zkey <span class="built_in">export</span> solidityverifier multiplier2_0001.zkey verifier.sol</span><br><span class="line"></span><br><span class="line">snarkjs generatecall</span><br></pre></td></tr></table></figure>
<h4 id="remix"><a href="#remix" class="headerlink" title="remix"></a>remix</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">remixd -s E:\project\remix\contract --remix-ide https://remix.ethereum.org</span><br></pre></td></tr></table></figure>
<h4 id="ethereum"><a href="#ethereum" class="headerlink" title="ethereum"></a>ethereum</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">geth --datadir . --networkid 1881005 --http --http.corsdomain=<span class="string">"*"</span> --http.port 8545 --http.addr <span class="string">"0.0.0.0"</span> --http.api <span class="string">"db,web3,eth,debug,personal,net,miner,admin"</span> --allow-insecure-unlock --nodiscover console 2&gt;&gt;output.log</span><br></pre></td></tr></table></figure>
<h4 id="生成的智能合约如下："><a href="#生成的智能合约如下：" class="headerlink" title="生成的智能合约如下："></a>生成的智能合约如下：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//</span><br><span class="line">// Copyright 2017 Christian Reitwiessner</span><br><span class="line">// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</span><br><span class="line">// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</span><br><span class="line">// THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</span><br><span class="line">//</span><br><span class="line">// 2019 OKIMS</span><br><span class="line">//      ported to solidity 0.6</span><br><span class="line">//      fixed linter warnings</span><br><span class="line">//      added requiere error messages</span><br><span class="line">//</span><br><span class="line">//</span><br><span class="line">// SPDX-License-Identifier: GPL-3.0</span><br><span class="line">pragma solidity ^0.6.11;</span><br><span class="line">library Pairing &#123;</span><br><span class="line">    struct G1Point &#123;</span><br><span class="line">        uint X;</span><br><span class="line">        uint Y;</span><br><span class="line">    &#125;</span><br><span class="line">    // Encoding of field elements is: X[0] * z + X[1]</span><br><span class="line">    struct G2Point &#123;</span><br><span class="line">        uint[2] X;</span><br><span class="line">        uint[2] Y;</span><br><span class="line">    &#125;</span><br><span class="line">    /// @return the generator of G1</span><br><span class="line">    function P1() internal pure returns (G1Point memory) &#123;</span><br><span class="line">        return G1Point(1, 2);</span><br><span class="line">    &#125;</span><br><span class="line">    /// @return the generator of G2</span><br><span class="line">    function P2() internal pure returns (G2Point memory) &#123;</span><br><span class="line">        // Original code point</span><br><span class="line">        return G2Point(</span><br><span class="line">            [11559732032986387107991004021392285783925812861821192530917403151452391805634,</span><br><span class="line">             10857046999023057135944570762232829481370756359578518086990519993285655852781],</span><br><span class="line">            [4082367875863433681332203403145435568316851327593401208105741076214120093531,</span><br><span class="line">             8495653923123431417604973247489272438418190587263600148770280649306958101930]</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">        // Changed by Jordi point</span><br><span class="line">        return G2Point(</span><br><span class="line">            [10857046999023057135944570762232829481370756359578518086990519993285655852781,</span><br><span class="line">             11559732032986387107991004021392285783925812861821192530917403151452391805634],</span><br><span class="line">            [8495653923123431417604973247489272438418190587263600148770280649306958101930,</span><br><span class="line">             4082367875863433681332203403145435568316851327593401208105741076214120093531]</span><br><span class="line">        );</span><br><span class="line">*/</span><br><span class="line">    &#125;</span><br><span class="line">    /// @return r the negation of p, i.e. p.addition(p.negate()) should be zero.</span><br><span class="line">    function negate(G1Point memory p) internal pure returns (G1Point memory r) &#123;</span><br><span class="line">        // The prime q in the base field F_q for G1</span><br><span class="line">        uint q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;</span><br><span class="line">        if (p.X == 0 &amp;&amp; p.Y == 0)</span><br><span class="line">            return G1Point(0, 0);</span><br><span class="line">        return G1Point(p.X, q - (p.Y % q));</span><br><span class="line">    &#125;</span><br><span class="line">    /// @return r the sum of two points of G1</span><br><span class="line">    function addition(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) &#123;</span><br><span class="line">        uint[4] memory input;</span><br><span class="line">        input[0] = p1.X;</span><br><span class="line">        input[1] = p1.Y;</span><br><span class="line">        input[2] = p2.X;</span><br><span class="line">        input[3] = p2.Y;</span><br><span class="line">        bool success;</span><br><span class="line">        // solium-disable-next-line security/no-inline-assembly</span><br><span class="line">        assembly &#123;</span><br><span class="line">            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)</span><br><span class="line">            // Use &quot;invalid&quot; to make gas estimation work</span><br><span class="line">            switch success case 0 &#123; invalid() &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        require(success,&quot;pairing-add-failed&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    /// @return r the product of a point on G1 and a scalar, i.e.</span><br><span class="line">    /// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.</span><br><span class="line">    function scalar_mul(G1Point memory p, uint s) internal view returns (G1Point memory r) &#123;</span><br><span class="line">        uint[3] memory input;</span><br><span class="line">        input[0] = p.X;</span><br><span class="line">        input[1] = p.Y;</span><br><span class="line">        input[2] = s;</span><br><span class="line">        bool success;</span><br><span class="line">        // solium-disable-next-line security/no-inline-assembly</span><br><span class="line">        assembly &#123;</span><br><span class="line">            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)</span><br><span class="line">            // Use &quot;invalid&quot; to make gas estimation work</span><br><span class="line">            switch success case 0 &#123; invalid() &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        require (success,&quot;pairing-mul-failed&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    /// @return the result of computing the pairing check</span><br><span class="line">    /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1</span><br><span class="line">    /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should</span><br><span class="line">    /// return true.</span><br><span class="line">    function pairing(G1Point[] memory p1, G2Point[] memory p2) internal view returns (bool) &#123;</span><br><span class="line">        require(p1.length == p2.length,&quot;pairing-lengths-failed&quot;);</span><br><span class="line">        uint elements = p1.length;</span><br><span class="line">        uint inputSize = elements * 6;</span><br><span class="line">        uint[] memory input = new uint[](inputSize);</span><br><span class="line">        for (uint i = 0; i &lt; elements; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            input[i * 6 + 0] = p1[i].X;</span><br><span class="line">            input[i * 6 + 1] = p1[i].Y;</span><br><span class="line">            input[i * 6 + 2] = p2[i].X[0];</span><br><span class="line">            input[i * 6 + 3] = p2[i].X[1];</span><br><span class="line">            input[i * 6 + 4] = p2[i].Y[0];</span><br><span class="line">            input[i * 6 + 5] = p2[i].Y[1];</span><br><span class="line">        &#125;</span><br><span class="line">        uint[1] memory out;</span><br><span class="line">        bool success;</span><br><span class="line">        // solium-disable-next-line security/no-inline-assembly</span><br><span class="line">        assembly &#123;</span><br><span class="line">            success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)</span><br><span class="line">            // Use &quot;invalid&quot; to make gas estimation work</span><br><span class="line">            switch success case 0 &#123; invalid() &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        require(success,&quot;pairing-opcode-failed&quot;);</span><br><span class="line">        return out[0] != 0;</span><br><span class="line">    &#125;</span><br><span class="line">    /// Convenience method for a pairing check for two pairs.</span><br><span class="line">    function pairingProd2(G1Point memory a1, G2Point memory a2, G1Point memory b1, G2Point memory b2) internal view returns (bool) &#123;</span><br><span class="line">        G1Point[] memory p1 = new G1Point[](2);</span><br><span class="line">        G2Point[] memory p2 = new G2Point[](2);</span><br><span class="line">        p1[0] = a1;</span><br><span class="line">        p1[1] = b1;</span><br><span class="line">        p2[0] = a2;</span><br><span class="line">        p2[1] = b2;</span><br><span class="line">        return pairing(p1, p2);</span><br><span class="line">    &#125;</span><br><span class="line">    /// Convenience method for a pairing check for three pairs.</span><br><span class="line">    function pairingProd3(</span><br><span class="line">            G1Point memory a1, G2Point memory a2,</span><br><span class="line">            G1Point memory b1, G2Point memory b2,</span><br><span class="line">            G1Point memory c1, G2Point memory c2</span><br><span class="line">    ) internal view returns (bool) &#123;</span><br><span class="line">        G1Point[] memory p1 = new G1Point[](3);</span><br><span class="line">        G2Point[] memory p2 = new G2Point[](3);</span><br><span class="line">        p1[0] = a1;</span><br><span class="line">        p1[1] = b1;</span><br><span class="line">        p1[2] = c1;</span><br><span class="line">        p2[0] = a2;</span><br><span class="line">        p2[1] = b2;</span><br><span class="line">        p2[2] = c2;</span><br><span class="line">        return pairing(p1, p2);</span><br><span class="line">    &#125;</span><br><span class="line">    /// Convenience method for a pairing check for four pairs.</span><br><span class="line">    function pairingProd4(</span><br><span class="line">            G1Point memory a1, G2Point memory a2,</span><br><span class="line">            G1Point memory b1, G2Point memory b2,</span><br><span class="line">            G1Point memory c1, G2Point memory c2,</span><br><span class="line">            G1Point memory d1, G2Point memory d2</span><br><span class="line">    ) internal view returns (bool) &#123;</span><br><span class="line">        G1Point[] memory p1 = new G1Point[](4);</span><br><span class="line">        G2Point[] memory p2 = new G2Point[](4);</span><br><span class="line">        p1[0] = a1;</span><br><span class="line">        p1[1] = b1;</span><br><span class="line">        p1[2] = c1;</span><br><span class="line">        p1[3] = d1;</span><br><span class="line">        p2[0] = a2;</span><br><span class="line">        p2[1] = b2;</span><br><span class="line">        p2[2] = c2;</span><br><span class="line">        p2[3] = d2;</span><br><span class="line">        return pairing(p1, p2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract Verifier &#123;</span><br><span class="line">    using Pairing for *;</span><br><span class="line">    struct VerifyingKey &#123;</span><br><span class="line">        Pairing.G1Point alfa1;</span><br><span class="line">        Pairing.G2Point beta2;</span><br><span class="line">        Pairing.G2Point gamma2;</span><br><span class="line">        Pairing.G2Point delta2;</span><br><span class="line">        Pairing.G1Point[] IC;</span><br><span class="line">    &#125;</span><br><span class="line">    struct Proof &#123;</span><br><span class="line">        Pairing.G1Point A;</span><br><span class="line">        Pairing.G2Point B;</span><br><span class="line">        Pairing.G1Point C;</span><br><span class="line">    &#125;</span><br><span class="line">    function verifyingKey() internal pure returns (VerifyingKey memory vk) &#123;</span><br><span class="line">        vk.alfa1 = Pairing.G1Point(</span><br><span class="line">            12337750874814986638183658287417226184821865034780062781169448227927843085437,</span><br><span class="line">            20789784105513116652447837778798744770812372834441090975130560939386240638449</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        vk.beta2 = Pairing.G2Point(</span><br><span class="line">            [18784773432458773856533621653352594216310804914846082882128369129867537056603,</span><br><span class="line">             15993147364930271011119857771229518400843864334160483000463925699781638094398],</span><br><span class="line">            [14426808660924769767209049580514677357290856656181006011291452963595796297437,</span><br><span class="line">             20849839715092881998024103134500501732489517045392067824309586274941085058084]</span><br><span class="line">        );</span><br><span class="line">        vk.gamma2 = Pairing.G2Point(</span><br><span class="line">            [11559732032986387107991004021392285783925812861821192530917403151452391805634,</span><br><span class="line">             10857046999023057135944570762232829481370756359578518086990519993285655852781],</span><br><span class="line">            [4082367875863433681332203403145435568316851327593401208105741076214120093531,</span><br><span class="line">             8495653923123431417604973247489272438418190587263600148770280649306958101930]</span><br><span class="line">        );</span><br><span class="line">        vk.delta2 = Pairing.G2Point(</span><br><span class="line">            [6111397131408822340052935052704500884297146961431774811308133271014030453383,</span><br><span class="line">             20257662194508954709330260176873004684846702285506792201377179815653163601689],</span><br><span class="line">            [6925686265402714784473799066161817568880279684260461258791863079183992598211,</span><br><span class="line">             232599846384973218731329320006391615042059720103935983598945368024486252821]</span><br><span class="line">        );</span><br><span class="line">        vk.IC = new Pairing.G1Point[](2);</span><br><span class="line">        </span><br><span class="line">        vk.IC[0] = Pairing.G1Point( </span><br><span class="line">            18962681638181644814620786412357572954435556887442787314425322833857457400640,</span><br><span class="line">            20931347130095835758845105591609451396603467861399243873929590769728350128676</span><br><span class="line">        );                                      </span><br><span class="line">        </span><br><span class="line">        vk.IC[1] = Pairing.G1Point( </span><br><span class="line">            10821775866028401376039912101097412401059716038949182737075130411672179882951,</span><br><span class="line">            14378620393193287343898032009055968536407856858577257301546616957060075180530</span><br><span class="line">        );                                      </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    function verify(uint[] memory input, Proof memory proof) internal view returns (uint) &#123;</span><br><span class="line">        uint256 snark_scalar_field = 21888242871839275222246405745257275088548364400416034343698204186575808495617;</span><br><span class="line">        VerifyingKey memory vk = verifyingKey();</span><br><span class="line">        require(input.length + 1 == vk.IC.length,&quot;verifier-bad-input&quot;);</span><br><span class="line">        // Compute the linear combination vk_x</span><br><span class="line">        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);</span><br><span class="line">        for (uint i = 0; i &lt; input.length; i++) &#123;</span><br><span class="line">            require(input[i] &lt; snark_scalar_field,&quot;verifier-gte-snark-scalar-field&quot;);</span><br><span class="line">            vk_x = Pairing.addition(vk_x, Pairing.scalar_mul(vk.IC[i + 1], input[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        vk_x = Pairing.addition(vk_x, vk.IC[0]);</span><br><span class="line">        if (!Pairing.pairingProd4(</span><br><span class="line">            Pairing.negate(proof.A), proof.B,</span><br><span class="line">            vk.alfa1, vk.beta2,</span><br><span class="line">            vk_x, vk.gamma2,</span><br><span class="line">            proof.C, vk.delta2</span><br><span class="line">        )) return 1;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    /// @return r  bool true if proof is valid</span><br><span class="line">    function verifyProof(</span><br><span class="line">            uint[2] memory a,</span><br><span class="line">            uint[2][2] memory b,</span><br><span class="line">            uint[2] memory c,</span><br><span class="line">            uint[1] memory input</span><br><span class="line">        ) public view returns (bool r) &#123;</span><br><span class="line">        Proof memory proof;</span><br><span class="line">        proof.A = Pairing.G1Point(a[0], a[1]);</span><br><span class="line">        proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);</span><br><span class="line">        proof.C = Pairing.G1Point(c[0], c[1]);</span><br><span class="line">        uint[] memory inputValues = new uint[](input.length);</span><br><span class="line">        for(uint i = 0; i &lt; input.length; i++)&#123;</span><br><span class="line">            inputValues[i] = input[i];</span><br><span class="line">        &#125;</span><br><span class="line">        if (verify(inputValues, proof) == 0) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的library paring是椭圆曲线相关操作，其中的paring函数是椭圆曲线的配对函数，用在零知识证明zksnark的最后一步，比较两个等式是否相等。其实具体也看不太懂</p>
<p>contract 下面的 varify是智能合约向外界提供的接口，该接口调用paring函数比较用户提供的证明是否符合条件，并返回0，1</p>
<p>在上面的代码中，library库是libsnark算法的solidity实现，其算法的安全性、正确性证明相信在linsnark算法中都已经给出，那么整个过程不会涉及到隐私泄露的问题，而从verify函数中也可以看出，对用户提供的证明的预处理操作不过是解析证明到两个椭圆曲线上的点，然后就调用paring函数，因为在零知识证明理论中，证明本身不包含任何有用的信息，因此整个解析的过程也不会涉及到隐私泄露。<strong>总的来说，在零知识证明这个框架中，若能保证<code>libsnark</code> 算法的具体实现逻辑没有漏洞，那么整个过程没有知识的泄露</strong>。</p>
<h2 id="4-25-5-1"><a href="#4-25-5-1" class="headerlink" title="4.25 - 5.1"></a>4.25 - 5.1</h2><p>学习Hyperledger Fabric源码、Gossip和Raft协议</p>
<h3 id="Gossip协议"><a href="#Gossip协议" class="headerlink" title="Gossip协议"></a>Gossip协议</h3><p>​    出自1987 年发布的一篇论文：《Epidemic Algorithms for Replicated Database Maintenance》，弱一致性共识算法</p>
<h4 id="数据更新的三种方法："><a href="#数据更新的三种方法：" class="headerlink" title="数据更新的三种方法："></a>数据更新的三种方法：</h4><p><img src="%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/image-20220513211724020.png" alt="image-20220513211724020"></p>
<p>直接邮寄：当一个节点数据变化，通知所有节点。简单、直接但是缺点是节点可能并不知道其他节点的存在</p>
<p>反熵：<code>熵</code> 即混乱、差异程度，反熵就是消去节点直接的不同。节点随机选择其他节点，互相交换数据达成一致。可靠但是数据量大，开销大、速度慢。</p>
<p>传谣：类似反熵但是只传播<code>谣言</code> 即 信息不平等的部分。可靠、网络开销小。</p>
<p><strong>Gossip 设计了两种可能的消息传播模式：反熵（Anti-Entropy）和传谣（Rumor-Mongering）。</strong></p>
<h4 id="Gossip协议的模拟过程"><a href="#Gossip协议的模拟过程" class="headerlink" title="Gossip协议的模拟过程"></a>Gossip协议的模拟过程</h4><p><a href="https://flopezluis.github.io/gossip-simulator/" target="_blank" rel="noopener">https://flopezluis.github.io/gossip-simulator/</a></p>
<blockquote>
<p>一个节点想与网络中的其他节点分享一些信息。然后，它定期从节点集合中随机选择一个节点并交换信息，收到信息的节点也做同样的事情。<br>该信息定期发送到 N 个目标，N 被称为扇出（Fanout）。</p>
<p>算法复杂度为O(LogN)</p>
<p>节点加入网路的方式是将自己添加到Gossip成员节点的节点集合中。</p>
</blockquote>
<h3 id="Raft"><a href="#Raft" class="headerlink" title="Raft"></a>Raft</h3><p>一种强一致性共识算法，Hyperledger Fabric 1.4 之后支持Raft共识</p>
<p>共识算法就是保证一个集群的多台机器协同工作，在遇到请求时，数据能够保持一致。即使遇到机器宕机，整个系<strong>统仍然能够对外保持</strong>服务的可用性。</p>
<p>Raft 将共识问题分解三个子问题：</p>
<ol>
<li><strong>Leader election 领导选举</strong>：有且仅有一个 leader 节点，如果 leader 宕机，通过选举机制选出新的 leader；</li>
<li><strong>Log replication 日志复制</strong>：leader 从客户端接收数据更新/删除请求，然后日志复制到 follower 节点，从而保证集群数据的一致性；</li>
<li><strong>Safety 安全性</strong>：通过安全性原则来处理一些特殊 case，保证 Raft 算法的完备性；</li>
</ol>
<p>所以，Raft 算法核心流程可以归纳为：</p>
<ul>
<li>首先选出 leader，leader 节点负责接收外部的数据更新/删除请求；</li>
<li>然后日志复制到其他 follower 节点，同时通过安全性的准则来保证整个日志复制的一致性；</li>
<li>如果遇到 leader 故障，followers 会重新发起选举出新的 leader；</li>
</ul>
<h2 id="5-2-5-8"><a href="#5-2-5-8" class="headerlink" title="5.2-5.8"></a>5.2-5.8</h2><h3 id="A-Secure-File-Sharing-System-Based-on-IPFS-and-Blockchain"><a href="#A-Secure-File-Sharing-System-Based-on-IPFS-and-Blockchain" class="headerlink" title="A Secure File Sharing System Based on IPFS and Blockchain"></a>A Secure File Sharing System Based on IPFS and Blockchain</h3><p><a href="E:\lzx\zotero\storage\5WAV27X3\2020_A Secure File Sharing System Based on IPFS and Blockchain_Huang et al.pdf" target="_blank" rel="noopener">原文</a></p>
<p><img src="%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/image-20220505153510618.png" alt="image-20220505153510618"></p>
<ul>
<li>方法比较常规，为了实现访问控制，在IPFS和Blockchain的基础上增加了IPFS_proxy，一个分布式的访问控制和密钥管理系统。这里的文件共享是面向群组的。1用户共享文件前创建群组，IPFS_proxy使用group_key加密文件，只有群组中的user才能获取group key解密文件，以这种方式实现访问控制。user获取group key的方式是key wrapping，即proxy使用user的公钥加密group key，user使用私钥解密获取。</li>
<li>只要知道group_id就可以加入并获取所有文件，这似乎不是一个很好的设计，而且想要将用户从群组中踢出，需要更新group key、通知所有user，re-encrypt所有文件，上链，这个过程太过复杂。而且如何从IPFS上删除原有的数据？</li>
</ul>
<h3 id="A-Blockchain-Based-Decentralized-Federated-Learning-Framework-with-Committee-Consensus"><a href="#A-Blockchain-Based-Decentralized-Federated-Learning-Framework-with-Committee-Consensus" class="headerlink" title="A Blockchain-Based Decentralized Federated Learning Framework with Committee Consensus"></a>A Blockchain-Based Decentralized Federated Learning Framework with Committee Consensus</h3><p><a href="E:\lzx\zotero\storage\3NSGHRER\2021_A Blockchain-Based Decentralized Federated Learning Framework with Committee_Li et al.pdf" target="_blank" rel="noopener">原文</a></p>
<p>模型存储模式、训练过程和新的委员会共识。</p>
<p><img src="%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/image-20220507230338609.png" alt="image-20220507230338609"></p>
<p><img src="%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/image-20220507225830343.png" alt="image-20220507225830343"></p>
<h4 id="出发点："><a href="#出发点：" class="headerlink" title="出发点："></a>出发点：</h4><ol>
<li>FL服务器中心化带来的问题，如单点故障、泄露隐私问题</li>
<li>无法处理恶意节点投毒问题</li>
</ol>
<p>创新点：</p>
<ol>
<li>委员会共识</li>
</ol>
<p>共识机制：选举委员会节点，委员会成员对节点上传的梯度值打分，中位数作为最终得分，根据最终得分选举下一轮委员会成员</p>
<ol>
<li><strong>高效率</strong>:只有少数节点验证更新，而不是广播到每个节点并达成协议。</li>
<li><strong>K-fold交叉验证</strong>:委员会成员不参加本次本地培训。因此，我们将委员会的本地数据作为验证集。随着每一轮委员会成员的交替，验证集也会发生变化。在此设置下，实现了对FL的k-fold交叉验证。</li>
<li><strong>反恶意</strong>:根据验证分数，智能合约将选出相应性能较好的节点，组成下一轮培训的新委员会。这意味着所选的本地数据分布是群居的，节点不是恶意的。</li>
</ol>
<p>存储优化：删除旧节点    ————》 信任问题</p>
<p>激励机制：根据节点提交更新的分数分配奖励</p>
<p>安全性：委员会成员中恶意节点数量小于一半</p>
<p>模型训练：</p>
<ul>
<li>两个问题：<ul>
<li>各个节点所有的数据可能不是独立同分布的  ——》每一轮训练需要足够多的更新以使得全局模型的泛化能力最大化。</li>
<li>节点不能保证随时在线  ——》节点主动获取更新模型进行训练</li>
</ul>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>委员会共识中委员会的概念并不是首创，像EOS中的DPOS中就有委员会的概念</li>
<li>存储优化的概念中本聪在比特币的白皮书中就有初步构想。</li>
<li>每一轮更新上链数据量大。</li>
</ol>
<p><img src="%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/image-20220508111607556.png" alt="image-20220508111607556"></p>
<p><strong>基于竞争的共识机制首先在链上追加区块，然后达成共识。相反，基于通信的共识机制在附加块之前达成一致。</strong></p>
<h2 id="5-9-5-15"><a href="#5-9-5-15" class="headerlink" title="5.9-5.15"></a>5.9-5.15</h2><p>阅读《Hyperledger Fabric技术内幕：架构设计与实现原理》，学习hyperldger Fabric源码并尝试复现北交硕士论文《基于可验证随机函数的hyperledger fabric共识机制优化》</p>
<h3 id="Hyperledger-Fabric1-x-共识机制源码"><a href="#Hyperledger-Fabric1-x-共识机制源码" class="headerlink" title="Hyperledger Fabric1.x  共识机制源码"></a>Hyperledger Fabric1.x  共识机制源码</h3><ol>
<li><code>core\endorser\endorser.go</code> 是背书节点相关处理逻辑代码，其中<code>ProcessProposal</code> 函数为公开对外提供的处理提案函数，代码如下：</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ProcessProposal process the Proposal</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *Endorser)</span> <span class="title">ProcessProposal</span><span class="params">(ctx context.Context, signedProp *pb.SignedProposal)</span> <span class="params">(*pb.ProposalResponse, error)</span></span> &#123;</span><br><span class="line">	endorserLogger.Debugf(<span class="string">"Entry"</span>)</span><br><span class="line">	<span class="keyword">defer</span> endorserLogger.Debugf(<span class="string">"Exit"</span>)</span><br><span class="line">	<span class="comment">// at first, we check whether the message is valid</span></span><br><span class="line">	prop, hdr, hdrExt, err := validation.ValidateProposalMessage(signedProp)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> &amp;pb.ProposalResponse&#123;Response: &amp;pb.Response&#123;Status: <span class="number">500</span>, Message: err.Error()&#125;&#125;, err</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	chdr, err := putils.UnmarshalChannelHeader(hdr.ChannelHeader)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> &amp;pb.ProposalResponse&#123;Response: &amp;pb.Response&#123;Status: <span class="number">500</span>, Message: err.Error()&#125;&#125;, err</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	shdr, err := putils.GetSignatureHeader(hdr.SignatureHeader)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> &amp;pb.ProposalResponse&#123;Response: &amp;pb.Response&#123;Status: <span class="number">500</span>, Message: err.Error()&#125;&#125;, err</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// block invocations to security-sensitive system chaincodes</span></span><br><span class="line">	<span class="keyword">if</span> syscc.IsSysCCAndNotInvokableExternal(hdrExt.ChaincodeId.Name) &#123;</span><br><span class="line">		endorserLogger.Errorf(<span class="string">"Error: an attempt was made by %#v to invoke system chaincode %s"</span>,</span><br><span class="line">			shdr.Creator, hdrExt.ChaincodeId.Name)</span><br><span class="line">		err = fmt.Errorf(<span class="string">"Chaincode %s cannot be invoked through a proposal"</span>, hdrExt.ChaincodeId.Name)</span><br><span class="line">		<span class="keyword">return</span> &amp;pb.ProposalResponse&#123;Response: &amp;pb.Response&#123;Status: <span class="number">500</span>, Message: err.Error()&#125;&#125;, err</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	chainID := chdr.ChannelId</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Check for uniqueness of prop.TxID with ledger</span></span><br><span class="line">	<span class="comment">// Notice that ValidateProposalMessage has already verified</span></span><br><span class="line">	<span class="comment">// that TxID is computed properly</span></span><br><span class="line">	txid := chdr.TxId</span><br><span class="line">	<span class="keyword">if</span> txid == <span class="string">""</span> &#123;</span><br><span class="line">		err = errors.New(<span class="string">"Invalid txID. It must be different from the empty string."</span>)</span><br><span class="line">		<span class="keyword">return</span> &amp;pb.ProposalResponse&#123;Response: &amp;pb.Response&#123;Status: <span class="number">500</span>, Message: err.Error()&#125;&#125;, err</span><br><span class="line">	&#125;</span><br><span class="line">	endorserLogger.Debugf(<span class="string">"processing txid: %s"</span>, txid)</span><br><span class="line">	<span class="comment">// 唯一性检查 &amp;&amp; ACLs</span></span><br><span class="line">	<span class="keyword">if</span> chainID != <span class="string">""</span> &#123;</span><br><span class="line">		<span class="comment">// here we handle uniqueness check and ACLs for proposals targeting a chain</span></span><br><span class="line">        <span class="comment">// ACLs: Access Control Lists</span></span><br><span class="line">		lgr := peer.GetLedger(chainID)</span><br><span class="line">		<span class="keyword">if</span> lgr == <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"failure while looking up the ledger %s"</span>, chainID)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 错解：如果用 当前的TXId 通过 GetTransactionByID()没有出错的话，说明之前已经有这个id 的交易，那么这条交易可能是重放攻击</span></span><br><span class="line">		<span class="comment">// 前面参数校验 已经校验过了</span></span><br><span class="line">		<span class="comment">// 正解：检查是否有重复的TXId，类似数据库需要保证主键的唯一性。</span></span><br><span class="line">		<span class="keyword">if</span> _, err := lgr.GetTransactionByID(txid); err == <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"Duplicate transaction found [%s]. Creator [%x]. [%s]"</span>, txid, shdr.Creator, err)</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// check ACL only for application chaincodes; ACLs</span></span><br><span class="line">		<span class="comment">// for system chaincodes are checked elsewhere</span></span><br><span class="line">		<span class="comment">// 检查应用链码 ACLs</span></span><br><span class="line">		<span class="keyword">if</span> !syscc.IsSysCC(hdrExt.ChaincodeId.Name) &#123;</span><br><span class="line">			<span class="comment">// check that the proposal complies with the channel's writers</span></span><br><span class="line">			<span class="keyword">if</span> err = e.checkACL(signedProp, chdr, shdr, hdrExt); err != <span class="literal">nil</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> &amp;pb.ProposalResponse&#123;Response: &amp;pb.Response&#123;Status: <span class="number">500</span>, Message: err.Error()&#125;&#125;, err</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">// chainless proposals do not/cannot affect ledger and cannot be submitted as transactions</span></span><br><span class="line">		<span class="comment">// ignore uniqueness checks; also, chainless proposals are not validated using the policies</span></span><br><span class="line">		<span class="comment">// of the chain since by definition there is no chain; they are validated against the local</span></span><br><span class="line">		<span class="comment">// MSP of the peer instead by the call to ValidateProposalMessage above</span></span><br><span class="line">		<span class="comment">// 无链提案不需要进行上面的校验</span></span><br><span class="line">		<span class="comment">// <span class="doctag">TODO:</span> 什么叫无链提案</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 开始模拟执行</span></span><br><span class="line">	<span class="comment">// obtaining once the tx simulator for this proposal. This will be nil</span></span><br><span class="line">	<span class="comment">// for chainless proposals</span></span><br><span class="line">	<span class="comment">// Also obtain a history query executor for history queries, since tx simulator does not cover history</span></span><br><span class="line">	<span class="keyword">var</span> txsim ledger.TxSimulator</span><br><span class="line">	<span class="keyword">var</span> historyQueryExecutor ledger.HistoryQueryExecutor</span><br><span class="line">	<span class="keyword">if</span> chainID != <span class="string">""</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> txsim, err = e.getTxSimulator(chainID); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> &amp;pb.ProposalResponse&#123;Response: &amp;pb.Response&#123;Status: <span class="number">500</span>, Message: err.Error()&#125;&#125;, err</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> historyQueryExecutor, err = e.getHistoryQueryExecutor(chainID); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> &amp;pb.ProposalResponse&#123;Response: &amp;pb.Response&#123;Status: <span class="number">500</span>, Message: err.Error()&#125;&#125;, err</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// Add the historyQueryExecutor to context</span></span><br><span class="line">		<span class="comment">// TODO shouldn't we also add txsim to context here as well? Rather than passing txsim parameter</span></span><br><span class="line">		<span class="comment">// around separately, since eventually it gets added to context anyways</span></span><br><span class="line">		ctx = context.WithValue(ctx, chaincode.HistoryQueryExecutorKey, historyQueryExecutor)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">defer</span> txsim.Done()</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//this could be a request to a chainless SysCC</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// <span class="doctag">TODO:</span> if the proposal has an extension, it will be of type ChaincodeAction;</span></span><br><span class="line">	<span class="comment">//       if it's present it means that no simulation is to be performed because</span></span><br><span class="line">	<span class="comment">//       we're trying to emulate a submitting peer. On the other hand, we need</span></span><br><span class="line">	<span class="comment">//       to validate the supplied action before endorsing it</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//1 -- simulate</span></span><br><span class="line">	cd, res, simulationResult, ccevent, err := e.simulateProposal(ctx, chainID, txid, signedProp, prop, hdrExt.ChaincodeId, txsim)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> &amp;pb.ProposalResponse&#123;Response: &amp;pb.Response&#123;Status: <span class="number">500</span>, Message: err.Error()&#125;&#125;, err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> res != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> res.Status &gt;= shim.ERROR &#123;</span><br><span class="line">			endorserLogger.Errorf(<span class="string">"simulateProposal() resulted in chaincode response status %d for txid: %s"</span>, res.Status, txid)</span><br><span class="line">			<span class="keyword">var</span> cceventBytes []<span class="keyword">byte</span></span><br><span class="line">			<span class="keyword">if</span> ccevent != <span class="literal">nil</span> &#123;</span><br><span class="line">				cceventBytes, err = putils.GetBytesChaincodeEvent(ccevent)</span><br><span class="line">				<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"failed to marshal event bytes - %s"</span>, err)</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			pResp, err := putils.CreateProposalResponseFailure(prop.Header, prop.Payload, res, simulationResult, cceventBytes, hdrExt.ChaincodeId, hdrExt.PayloadVisibility)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> &amp;pb.ProposalResponse&#123;Response: &amp;pb.Response&#123;Status: <span class="number">500</span>, Message: err.Error()&#125;&#125;, err</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">return</span> pResp, &amp;chaincodeError&#123;res.Status, res.Message&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//2 -- endorse and get a marshalled ProposalResponse message</span></span><br><span class="line">	<span class="keyword">var</span> pResp *pb.ProposalResponse</span><br><span class="line"></span><br><span class="line">	<span class="comment">//TODO till we implement global ESCC, CSCC for system chaincodes</span></span><br><span class="line">	<span class="comment">//chainless proposals (such as CSCC) don't have to be endorsed</span></span><br><span class="line">	<span class="keyword">if</span> chainID == <span class="string">""</span> &#123;</span><br><span class="line">		pResp = &amp;pb.ProposalResponse&#123;Response: res&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		pResp, err = e.endorseProposal(ctx, chainID, txid, signedProp, prop, res, simulationResult, ccevent, hdrExt.PayloadVisibility, hdrExt.ChaincodeId, txsim, cd)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> &amp;pb.ProposalResponse&#123;Response: &amp;pb.Response&#123;Status: <span class="number">500</span>, Message: err.Error()&#125;&#125;, err</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> pResp != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> res.Status &gt;= shim.ERRORTHRESHOLD &#123;</span><br><span class="line">				endorserLogger.Debugf(<span class="string">"endorseProposal() resulted in chaincode error for txid: %s"</span>, txid)</span><br><span class="line">				<span class="keyword">return</span> pResp, &amp;chaincodeError&#123;res.Status, res.Message&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Set the proposal response payload - it</span></span><br><span class="line">	<span class="comment">// contains the "return value" from the</span></span><br><span class="line">	<span class="comment">// chaincode invocation</span></span><br><span class="line">	pResp.Response.Payload = res.Payload</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> pResp, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先，<code>validation.ValidateProposalMessage()</code> 函数做如下四件事情：</p>
<ol>
<li>检测生成签名的证书有效性，提案message、header可以正确解析时，证书有效</li>
<li>验证证书可信</li>
<li>验证签名有效性</li>
<li>检测重放攻击</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>转发和重定向的区别</title>
    <url>/%E8%BD%AC%E5%8F%91%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91%E7%9A%84%E5%8C%BA%E5%88%AB.html</url>
    <content><![CDATA[<h2 id="转发和重定向"><a href="#转发和重定向" class="headerlink" title="转发和重定向"></a>转发和重定向</h2><p>转发：客户浏览器发送请求，服务器收到请求后调用内部一个方法在容器内部完成请求处理和转发动作，最后将转发到的那个网页资源返回给客户端。</p>
<p><img src="%E8%BD%AC%E5%8F%91%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91%E7%9A%84%E5%8C%BA%E5%88%AB/image-20210418215027384.png" alt="image-20210418215027384"></p>
<p>重定向：客户端发送请求，服务器收到请求后返回302/301状态码以及新的位置，客户端发现是302/301后再次向新的地址发送请求。</p>
<p><img src="%E8%BD%AC%E5%8F%91%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91%E7%9A%84%E5%8C%BA%E5%88%AB/image-20210418215043089.png" alt="image-20210418215043089"></p>
<p>举个:chestnut:：办理证件</p>
<p>你先去A窗口，A窗口发现你来错地了，你应该去旁边B窗口，但是他能帮你办了，就顺手去B那帮你办了把结果返回给你，这就是转发。</p>
<p>但如果你去A窗口，A跟你说你来错了，让你去C部门，你又去C办，这就是重定向。</p>
<h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><ol>
<li>重定向是浏览器发送请求并收到相应以后再次向一个新地址发送请求；转发是服务器收到请求后为了完成相应转到另一个资源</li>
<li>重定向中有两次请求对象，不共享数据；转发只产生一次请求对象，且在组件间共享数据</li>
<li>重定向后地址栏地址会改变，而转发不会</li>
<li>重定向的新地址可以是任意地址，转发必须是同一应用内的某个资源。</li>
</ol>
<h2 id="问题扩展"><a href="#问题扩展" class="headerlink" title="问题扩展"></a>问题扩展</h2><p>获取servlet的转发和重定向的方式</p>
<p>转发的方法：</p>
<ul>
<li><p>通过HttpServletRequest的getRequestDispatch()方法获得</p>
</li>
<li><p>通过ServletContext的getRequestDispatcher()方法获得</p>
</li>
</ul>
<p>重定向的方法：</p>
<ul>
<li>HttpServletResponse的sendRedirect()方法</li>
</ul>
<h2 id="结合项目使用"><a href="#结合项目使用" class="headerlink" title="结合项目使用"></a>结合项目使用</h2><ul>
<li><p>重定向可以实现图片的异步上传</p>
</li>
<li><p>一般访问web-inf下的文件，只能通过转发来实现</p>
</li>
</ul>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>遍历Map的4种方式</title>
    <url>/%E9%81%8D%E5%8E%86Map%E7%9A%844%E7%A7%8D%E6%96%B9%E5%BC%8F.html</url>
    <content><![CDATA[<h1 id="遍历Map的4种方式"><a href="#遍历Map的4种方式" class="headerlink" title="遍历Map的4种方式"></a>遍历Map的4种方式</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    HashMap&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">	map.add(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 1.entrySet遍历，键和值都需要时使用</span></span><br><span class="line">	<span class="keyword">for</span>( Map.Entry&lt;Integer,Integer&gt; entry : map.entrySet())&#123;</span><br><span class="line">        System.out.println(<span class="string">"key = "</span> + entry.getKey() + <span class="string">", value = "</span> + entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.单独遍历</span></span><br><span class="line">    <span class="comment">// 遍历键时</span></span><br><span class="line">    <span class="keyword">for</span>(Integer key : map.keySet())&#123;</span><br><span class="line">        key</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍历值时</span></span><br><span class="line">    <span class="keyword">for</span>(Integer value : map.values())&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.iterator</span></span><br><span class="line">    Iterator&lt;Map.Entry&lt;Integer,Integer&gt;&gt; it = map.entrySet.iterator();</span><br><span class="line">    <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">        Map.Entry&lt;Integer,Integer&gt; map = it.next();</span><br><span class="line">        Integer key = map.getKey();</span><br><span class="line">        Integer value = map.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Java8 lambda表达式,性能低于entrySet,所以更推荐用entrySet的方式</span></span><br><span class="line">    map.forEach((k,v)-&gt;&#123;</span><br><span class="line">        System.out.println(<span class="string">"key = "</span> + k + <span class="string">", value = "</span> + v);</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>面试</title>
    <url>/%E9%9D%A2%E8%AF%95.html</url>
    <content><![CDATA[<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><ul>
<li>排序算法，快排步骤，稳定排序</li>
<li></li>
</ul>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ul>
<li>MySQL存储引擎、索引、为什么查主键索引会比较快、hash和b+哪个快</li>
<li>数据库分库查找</li>
<li>MySQL的数据结构</li>
<li>b树和b+树的区别，为什么是b+树</li>
<li>innodb索引怎么实现的</li>
<li>聚簇索引和非聚簇索引</li>
<li>覆盖索引怎么实现</li>
<li>隔离级别</li>
<li>事务的ACID</li>
</ul>
<h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><ul>
<li>页面置换算法，LRU的实现</li>
<li>内存管理机制：块，页，段，段页</li>
<li>进程切换时机：</li>
<li>操作系统怎么对用户实现并行：单核时间片轮转，多核多进程</li>
<li>CPU调度算法</li>
</ul>
<h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><h3 id="输入网址到网页显示的过程"><a href="#输入网址到网页显示的过程" class="headerlink" title="输入网址到网页显示的过程"></a>输入网址到网页显示的过程</h3><ul>
<li>DNS</li>
<li>HTTP</li>
<li></li>
</ul>
<h3 id="OSI每层用了什么协议"><a href="#OSI每层用了什么协议" class="headerlink" title="OSI每层用了什么协议"></a>OSI每层用了什么协议</h3><ul>
<li>应用层：HTTP，HTTPS，ICMP，POP3 </li>
<li>表示层</li>
<li>会话层</li>
<li>传输层：TCP，UDP</li>
<li>网络层：IP</li>
<li>数据链路层：ARP</li>
<li>物理层</li>
</ul>
<h3 id="每次请求http都得重新建立连接嘛："><a href="#每次请求http都得重新建立连接嘛：" class="headerlink" title="每次请求http都得重新建立连接嘛："></a>每次请求http都得重新建立连接嘛：</h3><p>​    http1.0是，1.1keep-alive</p>
<h3 id="http和https的区别："><a href="#http和https的区别：" class="headerlink" title="http和https的区别："></a>http和https的区别：</h3><ul>
<li>http明文传输，有安全隐患，https是在tcp和http中间加入了ssl/tls层，加密传输。</li>
<li>http使用80端口，https使用443端口</li>
<li>http连接建立简单，在tcp三次握手之后就可以进行http报文传输，而https在三次握手之后还需要进行ssl/tls握手才可以进行报文加密传输</li>
<li>https需要向CA申请数字证书，来保证服务器的身份是可信的。</li>
</ul>
<h3 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h3><div class="table-container">
<table>
<thead>
<tr>
<th>状态码</th>
<th>具体含义</th>
<th>常见状态码</th>
</tr>
</thead>
<tbody>
<tr>
<td>1XX</td>
<td>提示信息，表示目前是协议处理的中间状态，还需要后续操作</td>
<td></td>
</tr>
<tr>
<td>2XX</td>
<td>成功，报文已经收到并正确处理</td>
<td>200，204，206</td>
</tr>
<tr>
<td>3XX</td>
<td>重定向，资源位置发生变化，需要客户端重新发送请求</td>
<td>301，302，304</td>
</tr>
<tr>
<td>4XX</td>
<td>客户端请求错误，请求报文有误，服务器无法处理</td>
<td>400，403，404</td>
</tr>
<tr>
<td>5XX</td>
<td>服务器内部错误，服务器处理请求时内部发生错误</td>
<td>500，501，502，503</td>
</tr>
</tbody>
</table>
</div>
<h4 id="2XX"><a href="#2XX" class="headerlink" title="2XX"></a>2XX</h4><p><strong>200 ok</strong>，最常见的状态码，表示一切正常，如果是非HEAD请求，返回的响应头都会有body数据。</p>
<p><strong>204 No Content</strong>，正常请求反应，但是body中无数据</p>
<p><strong>206 Partial Content</strong>，应用于HTTP<strong>分块下载</strong>或<strong>断点续传</strong>，表示响应返回的body数据并不是资源的全部，而是其中一部分，也是服务器处理成功的状态。</p>
<h4 id="3XX"><a href="#3XX" class="headerlink" title="3XX"></a>3XX</h4><p><strong>301 Move Permanently</strong>，永久重定向，资源不存在，需要用新的url访问。</p>
<p><strong>302 Found</strong>，临时重定向，表示资源还在，但是需要用另一个url请求。</p>
<p><strong>304 Not Modified</strong>，不具有跳转含义，表示资源未修改，重定向到已缓存文件，也称缓存重定向，用于缓存控制。</p>
<h4 id="4XX"><a href="#4XX" class="headerlink" title="4XX"></a>4XX</h4><p><strong>400 Bad Request</strong>，</p>
<p><strong>403 Forbidden</strong></p>
<p><strong>404 Not Found</strong></p>
<h4 id="5XX"><a href="#5XX" class="headerlink" title="5XX"></a>5XX</h4><p><strong>500 Internal Server Error</strong></p>
<p><strong>501 Not Implement</strong></p>
<p><strong>502 Bad Gateway</strong></p>
<p><strong>503 Service Unavailable</strong></p>
<h3 id="短链接"><a href="#短链接" class="headerlink" title="短链接"></a>短链接</h3><h3 id="HTTP常见字段有哪些"><a href="#HTTP常见字段有哪些" class="headerlink" title="HTTP常见字段有哪些"></a>HTTP常见字段有哪些</h3><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h3 id="1-Java中thread有几种创建方式，区别是什么"><a href="#1-Java中thread有几种创建方式，区别是什么" class="headerlink" title="1. Java中thread有几种创建方式，区别是什么"></a>1. Java中thread有几种创建方式，区别是什么</h3><h3 id="2-ThreadPoolExecutioner的参数和工作流程"><a href="#2-ThreadPoolExecutioner的参数和工作流程" class="headerlink" title="2. ThreadPoolExecutioner的参数和工作流程"></a>2. ThreadPoolExecutioner的参数和工作流程</h3><h3 id="3-Thread-Local"><a href="#3-Thread-Local" class="headerlink" title="3. Thread Local"></a>3. Thread Local</h3><h3 id="4-HashMap源码、扩容步骤"><a href="#4-HashMap源码、扩容步骤" class="headerlink" title="4. HashMap源码、扩容步骤"></a>4. HashMap源码、扩容步骤</h3><h3 id="5-java1-8的hashmap、hashmap-resize和1-7有什么区别"><a href="#5-java1-8的hashmap、hashmap-resize和1-7有什么区别" class="headerlink" title="5. java1.8的hashmap、hashmap resize和1.7有什么区别"></a>5. java1.8的hashmap、hashmap resize和1.7有什么区别</h3><h3 id="6-为什么hashmap计算hashcode要计算hashcode后高位运算再-amp-old-capacity"><a href="#6-为什么hashmap计算hashcode要计算hashcode后高位运算再-amp-old-capacity" class="headerlink" title="6. 为什么hashmap计算hashcode要计算hashcode后高位运算再&amp;(old capacity)"></a>6. 为什么hashmap计算hashcode要计算hashcode后高位运算再&amp;(old capacity)</h3><h3 id="7-volatile，volatile和锁的区别"><a href="#7-volatile，volatile和锁的区别" class="headerlink" title="7. volatile，volatile和锁的区别"></a>7. volatile，volatile和锁的区别</h3><h3 id="8-synchronized和reentrantLock区别"><a href="#8-synchronized和reentrantLock区别" class="headerlink" title="8. synchronized和reentrantLock区别"></a>8. synchronized和reentrantLock区别</h3><h3 id="9-synchronized锁升级过程"><a href="#9-synchronized锁升级过程" class="headerlink" title="9. synchronized锁升级过程"></a>9. synchronized锁升级过程</h3><h3 id="10-GC"><a href="#10-GC" class="headerlink" title="10. GC"></a>10. GC</h3><h3 id="11-成员变量和局部变量的区别"><a href="#11-成员变量和局部变量的区别" class="headerlink" title="11.成员变量和局部变量的区别"></a>11.成员变量和局部变量的区别</h3><ol>
<li><p>类中位置不同：成员变量在类中方法外，局部变量在方法内或方法的形参</p>
</li>
<li><p>内存中位置不同：成员变量在堆空间，局部变量在栈空间</p>
</li>
<li><p>生命周期不同：成员变量的生命周期与对象相同，局部变量随着方法的调用而存在，调用完毕消失。</p>
</li>
<li><p>初始化值不同：成员变量在堆中有默认初始值，局部变量没有默认初始值，必须先定义赋值再使用。</p>
</li>
</ol>
<ul>
<li><p>[ ] ### 16. this关键字的作用</p>
</li>
<li><p>可以调用本类的成员</p>
</li>
<li>解决局部变量和成员变量的重名问题</li>
<li><p>代表所在类的对象引用</p>
</li>
<li><p>[x] ### 17.字符串常量池</p>
</li>
<li><p>当使用双引号创建字符串对象的时候，系统会检查字符串是否在字符串常量池中存在，若不存在则创建，存在则不会重新创建，直接复用。</p>
</li>
<li><p>双引号创建的字符串对象在字符串常量池中存储，通过构造方法创建的字符串对象，在堆内存中存储。</p>
</li>
<li><p>从jdk7开始字符串常量池从方法区挪到了堆内存。</p>
</li>
<li><p>[x] ### 18. ==和equals()的区别</p>
</li>
</ul>
<h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><ol>
<li>==是关系运算符，equals()是方法，都返回布尔值</li>
<li><p>Object的==和equals()比较的都是地址，作用相同</p>
</li>
<li><p>==：基本类型，比较值是否相等；引用类型，比较地址是否相等；不能比较没有父子关系的两个对象。</p>
</li>
<li><p>equals()：JDK中一般的类都已经重写了equals方法，比较的是内容；如果没有重写equals()，将调用父类（默认Object类）的equals()方法，Object的equals(obj)方法比较使用了this==obj，即比较地址值</p>
</li>
</ol>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ul>
<li><img src="%E9%9D%A2%E8%AF%95/image-20210421205614902.png" alt="image-20210421205614902"><br>true，abc存储在字符串常量池中，地址相同，而对于引用类型，==判断地址是否相等。</li>
<li><img src="%E9%9D%A2%E8%AF%95/image-20210421205801280.png" alt="image-20210421205801280"><br>false，s1的abc在字符串常量池中，而s2new一个新对象有新的地址空间，故地址不同，结果为false。</li>
<li><img src="%E9%9D%A2%E8%AF%95/image-20210421205923614.png" alt="image-20210421205923614"><br>false，<strong>字符串+拼接时，系统底层会自动创建出一个StringBuilder对象，然后调用其append方法完成拼接，最后调用其toString方法转换为String型。</strong></li>
<li><p><img src="%E9%9D%A2%E8%AF%95/image-20210421210357841.png" alt="image-20210421210357841"><br><strong>常量优化机制，”a“+”b“+”c“=”abc”</strong><br><strong>变量+string ————&gt;StringBuilder</strong><br><strong>String+String————&gt;常量优化机制</strong></p>
</li>
<li><p>[x] ### 19. switch()支持哪些数据类型，为什么？</p>
</li>
</ul>
<p><a href="https://www.cnblogs.com/eycuii/p/11470950.html#2933431993" target="_blank" rel="noopener">为什么switch不支持long - eycuii - 博客园 (cnblogs.com)</a></p>
<h4 id="switch支持的数据类型"><a href="#switch支持的数据类型" class="headerlink" title="switch支持的数据类型"></a>switch支持的数据类型</h4><ul>
<li>基本数据类型 char byte short int</li>
<li>基本数据类型包装类 Character  Byte  Short  Integer</li>
<li>JDK1.5之后，枚举类型enum</li>
<li>JDK1.7之后，String</li>
</ul>
<h4 id="为什么不支持Long"><a href="#为什么不支持Long" class="headerlink" title="为什么不支持Long"></a>为什么不支持Long</h4><p>原因就是 switch 对应的 JVM 字节码 <strong>lookupswitch、tableswitch</strong> 指令<strong>只支持 int 类型</strong>。</p>
<p>下面是 JVM 规范中的说明（<a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-3.html#jvms-3.10）：" target="_blank" rel="noopener">https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-3.html#jvms-3.10）：</a></p>
<blockquote>
<p>The Java Virtual Machine’s <em>tableswitch</em> and <em>lookupswitch</em> instructions operate only on <code>int</code> data. Because operations on <code>byte</code>, <code>char</code>, or <code>short</code> values are internally promoted to <code>int</code>, a <code>switch</code> whose expression evaluates to one of those types is compiled as though it evaluated to type <code>int</code>. If the <code>chooseNear</code> method had been written using type <code>short</code>, the same Java Virtual Machine instructions would have been generated as when using type <code>int</code>. Other numeric types must be narrowed to type <code>int</code> for use in a <code>switch</code>.</p>
<p>Java虚拟机的<em>tableswitch</em>和<em>lookupswitch</em>指令只对<code>int</code>数据进行操作。由于对<code>byte</code>、<code>char</code>或<code>short</code>值的操作在内部被提升为<code>int</code>，因此，如果<code>switch</code>的表达式求值为这些类型之一，则编译时就像求值为<code>int</code>类型一样。如果<code>chooseNear</code>方法是使用类型<code>short</code>编写的，那么会生成与使用类型<code>int</code>相同的Java虚拟机指令。其他数字类型必须缩小为<code>int</code>类型，以便在<code>switch</code>中使用。</p>
</blockquote>
<p>byte、char、short 类型在编译期默认提升为 int，并使用 int 类型的字节码指令。所以对这些类型使用 switch，其实跟 int 类型是一样的。</p>
<h4 id="为什么支持String"><a href="#为什么支持String" class="headerlink" title="为什么支持String"></a>为什么支持String</h4><p>switch 支持 String 其实就是<strong>语法糖</strong>。编译器会根据字符串的 <code>hashCode</code> 来处理。</p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CopyString a = <span class="string">"aa"</span>;</span><br><span class="line"><span class="keyword">switch</span> (a) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"aa"</span>:</span><br><span class="line">    System.out.println(<span class="string">"111"</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"AaAa"</span>:</span><br><span class="line">    System.out.println(<span class="string">"222"</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"AaBB"</span>:</span><br><span class="line">    System.out.println(<span class="string">"333"</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>反编译后：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CopyString var1 = <span class="string">"aa"</span>;</span><br><span class="line"><span class="keyword">byte</span> var3 = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">switch</span>(var1.hashCode()) &#123; <span class="comment">// 第一个switch，根据hashCode计算第二个switch内的位置</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">3104</span>:</span><br><span class="line">    <span class="keyword">if</span> (var1.equals(<span class="string">"aa"</span>)) &#123;</span><br><span class="line">      var3 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2031744</span>:</span><br><span class="line">    <span class="keyword">if</span> (var1.equals(<span class="string">"AaBB"</span>)) &#123;</span><br><span class="line">      var3 = <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var1.equals(<span class="string">"AaAa"</span>)) &#123;</span><br><span class="line">      var3 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(var3) &#123; <span class="comment">// 第二个switch，执行原switch的逻辑</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">    System.out.println(<span class="string">"111"</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    System.out.println(<span class="string">"222"</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    System.out.println(<span class="string">"333"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以发现，会先根据 hashCode 找出原始 switch 内的位置，再执行原代码逻辑。</p>
<h4 id="为什么用两个-switch-？"><a href="#为什么用两个-switch-？" class="headerlink" title="为什么用两个 switch ？"></a>为什么用两个 switch ？</h4><p>就是为了减少编译器的工作。</p>
<p>比如 switch 内有的 case 不写 break 等复杂情况，如果想直接根据 hashCode + equals 来只生成一个 switch，编译器就需要考虑各种情况。</p>
<p>所以目前编译器只做位置映射，第二部分直接按原 switch 来生成了。</p>
<h3 id="equals-和"><a href="#equals-和" class="headerlink" title="equals 和 =="></a>equals 和 ==</h3><h4 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    String s = <span class="string">"abc"</span>;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"abc"</span>);</span><br><span class="line">    System.out.println(s.equals(sb)); 			<span class="comment">// false</span></span><br><span class="line">    System.out.println(sb.equals(s));			<span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>两个都是false，但原理不同</p>
<ul>
<li><p><code>s.equals(sb)</code>调用的是String类重写的equals方法，方法源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        String anotherString = (String)anObject;</span><br><span class="line">        <span class="keyword">int</span> n = value.length;</span><br><span class="line">        <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">            <span class="keyword">char</span> v1[] = value;</span><br><span class="line">            <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>String类的equals方法会判断内容是否相同，但必须传入String类型对象，否则会返回false。若传入String对象，则会一一比较对象内部值是否相同。</p>
<p>因此在上例中，传入StringBuilder对象，equals方法直接返回false。</p>
</li>
<li><p><code>sb.equals(s)</code>，本身在StringBuilder类中，并没有重写equals方法，而StringBuilder类继承自Object类，因此这里调用Object中的equals方法，源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Object类equals方法底层还是使用==判断，即判断地址是否相同，因此StringBuilder的equals方法也是判断地址值是否相同，因此返回false。</p>
</li>
</ul>
<h4 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String a = <span class="string">"Programming"</span>;</span><br><span class="line">        String b = <span class="keyword">new</span> String(<span class="string">"Programming"</span>);</span><br><span class="line">        String c = <span class="string">"Program"</span> +  <span class="string">"ming"</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(a == b);			<span class="comment">//false</span></span><br><span class="line">        System.out.println(a == c);			<span class="comment">//true</span></span><br><span class="line">        System.out.println(a.equals(b));	<span class="comment">//true</span></span><br><span class="line">        System.out.println(a.equals(c));	<span class="comment">//true</span></span><br><span class="line">        System.out.println(a.intern() == b.intern());	<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>a和c都在字符串常量池中，但还略有差别，a直接在字符串常量池中创建对象。c常量优化机制，最后生成programming在字符串常量池中存在，则不创建对象，而直接指向字符串常量池中位置。</p>
<p>b指向堆中new的一个String对象。因此a，b地址不同，而引用类型使用<code>==</code>判断地址,所以<code>a == b</code>结果为false，<code>a == c</code>为true；而String重写equals方法，用来判断字符串字面值是否相等，因此两者都为true</p>
<p>最后intern方法，intern() 方法返回字符串对象的规范化表示形式。当且仅当 s.equals(t) 为 true 时，s.intern() == t.intern() 才为 true。</p>
<h4 id="三、String-s-new-String-quot-abc-quot-过程中会创建几个对象。"><a href="#三、String-s-new-String-quot-abc-quot-过程中会创建几个对象。" class="headerlink" title="三、String s = new String(&quot;abc&quot;);过程中会创建几个对象。"></a>三、<code>String s = new String(&quot;abc&quot;);</code>过程中会创建几个对象。</h4><p><strong>一个或两个</strong></p>
<p>首先，若字符串常量池中存在<code>&quot;abc&quot;</code>，则在堆中new一个新的String对象。共创建一个对象。</p>
<p>若字符串常量池中不存在<code>&quot;abc&quot;</code>，则现在字符串常量池中创建<code>&quot;abc&quot;</code>String对象，然后在堆中new新对象。共创建两个对象。</p>
<h3 id="20-finally中的代码是否一定执行？"><a href="#20-finally中的代码是否一定执行？" class="headerlink" title="20.finally中的代码是否一定执行？"></a>20.finally中的代码是否一定执行？</h3><p>两种情况不会执行：</p>
<ol>
<li>在进入try之前出现异常，程序直接结束</li>
<li>在try中强制退出，如使用<code>System.exit(0)</code> </li>
</ol>
<h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a><strong>注意</strong>：</h4><p>:warning: 当try/catch中有return语句时，finally中的语句会在return之前执行</p>
<p>:rotating_light: 当try、catch、finally中都有return语句时，finally中的return会覆盖try/catch中的return。</p>
<p>:red_circle: try语句块中某一条语句出现异常，则其后面不再执行，直接进入catch语句。</p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">20_0000_0000</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">long</span> c;</span><br><span class="line">c = a * b;</span><br><span class="line">System.out.println(c); <span class="comment">//这个结果是错误的</span></span><br><span class="line"><span class="comment">//a和b都是int类型，在计算时都使用int类型，计算结果同样使用int类型存储，因为计算结果太大溢出，因此int存储的结果是错误的，再赋值给long类型也是错误的结果。</span></span><br><span class="line">c = (<span class="keyword">long</span>)a * b;</span><br><span class="line">System.out.println(c); <span class="comment">//这个结果正确</span></span><br><span class="line"><span class="comment">//将a强制转换为long后，a和b的运算使用long类型进行，最后使用long存储计算结果，赋值给c，结果正确。</span></span><br></pre></td></tr></table></figure>
<h3 id="Math-round-11-5-等于多少？Math-round-11-5-等于多少？"><a href="#Math-round-11-5-等于多少？Math-round-11-5-等于多少？" class="headerlink" title="Math.round(11.5) 等于多少？Math.round(-11.5)等于多少？"></a><code>Math.round(11.5)</code> 等于多少？<code>Math.round(-11.5)</code>等于多少？</h3><p><code>Math.round(11.5)</code>返回值是12，<code>Math.round(-11.5)</code>返回值是-11.</p>
<p>==<strong>四舍五入的原理是在参数上加0.5然后向下取整</strong>==</p>
<ul>
<li>[ ] ### 20.spring boot跨域</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span><span class="comment">//配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsConfig</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">corsConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurer() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">				registry.addMapping(<span class="string">"/**"</span>)<span class="comment">//对所有请求路径</span></span><br><span class="line">				          .allowedOrigins(<span class="string">"*"</span>)<span class="comment">//允许所有域名</span></span><br><span class="line">				          .allowCredentials(<span class="keyword">true</span>)<span class="comment">//允许cookie等凭证</span></span><br><span class="line">				          .allowedMethods(<span class="string">"GET"</span>, <span class="string">"POST"</span>, <span class="string">"DELETE"</span>, <span class="string">"PUT"</span>,<span class="string">"PATCH"</span>)<span class="comment">//允许所有方法</span></span><br><span class="line">				          .maxAge(<span class="number">3600</span>);  </span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>[ ] ### 21.String 和 StringBuilder的区别</li>
</ul>
<ul>
<li><p>String不可改变，StringBuilder可以改变。</p>
</li>
<li><p>[x] ### 22.变量和常量比较的方法</p>
</li>
</ul>
<p>String类型变量String s，常量”test“，二者比较有两种方法（字符串不能用==比较），如下：</p>
<ul>
<li>s.equals(“test”)</li>
<li>“test”.equals(s)</li>
</ul>
<p>两种方法都是调用equals()比较，但第一种方法有可能s是空指针，导致出现空指针异常，第二种方法常量调用equals()一定不会出现异常。<strong>推荐第二种方法</strong>。</p>
<h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><ul>
<li>redis业务场景</li>
<li>Redis为什么可以做缓存，做缓存可能有哪些问题</li>
<li>缓存穿透、缓存雪崩</li>
<li>redis持久化，RDB和AOF的区别</li>
<li>redis事务怎么实现，为什么不支持回滚</li>
</ul>
]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题17.14.最小k个数</title>
    <url>/%E9%9D%A2%E8%AF%95%E9%A2%9817-14-%E6%9C%80%E5%B0%8Fk%E4%B8%AA%E6%95%B0.html</url>
    <content><![CDATA[<p>@</p>
<p>法一：直接排序，然后取前K个值，时间复杂度：O(n*logn)，排序算法的时间复杂度。空间复杂度：O(logn)，排序递归栈的空间。</p>
<p>法二：使用堆，可以建立一个小根堆，遍历数组初始化小根堆，然后每次取出头元素，也就是最小的元素，然后调整堆，再次获取第二小元素，这样可以保证最小K个数的顺序，但相应的，需要的时间复杂度和空间复杂度较大。</p>
<p>​    时间复杂度：O（n*logn），其中建立堆的时间复杂度是O（n），每次调整的时间复杂度是O(n*logn)，因此总时间是O（n*logn）</p>
<p>法三：本题不需要按照顺序返回最小的K个数，因此可以使用大根堆，建立一个K个元素的大根堆，遍历数组，若当前元素大于树根的值，则删除树根，添加当前元素。最后，堆中剩余的元素就是最小的K个数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] smallestK(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> k)&#123;</span><br><span class="line">        <span class="keyword">int</span> len = arr.length;</span><br><span class="line">        <span class="keyword">if</span>(k == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        PriorityQueue&lt;Integer&gt; stack = <span class="keyword">new</span> PriorityQueue&lt;Integer&gt;(<span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer i1, Integer i2)</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> i2-i1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)&#123;</span><br><span class="line">            stack.offer(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = k; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(stack.peek() &gt; arr[i])&#123;</span><br><span class="line">                stack.poll;</span><br><span class="line">                stack.offer(arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[k];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)&#123;</span><br><span class="line">            res[i] = stack.poll();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>还有根据快排思想做题，但是还没搞懂······</p>
<p>以上代码通过测试。</p>
]]></content>
      <categories>
        <category>leetcode</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
