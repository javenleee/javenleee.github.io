<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[每日一题-881.救生艇]]></title>
    <url>%2F%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-881-%E6%95%91%E7%94%9F%E8%89%87.html</url>
    <content type="text"><![CDATA[881.救生艇 第 i 个人的体重为 people[i]，每艘船可以承载的最大重量为 limit。 每艘船最多可同时载两人，但条件是这些人的重量之和最多为 limit。 返回载到每一个人所需的最小船数。(保证每个人都能被船载)。 思路很简单，要使需要的船最少，就要满足每艘船尽可能满，因此先满足最重的，如果最重的满足后还可以加人，那就再加一个。注意题目的条件，最多只能载两个人。 先放自己写的：(每次要找最重的，竟然没想到数组排序····而是首先想到要找能乘的下的最大的，因此想到了floor····) 1234567891011121314151617181920212223242526272829303132333435class Solution &#123; int cnt = 0; // map初始化 TreeMap&lt;Integer,Integer&gt; map = new TreeMap&lt;&gt;(); for(int i = people.length-1;i&gt;=0;i--)&#123; map.put(people[i],map.getOrDefault(people[i],0)+1); &#125; // 一直循环到map为空，即所有人都上船 while(map.size() &gt; 0 )&#123; boolean flag = true; int left = limit; int count = 2; // 还能乘的下人 while(flag &amp;&amp; count &gt; 0)&#123; // 取出当前能乘的下的最大值 Integer n = map.floorKey(left); // 不存在说明没有符合条件的人了，下一条船 if( n == null )&#123; flag = false; &#125;else&#123; left -= n; int num = map.getOrDefault(n,0); // 上船 if(num == 1)&#123; map.remove(n); &#125;else&#123; map.put(n,num-1); &#125; count--; &#125; &#125; cnt++; &#125; return cnt;&#125; 再放官方版本： 贪心算法，排序+双指针 1234567891011121314public int numRescueBoats(int[] people, int limit) &#123; int cnt = 0; Arrays.sort(people); int left = 0, right = people.length-1; while(left &lt;= right)&#123; // 如果可以的话，最轻的和最重的同乘是最优方案。 if(people[left] + people[right] &lt;= limit)&#123; left++; &#125; right--; cnt++; &#125; return cnt;&#125; 没学算法的菜鸡只能靠着强大的集合硬干:chicken:]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[An Empirical Analysis of Privacy in the Lightning Network]]></title>
    <url>%2FAn-Empirical-Analysis-of-Privacy-in-the-Lightning-Network.html</url>
    <content type="text"><![CDATA[闪电网络隐私的实证分析摘要支付渠道网络，特别是Lightning Network，似乎为比特币和其他基于区块链的加密货币缺乏可扩展性和隐私性提供了解决方案，先前的研究主要关注可扩展性，可用性以及Lightning Network的加密经济，然而很少探索他在实践中实现的隐私级别。本文对Lightning Network提供的隐私性提出了一个进行深度分析，提出了几种利用网络公开信息的攻击，来了解那些设计为保密的信息，例如一个节点拥有多少货币或者在网络中路由的一次交易中谁是发送方，谁是接收方。 1.介绍从2008年推出以来，比特币已经成为最广泛应用的加密货币。比特币去中心化和无需许可性质允许所有用户加入网络，并且避免了对他们中控制了资金流的中介机构和当局的需要。相反，每笔交易的有效性由网络参加者们自己做出的共识决定。有效的交易被记录再公共区块链中。因此，区块链实际上充当记录所有已经发生交易的账本。 在网络中将交易广播给所有人以及在永久账单中存储他们的需要对基于区块链的加密货币的寿命提出了两个问题。首先，他带来了严重的可扩展性限制：比特币区块链现在已经超过300GB，并且比特币每秒仅能完成10笔交易。其他的加密货币的吞吐量略高，然而在这些基于广播的系统，吞吐量和安全性存在一个固有的权衡。第二，账本的透明性意味着任何人可以观察货币的流向，确定交易的另一方，并且将不同的交易联系起来。 这一点在比特币上表现得最为明显，然而这种类型的分析甚至拓展到明确设计隐私的加密货币。 目前为了解决可扩展性而部署的最有前途的解决方案是所谓的&quot;layer-two&quot;协议，其中Lightning Network （LN）是自从2018年3月问世以来最受欢迎的解决方案。在LN中，成对的参与者使用比特币区块链来打开和关闭二者之间的payment channels 。在这个通道内，这两者可以进行双方之间的任意多的链下交易，而不需要使用区块链。除了单一通道之外，Lightning支持多multi-hop支付路由，这意味着即使是没有直接互联的参与者仍然可恶意通过更广义的payment channel network (PCN) 路由支付。在这个网络中的节点可以收取路由小费，以这种方式他们被激励去路由支付。 除了在提高可扩展性方面的承诺，Lightning 似乎还解决了隐私问题。像我们在第二节详细说明的，为了建立PCN，网络中的节点和网络中大多数通道是公开的（尽管有些通道可能是私有的），给定通道的容量也是如此，这意味着这条通道可以路由的最大支付值。然而， 与通道有关的个人余额是保密的。此外，支付不会广播给所有节点并且不会存储在公开账本中。即使是通过multi-hop路由的支付，它使用洋葱路由来保证在路由路径上每个节点只能识别他的直接前任和后继节点。 然而，就像基于账本的加密货币一样，Lightning网络中隐私潜力和现实之间的差距很大，正如我们在本工作中所示。特别地，我们考虑LN承诺的四个隐私属性： Private channels 应该允许两个节点共享一个通道，但是保持他和他所有信息（容量，参与者等等）存在，并在其他网络中隐藏，我们在3.2节探索了这个属性，通过提出一个启发式方法，他能够识别私有通道的链上资产以及通道上的一方甚至双方。 第三方余额秘密，就是说即使通道的容量是公开的，参与者各自的余额也应该是保密的。我们在第四节中探索了这个属性，通过提出了评估了一种通用方法，主动攻击者（即网络中右节点的开发通道）可以发现通道上的余额。 路径关系匿名表示，路由支付的中继节点不应该知道除了他的直接前任和后继之外的其他节点是支付路由的一部分。我们在第5节探索了这个属性，我们利用一个我们构建的LN模拟器（在5.1节描述）来评估一个中继节点推断他所路由的支付的发送方和接收方的能力 路径外支付隐私， 不涉及路由的其他任意节点不应该推断得到任何关于路由节点或者支付值的信息，我们在第6节探索了这个属性，通过提出和评估了一个方法，一个主动攻击者可以使用发现余额的能力来形成网络快照 。通过比较连续的网络快照，攻击者可以通过确认通道余额的变化位置以及多少推断出支付。 1.1道德考虑第五节和第六节提出的攻击是在一个模拟网络上进行评估的，而不是实时网络，但是在第四节的攻击是在实时测试网络评估的。与比特币网络上的相关主动攻击一样，我们尽一切努力来保证我们的攻击不会影响网络的正常运行：攻击期间发送的信息没有不正常的影响也不会花费任何金钱来处理，并且他们的量相对较小（我们最多向每个被攻击节点发送24条信息）。因此我们相信，对于处理这些信息的节点没有任何长期或短期的破坏性影响。我们在2020年向三个主要LN代理商和流动性提供商Bitrefill的开发者公开了本文的结果，并在之后和Ligtning开发者讨论了本文。 1.2相关工作我们认为所有关注Ln的研究都是相关的，特别时都是关于隐私性的。大多数前人的研究已经关注了LN的可扩展性，实用性和加密经济这些方面，或者关注他的图属性。Rohrer等人研究了LN对基于拓扑的攻击的敏感性。Tochner等人提出了提出了一种利用multi-hop路由方式的Dos攻击。在其他发现中，他们还表明，是个最中心化的节点可以通过他们的攻击破坏大约80%的路径。Perez-Sola等人提出了一种攻击，他能减少一个节点通道的容量，从而阻止节点参与到网络中。Tikhomirov等人展示了虫洞攻击是如何阻止诚实中间节点参与支付路由的。 在隐私方面，Malavolta等人发现了一种利用锁机制的新的攻击，这种锁机制允许不诚实用户从路由路径上的诚实中间节点偷取支付小费。他们提出匿名multi-hop 锁作为一种更安全的选项。Nowatowski和Ton研究了各种启发式方法，来确认在比特币区块链上的Lightning交易。在我们这项工作的同时，Romiti等人构建了几个启发式方法来将Lightning实体和比特币钱包连接起来。其中一个启发式方法与我们在3.2节构建的tracing heuristic 相似但是他们的目标是创建增强的比特币集群方法而不是识别私有通道，正如我们在第四节进一步描述的，其他人已经实施了余额发现攻击，这些攻击的主要限制是他们依赖攻击者收到的特定的错误信息，所以随着网络的发展很容易变得无关紧要。我们通过提出了一种通用攻击（在第四节）以及更广泛的研究这种攻击的影响，克服了这种限制。 Beres等人简要的研究了寻找支付发送方和接收方的问题。与我们的工作类似，他们基于公开可用的网络快照和某些节点所有者发部的信息开发了LN流量模拟器，然而，他们的工作只考虑了single-hop支付，也没有研究其他隐私属性。很多其他LN研究使用了网络模拟器，。其中几个模拟器被用作执行LN网络的经济分析，然而CLoTH模拟器只提供了性能统计数据（例如完成一笔支付的实践，支付失败可能性等等）。然而，所有这些模拟器都对拓扑结构、路径选择算法和支付分布做出了几个简单的假设。因此他们不适合分析其隐私属性。 2.背景为了打开Lightning通道，双方将比特币存入一个2of2的多签名地址，这意味着花费这些货币的任何交易都需要被双方签名。这些资金代表着这个通道的容量，也就是说，可以通过这个通道传输的最大交易值。一旦一个通道建立起来，参与者可以使用它来交换任意数量的支付，只要其中一个有正余数。他们也可以通过一个比特币交易来关闭通道，该交易从2of2多签名地址返还他们各自的余额。 然而，大多数用户并没有直接连接，因此需要通过公有LN来路由他们的支付，在公有LN中，节点通过公钥标识，边代表着通道，他们与一个通道认证id、通道容量C、和通过该通道的路由小费fee公开关联起来。边也隐式地与通道的收入和支出秘密联系起来。除了只有在路由时才显示的私有通道外，网络的拓扑以及他的公开标签对每一个节点都是公开的。当路由一个支付的时候，发送方（Alice）使用洋葱路由来隐藏他和接收者（Bob）的关系。Alice根据和Bob之间通道的容量和路由小费来选择完整的路径（源路由）。最终的目标是这条路径上的每一个中间节点转发这个支付到他的后继节点，并期望他的前任节点也这么做，这样余额就不会改变。然而节点不能立刻发送资金，因为可能是支付失败的情况。为了创建中间节点状态，LN使用了hashed timelock contracts(HTLCs) 哈希时间锁合约，这个合约支持有时间限制的有条件支付。总之，这个协议遵循以下五个步骤让Alice支付Bob： 开发票， Bob生成一个密钥x并且计算他的哈希值h。他开一个包含h和一些支付金额amt的发票给Alice 洋葱路由，Alice选择了一条路径$A \rightarrow U_1 \rightarrow … \rightarrow U_n \rightarrow B$ ，然后Alice生成一个Sphinx数据包，目标是Bob，路由经过$U_i$ 节点。然后Alice发送最外层的洋葱包$onion_1$ 给 $U_1$ 通道准备。从$U_{i-1}$ 接收到$onion_i$ 后，$U_i$解密获得cid，它指示了下一个节点$U_{i+1}$ ，要发送的数量$amt_i$，延迟$t_i$ ，以及要转发给$U_{i+1}$ 的 $onion_{i+1}$ 数据包。在将$onion_{i+1}$ 发送给$U_{i+1}$ 之前，$U_i$ 和 $U_{i-1}$ 通过使用HTLC更新他们中间节点状态来准备通道，以确保如果$U_{i-1}$ 没有在延迟$t_i$ 前向$U_i$ 提供h的预映像，$U_i$ 可以要求退还他们的付款。完成此操作后，$U_i$ 可以将$union_{i+1}$ 发送给 $U_{i+1}$ 发票结算。最终，Bob从$U_n$接收到$union_{n+1}$ 并解码，获得$(amt,t,h)$ ，如果amt和h跟她开的发票匹配，它发送发票预映像x给$U_{n-1}$ 来赎回其支付的金额amt。这个值按照路径以此向后发送。 通道结算。在路径上的每一步，$U_i$ 和$U_{i+1}$ 使用x结算他们的通道，例如，要确认更新状态反映了$amt_i$ 从 $U_i$ 发送到 $U_{i+1}$ 这个事实，因此amt被从Alice发送到Bob。 3.区块链分析3.1数据和测量3.2隐私通道4.balance discovery5.path discovery5.1lightning network simulator5.2simulation result6.payment discovery6.1payment discovery algorithm6.2attack simulation6.3simulated attack results7.conclusion]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HyperLedger Fabric 安装]]></title>
    <url>%2FHyperLedger-Fabric-%E5%AE%89%E8%A3%85.html</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[How to bootstrap snarky blockchain]]></title>
    <url>%2FHow-to-bootstrap-snarky-blockchain.html</url>
    <content type="text"><![CDATA[Mining for Privacy:How to Bootstrap a Snarky Blockchain摘要非交互零知识证明，更具体说是简洁非交互零知识证明（zk-SNARKs，zero-knowledge Succient No-inactive Arguments of knowledge），已经被证明时区块链和分布式账本领域的瑞士军刀，具有多种在隐私、交互操作、可扩展性方面的应用。许多常用的SNARK系统依赖结构化参考字符串，这个字符串的安全生成被证明是他们致命弱点：如果用于生成字符串的随机性是已知的，则证明系统的健全性可能会被破坏，从而对使用他们的底层区块链系统造成毁灭性后果。在这项工作中，我们首次描述和分析了一种区块链机制，该机制能够产生一个安全的SRS，他的特征是在与区块链协议本身具有可比性的条件下显示安全性的特点。我们的机制利用最近发现的可更新结构化参考字符串来以完全分布式的方式执行安全生成。通过这种方式，SRS源自区块链协议本身的正常执行。不需要额外的安全假设或者链下的计算和\或验证。我们为这个参数的设置提供了具体的指导，允许在合理的时间段内完成安全设置。我们也提供了一个激励方案，当与更新机制配合使用时，可以适当地激励参与者为安全的参考字符串生成做出贡献。 1.介绍在分布式账本领域，无交互的零知识证明有许多有趣的应用，特别是，他们已经成功被应用到隐私引入这些固有的公共点对点系统中，更值得注意的是，Zerocash证明了他们在创建私有货币方面的用处。除此之外，还有好多建议将相同的技术应用到智能合约以增加隐私性。除了隐私性，其他零知识证明的应用包括区块链的交互操作性和可扩展性 对于这些设计的实际效率，有两件事是最重要的：证明的简洁性，以及验证这些证明的速度。账本的分布式特性要求大量用户存储和验证每一个证明，这使得许多零知识证明系统不适合。 对所谓的zk-SNARKs的研究旨在精确优化这些特征：证明大小通常在千字节以下，验证时间以毫秒为单位。众所周知，无交互零知识证明需要一些共享的随机性或者公共参考字符串。对很多简洁系统，强壮的属性是必须的：不仅是需要一个共享随机值，而且必须遵守一个特定的结构。这样的结构化参考字符串（或者SRS）通常由相关的组元素组成，例如：$g^{x^i}$​​​ 对于$i \in Z_n$​​​ 。 从公共随机数中采样这样一个参考字符串的明显方法揭示了所使用的指数——对这些值的掌握破坏了这个证明系统本身的稳定性。更糟糕的是，这些系统的安全性通常依赖于指数知识的假设，这个假设表明了以这种方式创建相关的组元素需要知道基础指数，因此任何SRS采样器都必须知道这个被使用的指数并且被信任可以消除他们，从而有效的变成一个底层系统的单点故障。虽然安全多方计算能够并且已经被用于减少在设置过程中的这类信任，安全计算参与者的选择和MPC协议生成SRS的验证保留了中心化的元素。在需要SNARKs的去中心化系统的设置中使用MPC仍然有争议。 最近的工作已经发现了具有可更新参考字符串的简洁零知识证明系统。在这些系统中，给定一个参考字符串，有可能产生一个更新参考字符串，因此要知道新字符串的trapdoor，既需要知道旧字符串的trapdoor，也需要知道更新中使用的随机性。推测一个区块链协议可以被用来安全地生成这样一个参考字符串。然而，到目前为止，产生SRS的确切区块链机制以及其可以提供的安全保证的描述仍然难以琢磨。 1.1 我们的贡献在这项工作中，我们首次描述和分析了一种区块链机制，这种机制能够产生一个安全的SRS（Structured Reference String ？，结构化参考字符串？），其特征是，在类似的条件下区块链协议被证明是安全的。明显不同的是，我们隐式地使用安全擦除，并且仅仅在一个特定初始化期间需要诚实的大多数。SRS源于区块链协议本身的正常运行，不需要额外的安全假设，或者链下的计算和\或验证。 我们主要依赖”Nakamoto-style”的区块链质量属性——分布式账本，其中一个随机过程选择哪个用户可以将块添加到已建立的链上。这样的账本依赖诚实大多数的哈希算力（或者一些其他资源）——并且可以证明链质量属性，这表明任何足够长链片段都会有一些被诚实节点创建的块。 我们在第三章描述的构造中将参考字符串更新集成到生成块过程中，但是由于更新计算是一个计算量很大的操作（尽管，与暴力破解哈希相反，但是有用），我们面临额外的困难。由此产生了两个方面的问题。首先，攻击团伙可以通过在更新中提供少量的熵来走捷径，并且尝试利用这一额外挖矿能力来推翻这个参考字符串，这可能对攻击者来说有很大的好处。其次，即使是非共谋的理性区块创建者，也有可能被激励来使用不良随机性，这可能减少或者消除更新的任何安全好处。我们的工作解决了这两个问题。 在本文的完整版本中，我们通过在通用组合框架中提供分析，正式证明了我们的机制产生了一个安全参考字符串。此外，本文的完整版本通过实验分析演示了如何具体参数化工作证明账本，来保证走捷径的攻击者（而诚实的用户不会走捷径）仍然无法subvert破坏参考字符串。在我们实验章节提供的具体的结果可以用来指导参数的选择，以便在实时区块链系统中运行我们的参考字符串生成机制。 在第四节中，我们更进一步介绍一个激励机制，它能够保证协议中想要最大化利益的理性参与者能够避免低熵攻击。简而言之，激励机制要求最终链中更新贡献者的随机部分会被要求揭示他们的trapdoor，它会被潜在账本规则验证为随机Oracle预言机？输出。只有使用者能够证明他们的更新是随机的，他们才能获得相应的奖励。小心的选择奖励分配能够使我们能够证明，理性的参与者会利用高熵指数，从而为SRS计算做出贡献。 1.2相关工作除了与引入可更新字符串的工作的明显关系，还有尝试实际回答如何安全地生成参考字符串的问题。这些是在字符串是不可更新的背景下。 值得注意的是，[5]描述了Sprout在加密货币SRS初始化设置中使用的机制（Sprout是Zcash的第一个版本），它使用了多方计算来生成一个参考字符串，其中包含对初始参与群体的信任根。由于MPC协议的性能限制，尽管只需要但参与者的诚实度，但参与者的集合相对小。 对于Zcash的Sapling版本，当他们的参考字符串被替代的时候（由于零知识语句的升级，并且使用了证明系统），它使用了一个不同的方法。他们在[6]中描述的第二SRS生成机制，使用了一个多阶段轮询机制来为Groth&#39;s zk-SNARK生成参考字符串。他们利用一个随机信标beacon来保证结果的均匀分布，并且使用一个协调器来执行确定性辅助计算。 在无交互零知识证明的设计方面也做了大量工作，这种零知识证明不需要参考文献中的结构，如DARK[8],STARKs[1],Bulletproffs[7]。虽然这些提出了一个很有前途的可替代方案，充分利用参考字符串的可更新性有可能在没有额外安全假设的情况下获得更好的效率，并且可能在实例化通用结构（如基于多项式承诺的Halo Infinite）时发挥作用。 2 可更新的结构化参考字符串虽然可更新的结构化参考字符串（updateable structured reference strings，uSRSs）在我们构建的工作[26,3.2节]中建模，但我们在通用可组合型（UC）设置中对他的安全性进行建模[10]。在此，一个uSRS是一个带有潜在trapdoor $\tau$​​​ 的参考字符串，它具有一个结构函数$S$​​ 。$S(\tau)$​​ 是这个参考字符串本身，但是$\tau$​​​​ 并不会透露给攻击者，在本文的完整版本中[22,附录A]，我们证明了Sonic[26]（正像在2.2节说的，对提取进行了少量修改）满足我们在本节要求的所有属性。我们的主要证明是与Sonic协议无关，并且适用于满足本节其余部分列出的属性的任何可更新的参考字符串方案。 2.1 标准需求uSRS方案S由一个trapdoor域T，一个初始trapdoor $\tau_0$​​​​​ ，T上允许置换的集合P（即域和余域为T的双射函数）和域T上的结构函数S组成。我们要求P包括恒等函数id，并在函数组合下封闭：$\forall p_1,p_2 \in P : p_1 * P_2 \in P$​​​​​ 。​一个有效的置换$\dagger $​​​​ 提升应该存在，这样对于任何置换$p \in P$​​​​ 和 $\tau \in T$​​​​ ，$p^{\dagger}(S(\tau)) = S(p(\tau))$​​​ 。最后，必须存在用于创建并验证更新证明的算法$\rho \gets ProveUpd(S(\tau),p)$​​​ 和算法 $b \gets VerifyUpd(S(\tau),\rho ,S(p(\tau)))$​​​​ 。这些更新证明的格式没有指定，然而必须满足一下约束条件： 正确性，应用一个诚实生成的更新证明会验证：$\forall p \in P ,\tau \in T : VerifyUpd(S(\tau),ProveUpd(S(\tau),p),S(p(\tau)))$​ 结构保护，应用任何有效的更新等价于在trapdoor $\forall p,\tau,srs’:VerifyUpd(S(\tau),\rho,srs’) \Rightarrow \exists p \in P: srs’ = S(p(\tau))$​ 应用一些排列。 更新一致性。应用一个随机排序就等价于选择一个新的随机trapdoor：设D是T上的均匀分布，对于所有的$\tau \in T$ ，使得$D_\tau$ 是多重集${p(\tau) | p \in P}$ 上的均匀分布，然后$\forall \tau \in T : D = D_\tau$ 我们定义了一个相应的UC函数FuSRS，它提供了一个参考字符串$S(p(\tau_\mathscr{H}))$ ，这个参考字符串能被攻击者通过排列$p\in P$ 影响，仅给定$S(\tau_\mathscr{H})$ 作为输入，用户随机采样$\tau\mathscr{H} \in T$ . 我们相信这个功能是独立的，它没有明确地与我们的实现联系在一起。值得注意的是，当while我们使用分布式账本作为广播通道的弱形式，但可以考虑其他通道，而无需修改此功能。然而，正如前面所说，这个功能并没有规定任何特定的用法，我们推测，当使用适当的结构函数和排列集参数化时，它可以安全地实例化可更新的基于SRS的SNARKs，如Sonic[26],Marlin[11], 或者Plonk[13],由于UC设置，这将需要额外的提升来实现UC知识提取，如[24]. 2.2 模拟要求除了正确性、结构保持和更新一致性的基本属性外，任何希望通过更新帮助实现$F_{uSRS}$ 的模拟器都需要两个额外的属性： 更新证明模拟。从模拟器知道trapdoor的初始SRS $S(\tau)$​ ，它可以生成一个任何（正确结构的）SRS有效更新。形式上：$\exists S_\rho \forall \tau_1,\tau_2 \in T: VerifyUpd(S(\tau_1),S_\rho(\tau_1,S(\tau_2)),S(\tau_2))$​ 其中$S_\rho$​时一个PPT算法。 permutation extraction，排列提取？。模拟器必须能够提取任何有效对抗性更新证明背后的排列p 实现排列提取最自然的方法时使用白盒提取器，因为更新本身通常依赖于某种形式的知识假设，如指数知识，然而，白盒提取器不能用在UC证明中，相反，我们假设更新证明通过一个低等级的NIZK（Non-interactive zero-knowledge，非交互零知识证明）被证明是与特定的trapdoor相对应。更重要的是，这种低等级的NIZK，仅仅依赖于常见的随机字符串或者一个随机oracle，而不需要结构化的参考字符串。幸运的是，它不像本文完整版本[22,第四节]演示的那样，受到严格的效率要求。 具体来说，我们假设基本更新证明是NIZK关系R中的一个语句，其中见证人是对应排列p的一个编码。我们要求每个更新证明有且仅有一个相应的排列，正式地表示为要求R是一个双射，这导致了对ProveUpd和VerifyUpd的直接修改。即使在UC环境下也允许提取底层排列：ProveUpd还创建了一个NIZK证明$\pi of(\rho,p) $,并且返回$(\rho,\pi)$ ，而VerifyUpd只有这个新嵌入的NIZK证明也验证时才返回true。 如有R的定义，添加此NIZK可以简单保留所有安全属性，包括正确性： Definition 1. 如果下列关系是双射并且NP，\\那么uSRS是排列可提取的：\\ R := {(ProveUpd(S(\tau),p),p) | \tau \in T,p \in P}我们在[22,附录A]中表明，可以有效地构建Sonic[26]的情况所需的关系，并将如何在不依赖于进一步的NIZK的情况下实现提取的问题留给未来的工作。 3 根据链质量属性构建uSRS本节展示了如何通过要求块创建者在初始化期间对不断发展的uSRS执行更新来使用分布式账本安全地初始化uSRS，在等待最终uSRS达成一致后，它可以被安全地使用。为了对这种方法正式建模，我们讨论了在模拟证明中使用的理想情况和现实情况。两种情况都可以访问账本，但是理想条件下账本和参考字符串（由独立的$\mathcal{F}_{uSRS}$ 功能提供）是独立的，然而现实情况是账本通过编程使用更新来生成 3.1 高度概括本文的这个基本前提依赖于Nakamoto-style 账本的基本操作方式：不同的用户如果满足一些条件可以扩展区块链，这个条件由一种难度有关，这个难度值可以保证攻击者能够执行的扩展数量有限。给定这样一个结构，我们将uSRS更新与时间$\delta_1$​ 之前的每个区块关联起来。这个时间的选择保证账本的安全属性确保此时每个竞争链中至少一个区块是诚实的。 在我们的建模中，我们通过一个额外的领导状态的账本功能来构建他，这个领导状态源自嵌在区块中的信息挖掘者。特别对于我们的情况，这些编码的uSRS更新。我们保留足够的通用性来允许其他用途。它的基本思想是要表明，一个在领导状态执行uSRS更新的账本等同于不执行更新，但伴随有$\mathcal{F}_{uSRS}$ 功能。他们分别构成了我们理想情况和真实情况。在$\delta_1$ 之后，用户再等待一段时间$\delta_2$​ 直到公共前缀保证所有各方对参考字符串达成一致。 尽管账本功能常常被视作是全局的，但我们的方法有效地从另一个账本构建了一个账本——账本不是我们协议的一个依赖项，但是是一个组成部分。再这种情况下，全局是无关紧要的，因为环境已经可以直接访问功能，但是我们仍期待构建在账本上的协议能够在全局范围内使用它。对于uSRS来说，情况并非如此，大多数使用可能依赖于模拟器能够提取它的trapdoor。 3.2 我们的账本摘要我们对这些可更新结构化参考字符串功能的构造很大程度上依赖于公共前缀,链质量，链增长的属性，这些属性是Garay等人在”Bitcoin backbone”分析中定义[14]，用于Nakamoto-style 共识算法。尽管我们在标题中仅使用了链质量属性，但我们充分利用了这三个属性，而不仅仅是链质量属性。我们强调链质量，因为他是确保一个诚实更新发生的核心属性。我们简单而非正式地重申这三个属性： 公共前缀。给定当前两方的链$\varPi_1$​ 和$\varPi_2$​ ，并从第一个开始移除k个块，它是第二个链的前缀：$\varPi_1^{\varGamma k} \prec \varPi_2$ 链质量.对于任何一方的当前链$\varPi$​ ，该链中任意连续$l$​个区块将包含诚实方创建的$\mu$​ 个块。 链增长。如果一方链长度为c，那么在s个时间段之后，链长度至少为$c+\gamma$ 。 这些参数决定了我们协议的两个阶段的长度，在第一个阶段，我们从liveness parameter（假设$\mu \ge 1$​ ）构建了参考字符串本身，在第二阶段，我们等待这个参考字符串传播到所有用户，第一个阶段的长度至少为$\delta_1 \ge \lceil l\gamma^{-1} \rceil s$​​ ，第二个阶段长度至少为$\delta_2 \ge \lceil k\gamma^{-1}\rceil s$​​ ，他们合起来构成了uSRS的总生成延迟$\delta \ge (\lceil l\gamma^{-1} \rceil + \lceil k\gamma^{-1} \rceil)s$ 我们假设一个保证主干属性的账本。虽然我们没有证明任何具体的现有工作量证明账本（或者基于不同领导选择机制的账本）正式地UC-realise这种特定的形式，我们认为Nakamoto-style共识的所有账本都是这样。账本和论证都在本文的完整版本[22,附录B]呈现，我们的功能进一步依赖一个global clock $\cal{G}_{clock}$​ ，在[22，附录E.1]中定义。本文的目的，这是一个信标，他向请求他们的任何一方提供代表当前时间的单递增值，这就足够了。 除此之外，我们假设每个块都能包含额外的信息，由他的创建者（矿工）提供，这些信息可以被聚合来创建一个”领导者状态“。每一个创建的块与一个更新a相关联，账本由两个过程Gen , Apply 参数化，这两个过程分别描述了更新的诚实选择，和更新的语义。展望未来，他们在内部使用ProveUpd和VerifyUpd，尽管其形式足够普通允许将leader state用于其他并行目的。这个具体的参数在理想情况和现实情况不同，在理想情况”隐藏“uSRS更新，除此之外，现实情况增加了时间敏感性：在设置期后它对SRS没有任何作用。Gen是随机的以leader状态$\sigma$​​​ 和当前时间t作为输入，生成一个更新a,Apply 以leader state $\sigma$ 、更新a、和更新时间t为输入，返回继承状态$\sigma’:\sigma’ = Apply(\sigma,(a,t))$ ，对一个链来说，leader state或许由从初始化状态$\varnothing$​ 开始顺序应用链中所有更新计算得来。 攻击者控制着什么时候、哪一方创建一个新块，同样还有每个新块中包含的交易（只要不违反主干属性）。对于由被破坏的一方创建的交易，攻击者可以更进一步控制块的时间戳（在不存在于未来的合理范围内，并在前一个块之后），以及所需的更新a本身。对于诚实方更新，则使用Gen。 我们的账本提供的接口如下： SUBMIT，提交一个新的交易 READ，读取确定的交易序列 PROJECTION，读取当前链的交易序列（可能是未确认的） LEADER-STATE，读取确定的leader state ADVANCE，攻击者将一方切换到更长链 EXTEND，攻击者指示一方创建区块 虽然这个账本抽象不是本文的重点，但是我们相信，在需要对矿商的行为进行更精细的控制或者更好地访问竞争链的情况下，它具有独特的便利 3.3 理想情况我们的理想环境下由两个并行组合的功能组成（我们的意思是：环境可以解决任何一个问题，而且他们不相互作用）第一个是$\cal{F}_{uSRS}$ 的变体，经过修改后，在$\delta$ 时间过去之前，诚实的各方不能进行处理。在形式上，这种改变是使用包装函数$\cal{W}_{delay}(\cal{F},\delta)$ 完成的，如[22,附录E，4]所述。 第二个是Nakamoto-style账本功能，通过任意leader-state生成和应用程序进行参数化，这些函数也在混合环境下部分使用：$Gen = Genldeal$ 和 $Apply = ApplyIdeal$ 以及以下账本参数： 一个公共前缀参数k 链质量参数$\mu$ 和 $l$ 链增长参数$\gamma$ 和 $s$ 在形式上，我们理想环境下由这对$(\cal{W}_{delay}(\delta,\cal{F}_{uSRS}),\cal{F}^{ideal}_{nakLedger})$ ，以及全局功能$\cal{G}_{clock}$ 组成。 3.4 现实与理想的混合情况在我们的混合情况中，我们使用uSRS方案$\cal{S}$ ，算法ProveUpd和VerifyUpd，结构函数S，允许排列P，排序提升＋，初始trapdoor $\tau_0$ 混合情况由单独的Nakamoto-style 账本 $\cal{F}^{real}_{nakLedger}$​ ，一个NIZK功能$\cal{F}^R_{NIZK}$ ，和一个全局时钟$\cal{G}_{clock}$ 组成，这个账本由与理想情况下同样的链参数和以下leader-state程序进行参数化： 请注意，这些参数化算法使用$\cal{F}^R_{NIZK}$ ，因此账本依赖于此混合功能。 问题的关键是一旦在初始化块质量期间之后一个块通过共识上链，他可能声明的任何参考字符串更新都不再执行。此时，因为链仍可能被重新组织，uSRS不一定稳定，但是对于特定链来说不应该改变。更进一步，这些程序总是模仿理想情况，扩展他（是指？）而不是取代他。这证明了允许块leader产生更新的可组合性，：一个用于安全更新的系统不会影响leadership state的其他并行使用。 除了保证查询被适当的路由，Uc模拟理想情况的行为几乎不需要做其他工作，特别时如何在混合情况下查询参考字符串。我们在本文的完整版本[22，附录C]中使用一个小”适配器”协议来描述这个，LEDGER-ADAPTOR 。这将转发大多数查询，并且将uSTS查询看作是$\delta$时间后查询leader state的适当部分，在这个时间之前则忽略他们。正式地，我们现实情况是由全局时钟$\cal{G}_{clock}$ 和系统LEDGER-ADAPTOR $(\delta,\cal{F}^{real}_{nakLedger}(\cal{F}^R_{NIZK}))$ 。 3.5 $\mathcal{G}_{clock}$​ 的替代用法在这两个条件下，$\cal{G}_{clock}$​​​​ 被用作确定截断点，在此点之后参考字符串被视作安全的。这个Clock的简单的替代方案是，为此目的而依赖于链的长度。我们没有做出这样的选择，因为它使理想情况变得复杂：延迟包装器必须与理想情况下的账本通信，并且查询各方链的长度。我们不认为时钟是一个重要的额外假设，然而，如果使用链长度代替，本文的剩余部分几乎没有什么不同。即使在这种情况下，时钟的出现也是为了保证火星，尽管它只用于约束攻击者。 3.6 UC仿真我们的安全性是通过UC仿真得到的，在以下定理中说明： 定理1.对于任意可更新参考字符串模式S，满足正确性，结构保持和更新一致性以及使用$S_p$ 进行更新模拟和排列提取，LEDGER-ADAPTOR （在$(\cal{F}^{real}_{nakLedger},\cal{F}^R_{NIZK})$ 混合情况下，参数化如3.4节）在存在全局时钟功能$\cal{G}_{clock}$ 的情况下，使用模拟器$S_{LEDGER-ADAPTOR}$ .UC仿真这对功能$(\cal{F}^{ideal}_{nakLedger},\cal{W}_{delay}(\delta,\cal{F}_{uSRS}))$ ，参数化如3.3节， 完整的安全证明和仿真可以在本文的完整版本中找到[22，附录 F&amp;D] 4 低熵攻击更新缓解虽然我们的分析表明，在Byzantine拜占庭，诚实大多数情况下，我们协议生成一个值得信任的参考字符串，他也要求参与者将计算资源用于更新。在合理的情况下，玩家需要合理激励来遵守协议。我们强调理想条件并不是本文的重点，乐观地说，在一个大多数矿工都是理性只有一小部分诚实的环境中，少数诚实的区块足以消除本节中描述的问题。 对于Sonic ，一个协议偏差的存在破坏了参考字符串的安全性：通过以特定的低熵方式选择指数（例如$y=2^l$ ）。主要依赖于重复平方的更新计算可以明显加快。一般来说，P中的一些随机排列可能更有效地计算。更详细地说，与其使用一个随机排列p， 不如做出一个特定的选择来简化srs’的计算，——在最极端的情况下，对于任何uSRS方案，p=id的更新是微不足道的。 4.1 proposed construction为了缓解这类攻击，我们将需要假设底层账本的一个额外的属性，特别是他必须提供一个可重置的随机信标：对于每一个ADVANCE操作（攻击者必须限制它执行这个操作的频率），一个随机信标值在变量bcn中采样并且和对应的块相关联。这类信标通常很容易获得，例如通过工作量证明机制[4]的哈希算法，并且很多内置在权益证明机制的设计中。之前的工作[12]证明了这种信标值允许攻击者在信标值还没有进入到账本确定状态确定前，只通过重置它最多一定次数（如t次）来使他们发生偏差。t的确切取值取决于链参数。 我们可以 通过向$\cal{F}_{RO}$​​发送一个查询（bcn,nonce） 来修正Gen以从随机oracle中获得随机值，其中nonce是一个随机选择的随机值，bcn 是前一个块的信标值。响应用于索引trapdoor排列集合P，选择结果p，nonce由矿工存储在本地，并保持私有。我们调整第一阶段的第一期，以便至少产生$l’ := l(1-\theta)^{-1}+c$​ 个区块，其中$\theta$和$c$ 是新的安全参数（下面会讨论）。接下来，第二阶段结束后，我们可以确定与第一阶段结束相关联的信标值最多被重置了t次。 我们从bcn中提取 l&#39; 个有偏差虚拟币中，每个都有概率$\theta$。对于每个区块，如果对应的币为1.则需要在至少与活性参数一样长的一段时间内揭示其随机性。具体来说，上链区块所对应的矿工可以显示其nonce，相应地，这个矿工会获得标准区块奖励的R倍额外奖励。 然而这需要更严格的链质量属性，而账本功能却强制l中一个未打开的更新是诚实的，我们在下一节中概述为什么这个属性仍然保持。 4.2 安全直觉现在考虑一个具有哈希能力$\alpha$ 的理性矿工。我们知道，在最好情况下，使用像比特币这样的基础区块链，这样一个矿工期待的相对的回报最多是$\alpha/(1-\alpha)$​ ，这架设了一个自私的挖掘策略，在所有的网络竞赛中战胜了其他理性参与者。现在考虑一个矿工，它使用低熵指数来节省创建区块的算力，从而增加他们的哈希能力$\alpha$ 到一个相对哈希能力 $\alpha’ &gt; \alpha$​​​ 。这种攻击可以进一步通过分叉和有选择的公开那些有能力将bcn值重置到一为首选值的区块来影响区块链。为了证明这个影响是最小的，我们证明了下面的引理。 引理1.考虑一个映射 $\rho \mapsto \{0,1\}^{l’}$ ，当$\rho $均匀选择时，产生$l’$ 个独立的偏差代币，每一个的概率为$\theta$ 。考虑任意 $n \le l’$ 的固定位置，假设攻击者从映射的随即输入的$t$ 个独立抽取中选择任意一个，目的是增加n个位置的成功次数。获得超过$n(1+\epsilon)\theta$ 成功的概率是$exp(-\varOmega(\epsilon^2\theta n)+lnt)$ 证明。在$t = 1$​的情况下，结果来自定义为获得大于$n(1+\epsilon)\theta$​次充公的事件E的切尔诺夫界，并且具有概率$exp(-\varOmega(\epsilon^2\theta n))$​ 。鉴于每次重置都是同一实验的独立实验，通过应用并集边界，我们得到引理的论述。 利用低熵攻击的矿工的最优策略是最小化其他矿工被选择的区块数量，来增加相对回报。引理1证明了以这种方式最多可以造成$(1+\epsilon)^{-1}$ 的一个因子的伤害，无论矿工是否利用低熵攻击，他们的最优策略是自私挖掘，在低熵攻击挖掘中，期望$l’\alpha’/(1-\alpha’)$ 块[14]。一个利用低熵攻击的理性矿工不会获得任何额外的奖励，然而另一个不这么做的矿工，根绝引理1，通过揭露他们的随机性会获得至少$l’\alpha/(1-\alpha)(1+\epsilon)^{-1}\theta R$ 个奖励。这证明了对一个理性的矿工，只有在以下情况下，该策略才有利于纯粹的自私挖掘： \frac{\alpha'}{1-\alpha'} \gt (1+\theta(1+\epsilon)^{-1}R)\frac{\alpha}{1-\alpha}如果我们假设一个矿工可以通过使用低熵攻击指数来将他们有效哈希率提高c倍，那么在低熵情况下，他们的优势是$\alpha’ = \alpha c/(\alpha c+\beta)$ ,其中$\beta = 1-\alpha$ 是所有其他矿工的相对挖掘能力。如果上式满足，那么当且仅当下式成立，矿工才会获益： \frac{\alpha c}{\alpha c+\beta} \cdot \frac{\alpha c+\beta}{\beta} \gt (1+\theta(1+\epsilon)^{-1}R)\frac{\alpha}{\beta} \\ \Longleftrightarrow c \gt 1+\theta(1+\epsilon)^{-1}R如果我们在各块之前采用一个足够大的预期时间间隔，就有可能使用低熵指数来约束矿工的相对节省 根据完整版本模拟的参数化[22,4.2节]，如果一个使用这样指数的自私矿工可以提高他们的哈希能力最多一个乘法因子c，那么我们可以通过设置R为$(c-1)/(\theta(1+\epsilon)^{-1})$ 来缓解这样的攻击。 5 讨论尽管我们从一个账本协议简洁生成一个参考字符串本身是有用的，但实际情况可能更加复杂，在本节，我们将讨论可能进行的实际调整。 5.1 更新参考字符串因为分布式账本通常寿命很长，很可能比任何在其中使用的参考字符串都要长，或者在需要参考字符串之前已经在运行了。实际上，Zcahs协议的参考字符串已经升级。没有上下文的情况下，一个参考字符串被新的取代是无害的，然而重要的是考虑他们在零知识证明方面通常是怎么使用的。如果使用他们的证明是无状态的，那么从一个不安全的参考字符串升级到一个安全字符串的行为可能会像人们天真期望的那样：它确保升级之后安全属性不变。 在Zcash的例子中，它运行的是Zerocash协议的一个变体，他的情况更加复杂。Zerocash 提供有状态的零知识证明，假设一个用户对初始设置的安全性持怀疑态度—并且有充分的里由—但是确信第二个参考字符串是安全的。这样的用户是否能够对Zcash 的安全性充满信心？ 如果Zcash没有合适的保障措施，答案将是否定的。虽然协议可以按照预期执行，并且用户可以确信这一点，由于证明的有状态性，用户不能确信这个状态的正确性。Zcash加密货币确实采用了与我们下面概述的类似的保卫措施。我们在此强调这一点的重要性，因为并不是所有项目都会有这样的远见。 具体来说，对于基于Zerocash的系统，一个初始参考字符串的后门可能已经被用来创建不匹配的交易，并且有效地非法铸造大量货币。这一过程在当时是无法检测的，并且非法铸造的货币将在参考字符串升级过程中持续存在，。因此我们的虚拟用户可能会对合理怀疑他买到的任何货币的价值，他们可能是一个几乎无限货币池的一部分。 这样的攻击一旦发生（尤其是针对货币）是很难恢复的。因为无法证实货币的合法物主，即使私有交易历史被匿名，罪魁祸首也被确认。罪犯可能已经将他创造的任何东西交易出去。因此，简单地宣布交易无效会伤害那些与罪犯交易的用户，而不是罪犯自己。在一个极端情况下，如果他与合法货币持有者进行一对一交易，他将成功地窃取诚实用户的资产，而如果这样的攻击发生，社区用户有两个不行的选择：取消潜在合法用户的资金，或者接受潜在的大量通货膨胀。 然而我们可以假设一个没有那么糟糕的情况：假设我们合理地相信旧参考字符串的安全性，但我们更相信新的参考字符串。有无可能使用户相信我们真的升级了安全性？我们建议使用一种防火墙属性，这种属性在（cross-chain transfers）跨链传输领域中是很常见的[17]。并且被设计来防止一条链上的灾难性故障损坏另一条链。 对于货币转账，防火墙可以保证不超过资金上限，如果可以接受一个小的隐私损失，那么证明防火墙属性是容易的——每一个私有货币都要在升级后使用之前进行重铸，重铸期间必须声明他的价值。假设所有操作正常执行，并且没有违反防火墙属性，与后防火墙状态交易的用户可以确信可用资金的上限，此外，系统上的攻击亦可以识别：如果一个攻击铸造了太多货币，最终会违反防火墙属性，这表明有太多货币在流通——这就带来了如何处理这种情况的问题。我们相信，防火墙属性确实可以让系统用户安心，并且是一种实用的方法，可以缓解对曾经有问题参考字符串的系统安全性的担忧。 在Zcash中，这种防火墙的一种软形式是可用的，因为资产被分成几个池pools，每一个池实用不同的证明机制。每个池的总价值是可以管吃的，低于0的值会被视为报警原因，并拒绝。Zcash使用术语&quot;turnstiles&quot; 旋转门？，并且没有观察到通过他们的攻击。 正如完整版本的模拟[22,4.2节]，对于实时系统，需要进一步考虑的点是，所需时间很大程度上依赖于块之间的频率。这可能与选择块时间的其他考虑冲突——这个问题的一个潜在解决方案是只在&quot;superblocks&quot; 上执行更新：满足比通常更高的工作量证明（或其他选择机制）标准的块。 5.2 信任的根源 The Root of Trust对于分布式账本设置中的所有协议来说，一个更重要的问题是，是否一个在运行时某个点进入系统的用户可以相信其安全性。早期的权益证明协议，如[23]，在这一方面做的很差，例如很容易受到&quot;stake-bleeding&quot;攻击[16]，实际上意味着新用户不能安全地加入到网络中。 对于参考字符串，如果一个新用户准备接受诚实大多数假设成立，他们？可能相信参考字符串的安全，正如前述定理1。然而， 共识协议的安全性有一个奇怪的不同：至少对基于工作量证明的协议来说，要相信共识，最重要的是相信当前诚实大多数，因为这些协议被认为能够在过去某个时候从不诚实大多数中恢复过来。另一方面，参考字符串的安全性只依赖于在初始$\delta$​ 时间单位内假设诚实大多数。如果一大段时间过去，这可能会成为一个问题——为什么要相信不同时间段的用户的意图？ 事实上，定期刷新参考字符串来更新对他的信任可能是有意义的。持续执行更新是诱人的，然而，正如5.1节所述，这并不一定会增加对有状态系统的信任，尽管当使用无状态证明时，它可以从诚实大多数需求中删除”历史“部分。 大多数颠覆攻击时可以检测的——他们需要很长的分叉，这在合法执行的过程中不太可能发生。在没有攻击企图的乐观情况下，这可能提供了额外的确认级别：如果在初始设计期间没有广泛传播的大分叉声称，那么参考字符串可能是安全的（除非出现大规模out-of-band审查）。另一方面，这可能更容易引起怀疑，然而，因为没有办法证明这一点：恶意行为者可能会在初始化设置很长时间之后创建一个分叉，并声称这是破坏系统可信度攻击的证据。 5.3 不可更新SNARKs的应用可更新SNARK模式有两个明显的优势，我们的协议利用了这两个优势：首先，他们有一个显式的更新过程，这个过程允许一方 $\phi$​​ 使用安全性依赖于$A\vee (\phi 是诚实的)$​​ 的参考字符串替代一个安全性依赖于一些假设A的参考字符串。第二，他们可以在部分偏差的参考字符串上生存，这是我们在本文没有直接使用的一个事实，但是我们提供的$\cal{F}_{uSRS}$​​​ 功能允许拒绝采样，将其编码到理想情况中。 对于某些zk-SNARKs（如[18])，可以通过存在一个较弱的属性来解决更新算法的缺乏问题。：在第二阶段中，参考字符串可以由（可能不同的）各方在每个阶段执行round-robin更新（也可以分组求幂）来构造，在[6]中也详细介绍了这种方法，他意味着对我们协议自然转换，其中第一阶段被长度相同的两个阶段替代，分别执行第一阶段和第二阶段更新。 对不可更新SNARKs，部分偏差字符串的安全性还没有充分分析，然而这一弱点可以得到缓解。根据[6]，可以使用一个纯随机信标（与第4节中使用的可重置信标相反）从目前不纯参考字符串创建一个纯参考字符串。设计方案如：在时间$\delta$​ 后将查询随机信标，并使用这种随机性来选择在参考字符串上的trapdoor排列。这将被每一方独立应用，得到相同的随机分布的参考字符串。 由于可更新SRS不需要这么做，所以我们没有进行深度分析，然而这个模拟方法是相同地执行SRS生成，然后编程随机信标来反转所有应用于诚实参考字符串的排列。由于这包括应用在每个诚实更新上的诚实排列，所以这对攻击者来说与随机值没有什么区别。值得注意的是，随机信标的需求是需求中较强的一方，特别是由于它本身不应该允许对抗性影响来提供所需优势。为随机性而使用的块哈希方法引入了我们正试图消除的有限影响。 6 致谢AcknowledgementsBibliography无论多复杂的验证问题都可以最终简化为一个多项式验证问题！ 零知识证明： 两方：prover，verifier （已知） 证明算法：Setup （已知） 同态隐藏：1.一个x对应一个y，2.但是y不能反推出x，3.由F(a) F(b) 可知 F(a+b) 公共参考字符串 CRS （已知） 证明问题： 取决于双方 verifier 要向prover发送一段信息，要求prove证明这部分信息满足一定要求，这部分信息不随验证内容改变，可以事先在区块链中一次性设置好，之后的验证过程可以复用，这个事先设置好的信息成为公共参考字符串（CRS），这个字符串由随机点s，和随即系数k经处理得到，这个字符串需要保密，因此sk需要保密，CRS泄露后会有伪造证明通过，在Zcash的系统里，CRS中存放的实际上只是随机点s和随机系数k的一系列加密值，而s和k的明文则由6个“被充分信任的人”私下保存，这6个人处在地球上6个不同的位置，这些机密的随机数被拆开保存在这6个人手上，只要不是这6个人都变成“坏人”，这些随机数信息就不会被完整恢复。 不同prover和verifier双方验证问题的不同决定多项式的不同，即同样的参考字符串在不同的多项式中不同的性质。]]></content>
      <categories>
        <category>论文</category>
        <category>零知识证明</category>
      </categories>
      <tags>
        <tag>论文</tag>
        <tag>零知识证明</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[装箱与拆箱]]></title>
    <url>%2F%E8%A3%85%E7%AE%B1%E4%B8%8E%E6%8B%86%E7%AE%B1.html</url>
    <content type="text"><![CDATA[基本数据类型8种基本数据类型，char,byte,short , int , long ,float ,double , boolean 每一种都有对应的包装类 值类型和引用类型值类型 变量名指向具体的值 变量声明后，立即分配存储空间，一般在栈上 使用前需要赋值初始化，判断相等使用== 引用类型 变量名指向存储内容的地址 变量声明后不会分配内存，只是存储 使用时可以是null，判断相等用equals方法 类型转换装箱 1Integer a = 10; // &lt;==&gt; Integer a = Integer.valueOf(10) int型数据10赋值给Integer 变量时，会自动调用其valueOf方法，返回对应的包装类，进而赋值给变量a 拆箱 12Integer a = 10;int b = a; // &lt;===&gt; int b = a.intValue() Integer类变量a赋值给int 型变量b时，a会自动调用其intValue方法，返回int型数值赋值给b。 装箱过程是通过调用包装器的valueOf方法实现的，而拆箱过程是通过调用包装器的 xxxValue方法实现的，xxx是基本数据类型。 eg1 下面结果输出是 123456789101112public class Main &#123; public static void main(String[] args) &#123; Integer i1 = 100; Integer i2 = 100; Integer i3 = 200; Integer i4 = 200; System.out.println(i1==i2); // true System.out.println(i3==i4); // false &#125;&#125; 引用类型变量使用==是判断类地址啊，明明是四个不同的类，为什么i1会等于i2呢？ 类似于String类型 字符串常量池，Integer类中也有整型常量池。 在装箱时，调用valueOf方法源码如下： 12345public static Integer valueOf(int i) &#123; if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high) return IntegerCache.cache[i + (-IntegerCache.low)]; return new Integer(i);&#125; Integer中有个静态内部类IntegerCache，里面有个cache[],也就是Integer常量池，常量池的大小为一个字节[-128~127]，在JDK6之后，可以通过JVM的启动参数设置最大值（-XX:AutoBoxCacheMax=size）。 因此，在创建i1时，会在常量池中初始化出来，后面的相同值的Integer不再实例化，直接指向常量池中的对象。因此i1 = i2，而i3和i4不在常量池范围内，因此每次都会实例化一个对象。 注意 与String类似，只有自动装箱的时候会只有一个对象。若创建对象时使用了new关键字，则还是会在堆中创建一个对象。 123Integer i1 = new Integer(100); // 实际上这个方法从jdk9开始已经弃用，官方推荐valueOf()方法Integer i2 = new Integer(100); // 不触发装箱过程System.out.println(i1 == i2); // false 除了Integer，其他整数类型（byte,short,long）对应包装类也都有常量池，大小都是[-128,127]，且大小不能通过参数改变，可以看出，Byte的所有值都在缓存区中，用它生成的相同值对象都是相等的。 同时Character对象也有常量池，大小是[0,127]。 浮点数类型没有，因为在一个区间内整型数是有限的，但浮点数是无限多的。 1234567Boolean i1 = false;Boolean i2 = false;Boolean i3 = true;Boolean i4 = true;System.out.println(i1==i2); // trueSystem.out.println(i3==i4); // true Boolean类的valueOf方法： 123public static Boolean valueOf(boolean b) &#123; return (b ? TRUE : FALSE);&#125; 而TRUE和FALSE： 123public static final Boolean TRUE = new Boolean(true);public static final Boolean FALSE = new Boolean(false); eg2在重载方法中，可能出现问题： remove有上图两个重载方法，那下面的代码执行结果是什么？remove掉的是值为2的还是索引为2的？ 123456List&lt;Integer&gt; list = new ArrayList&lt;&gt;();Integer a = 2;Integer b = 1;list.add(a);list.add(b);list.remove(2); 在这种情况下，编译器不会自动拆装箱，默认2是int类型，因此调用的是remove掉索引为2对应的元素。 如果要删除值为2 的对象，应该调用的方法是：list.remove(a) ，即传入Object对象Integer。 eg3下面的代码使用==比较时，会发生Integer的拆箱然后比较int数值，还是发生int装箱生成Integer比较地址值？ 123Integer i1 = 1000;int i2 = 1000;boolean compared = (i1 == i2); 当 “==”运算符的两个操作数都是 包装器类型的引用，则是比较指向的是否是同一个对象，而如果其中有一个操作数是表达式(即包含算术运算)则比较的是数值，即会触发自动拆箱的过程。 对于包装器类型，equals方法并不会进行类型转换 Integer的equals方法只有参数是Integer类型时才有可能返回true， 当参数是基本类型int时，编译器会给int自动装箱成Integer类，然后再进行比较。： 123456public boolean equals(Object obj) &#123; if (obj instanceof Integer) &#123; return value == ((Integer)obj).intValue(); &#125; return false;&#125; 相类似的还有String等，只有同类型的或者子类做参数比较才有可能返回true，否则都是false。因为有instance of语句。 算术运算会触发装箱与拆箱过程 eg412345678910111213141516Integer a = 1;Integer b = 2;Integer c = 3;Integer d = 3;Integer e = 321;Integer f = 321;Long g = 3L;Long h = 2L;System.out.println(c==d); // trueSystem.out.println(e==f); // falseSystem.out.println(c==(a+b)); // true 算术运算会触发装箱与拆箱过程System.out.println(c.equals(a+b)); // trueSystem.out.println(g==(a+b)); // trueSystem.out.println(g.equals(a+b)); // falseSystem.out.println(g.equals(a+h)); // true 第一个和第二个前面提到了，没有问题。 第三个，算术运算会触发装箱与拆箱过程，a+b的过程因为涉及算术运算，会调用a和b的intValue函数，拆箱后计算，结果仍然是int型，int型（a+b） 和 Integer对象c 用== 判断时会将c拆箱，判断数值是否相等。 第四个 (a+b)触发自动拆箱计算，结果是int类型，当int类型传给Integer.equals()方法时，会触发自动装箱，将(a+b)装箱后比较，因此是true 第五个跟第三个是一样的。 第六个(a+b)装箱后是Integer类型，跟long类型比较时是false。 第七个(a+h)拆箱计算时会自动类型转换，最后结果是较大的一个long型，装箱后是相同类型且值相同因此结果是true。 问题： int 明明不是Object对象，为什么可以在c.equals()方法中传入，而且结果还是true！ 123456public boolean equals(Object obj) &#123; if (obj instanceof Integer) &#123; return value == ((Integer)obj).intValue(); &#125; return false;&#125; 当参数是基本类型int时，编译器会给int自动装箱成Integer类，然后再进行比较。]]></content>
      <categories>
        <category>源码</category>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>源码</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2F20210817.html</url>
    <content type="text"><![CDATA[20 150 71.简化路径给你一个字符串 path ，表示指向某一文件或目录的 Unix 风格 绝对路径 （以 ‘/‘ 开头），请你将其转化为更加简洁的规范路径。 在 Unix 风格的文件系统中，一个点（.）表示当前目录本身；此外，两个点 （..） 表示将目录切换到上一级（指向父目录）；两者都可以是复杂相对路径的组成部分。任意多个连续的斜杠（即，’//‘）都被视为单个斜杠 ‘/‘ 。 对于此问题，任何其他格式的点（例如，’…’）均被视为文件/目录名称。 请注意，返回的 规范路径 必须遵循下述格式： 始终以斜杠 ‘/‘ 开头。两个目录名之间必须只有一个斜杠 ‘/‘ 。最后一个目录名（如果存在）不能 以 ‘/‘ 结尾。此外，路径仅包含从根目录到目标文件或目录的路径上的目录（即，不含 ‘.’ 或 ‘..’）。返回简化后得到的 规范路径 。 144 123456789101112131415161718192021class Solution &#123; public List&lt;Integer&gt; preorderTraversal(TreeNode root) &#123; List&lt;Integer&gt; res = new ArrayList&lt;Integer&gt;(); if (root == null) &#123; return res; &#125; Deque&lt;TreeNode&gt; stack = new LinkedList&lt;TreeNode&gt;(); TreeNode node = root; while (!stack.isEmpty() || node != null) &#123; while (node != null) &#123; res.add(node.val); stack.push(node); node = node.left; &#125; node = stack.pop(); node = node.right; &#125; return res; &#125;&#125;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2FUbuntu%E6%9B%B4%E6%96%B0%E5%86%85%E6%A0%B8.html</url>
    <content type="text"><![CDATA[从Ubuntu官方提供的内核链接中获取所需要的内核版本： https://kernel.ubuntu.com/~kernel-ppa/mainline/ 从选择的内核中下载以下四个文件 12345linux-headers-*_amd64.deblinux-headers-*_all.deblinux-images-*-generic_*amd64.deblinux-modules_*-generic*_amd64.deb根据自己情况，选择合适的类型。选择通用系统的generic，低延迟系统（例如用于录制音频）的lowlatency，64位系统的amd64，32位系统的i386或其他OS类型的armhf，arm64等。 下载完成后，进入所在文件夹，执行sudo dpkg -i *.deb 安装完成后，重启计算机。 卸载Ubuntu官方版本 获取所有安装的内核版本 1dpkg --get-selections | grep linux 选择要卸载的版本，卸载下列安装包 1234sudo apt remove linux-image-&lt;版本&gt;-genericsudo apt remove linux-headers-&lt;版本&gt;sudo apt remove linux-headers-&lt;版本&gt;-genericsudo apt remove linux-modules-&lt;版本&gt;-generic 更新启动引导 1sudo update-grub]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F802.11.html</url>
    <content type="text"><![CDATA[12lsusbusb_modeswitch -KW -v]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F20210816-24-25.html</url>
    <content type="text"><![CDATA[24.两两交换链表中的节点给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。 你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。 递归 每次递归将第二个节点指向第一个节点，第一个节点指向下一次递归返回的头节点，直到链表中长度为0或者1结束，返回头节点。 123456789101112131415161718class Solution &#123; // 递归 // 时间复杂度O(n)，需要完整遍历一遍链表 // 空间复杂度O(n)，n次递归调用的栈空间 public ListNode swapPairs(ListNode head) &#123; // 长度为0或1，不需要交换直接返回 if(head == null || head.next == null)&#123; return head; &#125; // p指向下一次递归的链表头节点 ListNode p = head.next.next; // newHead指向第二个节点，也就是交换后的头节点 ListNode newHead = head.next; newHead.next = head; head.next = swapPairs(p); return newHead; &#125;&#125; 迭代，循环遍历链表，每次两两交换位置，直到最后剩一个节点或者不剩节点。 123456789101112131415161718192021222324252627class solution&#123; // 迭代 // 时间复杂度O(n),遍历一遍链表 // 空间复杂度O(1) public ListNode swapPairs(ListNode head) &#123; if(head == null || head.next == null)&#123; return head; &#125; ListNode dummyNode = new ListNode(-1,head); ListNode p = dummyNode; ListNode q = head; ListNode r = head.next; while(q != null &amp;&amp; r != null)&#123; q.next = r.next; r.next = q; p.next = r; p = q; q = q.next; if(q!=null)&#123; r = q.next; &#125;else&#123; break; &#125; &#125; return dummyNode.next; &#125;&#125; 25.K个一组反转链表给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。 k 是一个正整数，它的值小于或等于链表的长度。 如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。 123456789101112131415161718192021222324252627282930313233343536class Solution &#123; // 时间复杂度O(n) // 空间复杂度O(1) public ListNode reverseKGroup(ListNode head, int k) &#123; ListNode dummyNode = new ListNode(-1,head); ListNode end = dummyNode; ListNode start = end; while(start.next != null)&#123; for(int i = 1;i&lt;=k;i++)&#123; if(end == null)&#123; return dummyNode.next; &#125;else&#123; end = end.next; &#125; &#125; if(end != null)&#123; ListNode next = end.next; ListNode p = start.next; ListNode q = p.next; // 使用头插法反转链表 // 同样可以每次将第一个插入到最后来实现 while(q != next)&#123; p.next = q.next; q.next = start.next; start.next = q; q = p.next; &#125; start = p; end = start; &#125; &#125; return dummyNode.next; &#125;&#125; 147.对链表进行插入排序123456789101112131415161718192021222324class Solution &#123; public ListNode insertionSortList(ListNode head) &#123; ListNode dummyNode = new ListNode(-65536,head); ListNode p = head; ListNode q = dummyNode; ListNode rear = q; while(p!=null)&#123; if(rear.val &lt;= p.val)&#123; rear = rear.next; &#125;else&#123; ListNode next = p.next; q = dummyNode; while(q.next.val &lt;= p.val)&#123; q = q.next; &#125; p.next = q.next; q.next = p; rear.next = next; &#125; p = rear.next; &#125; return dummyNode.next; &#125;&#125; 237.删除链表中的节点请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点。传入函数的唯一参数为 要被删除的节点 。 1234567891011121314151617class Solution &#123; // public void deleteNode(ListNode node) &#123; // ListNode p = node; // while(p.next.next != null)&#123; // p.val = p.next.val; // p = p.next; // &#125; // p.val = p.next.val; // p.next = null; // &#125; // 官方答案，牛 public void deleteNode(ListNode node)&#123; node.val = node.next.val; node.next = node.next.next; &#125;&#125; 19 删除链表的倒数第N个结点给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。 进阶：你能尝试使用一趟扫描实现吗？ 12345678910111213141516class Solution &#123; // 双指针，一趟扫描实现。 public ListNode removeNthFromEnd(ListNode head, int n) &#123; ListNode temp = new ListNode(0,head); ListNode p = temp,q = temp; for(int i = 0; i&lt;n+1;i++)&#123; q = q.next; &#125; while(q != null)&#123; p = p.next; q = q.next; &#125; p.next = p.next.next; return temp.next; &#125;&#125; 61，143，234]]></content>
  </entry>
  <entry>
    <title><![CDATA[Java 中 Arrays类中的binarySearch0方法中，没找到target为什么返回-(low+1)]]></title>
    <url>%2FArrays%E7%B1%BB%E4%B8%AD%E7%9A%84%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%B2%A1%E6%89%BE%E5%88%B0%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%94%E5%9B%9E-(low%2B1).html</url>
    <content type="text"><![CDATA[Java 中 Arrays类中的binarySearch0方法中，没找到target为什么返回-(low+1)Arrays类中的binarySearch方法源码如下： 123456789101112131415161718// Like public version, but without range checks.private static int binarySearch0(int[] a, int fromIndex, int toIndex, int key) &#123; int low = fromIndex; int high = toIndex - 1; while (low &lt;= high) &#123; int mid = (low + high) &gt;&gt;&gt; 1; int midVal = a[mid]; if (midVal &lt; key) low = mid + 1; else if (midVal &gt; key) high = mid - 1; else return mid; // key found &#125; return -(low + 1); // key not found.&#125; 整体来说跟我们自己写的二分查找没有太大的区别，只是在最后，没有找到target时，返回的值是-(low+1)，这是为什么呢？ 没找到的情况有以下几种： 数组中所有值都大于target，此时只有low不断右移，最后结束循环时，low = a.length ; 数组中所有值都小于target，此时只有high不断左移，最后low = 0, high = -1 ; 数组中不存在target，结束循环时，a[low] &gt; targe, a[high] &lt; target ; 总的来说，while循环结束而方法没有结束时，low值一定是target的插入位置（target在数组中不存在）。而插入位置的取值是: [0,a.length]，为什么返回-(low+1)呢？返回负值好理解，表示数组中没有target值，而为什么不能直接返回-low的原因就是有0的存在，返回-low仍是0，便不能判断数组中是不是存在target，low+1保证了它的值大于0，取负值后便一定小于0。 所以如果我们想要用该方法找到数组中target的插入位置时，别忘了对返回值再取个相反数，然后再减个 1 哦，即-(-(low + 1)) - 1 = low + 1 - 1 = low， 就是我们想要的了。 典型应用 1234int bound = Arrays.binarySearch(sums, target);if (bound &lt; 0) &#123; bound = -bound - 1;&#125; 补充 为什么使用&gt;&gt;&gt;（无符号位右移），而不是用&gt;&gt;（右移）这是避免数据过大，导致溢出 为什么使用&gt;&gt;&gt;位运算符，而不是直接除以2，这是因为&gt;&gt;&gt;可以提高编程的运行速度]]></content>
      <categories>
        <category>源码</category>
      </categories>
      <tags>
        <tag>源码</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2F20210813-220.html</url>
    <content type="text"><![CDATA[220.存在重复元素给你一个整数数组 nums 和两个整数 k 和 t 。请你判断是否存在 两个不同下标 i 和 j，使得 abs(nums[i] - nums[j]) &lt;= t ，同时又满足 abs(i - j) &lt;= k 。 如果存在则返回 true，不存在返回 false。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758// 滑动窗口+有序集合// 空间复杂度O(min(n,k))，需要维护一颗min(n,k)个节点的查找树，空间复杂度为O(min(n,k))// 时间复杂度O(nlog(min(n,k))),对于一个有min(n,k)个节点的二叉查找树，每次插入删除的时间复杂度为O(log(min(n,k)))，n个元素每个元素至多被插入和删除一次。class Solution &#123; public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) &#123; TreeSet&lt;Long&gt; set = new TreeSet&lt;&gt;(); for(int i = 0;i &lt; nums.length;i++)&#123; // ceiling函数，返回一个大于等于给定参数的最小元素。 // long强制转换防止整型溢出 Long n = set.ceiling((long)nums[i] - (long)t); if( n != null &amp;&amp; n &lt;= (long)nums[i] + (long)t)&#123; return true; &#125; set.add((long)nums[i]); if(set.size() &gt; k)&#123; set.remove((long)nums[i-k]); &#125; &#125; return false; &#125; &#125;// 法二，桶排序：设置桶大小为t+1，若在滑动窗口内的两元素出现在同一个桶中，则两元素符合条件，否则，若存在相邻桶中，需要继续验证其差的绝对值是否小于t，若成立，则两元素也符合条件。// 通过将int范围内的整数x通过x = (t+1)*a+b (0&lt;=b&lt;=t)来映射到桶a中// 时间复杂度O(n),n个元素最多需要插入、删除一次，哈希表插入、删除的时间复杂度是O(1)// 空间复杂度O(min(n,k))，哈希表最多存储min(n,k)个元素class Solution &#123; public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) &#123; int n = nums.length; // 因为相邻桶需要再次验证其值是否符合条件，因此需要使用map存放桶以及具体值 Map&lt;Long, Long&gt; map = new HashMap&lt;Long, Long&gt;(); long w = (long) t + 1; for (int i = 0; i &lt; n; i++) &#123; long id = getID(nums[i], w); if (map.containsKey(id)) &#123; return true; &#125; if (map.containsKey(id - 1) &amp;&amp; Math.abs(nums[i] - map.get(id - 1)) &lt; w) &#123; return true; &#125; if (map.containsKey(id + 1) &amp;&amp; Math.abs(nums[i] - map.get(id + 1)) &lt; w) &#123; return true; &#125; map.put(id, (long) nums[i]); if (i &gt;= k) &#123; map.remove(getID(nums[i - k], w)); &#125; &#125; return false; &#125; // 求x对应的桶 public long getID(long x, long w) &#123; if (x &gt;= 0) &#123; return x / w; &#125; return (x + 1) / w - 1; &#125;&#125;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F%E4%B8%80%E5%88%87%E9%83%BD%E6%98%AF%E6%AF%94%E8%B5%9B%EF%BC%8C%E4%B8%AD%E6%9C%AC%E8%81%AA%E6%B0%B8%E8%BF%9C%E4%B8%8D%E4%BA%8F.html</url>
    <content type="text"><![CDATA[一切都是一场比赛，中本聪永远不亏摘要中本聪发明了最长链协议，并且通过证明私有的双花攻击（一场攻击者和诚实节点之间的竞赛以增加更长的链）来声明他的安全性，但是这是最糟糕的攻击嘛？我们对为不同公式模型设计的三类最长链协议给出了肯定的回答：1）中本聪原创的工作量证明协议。2）Ouroboros和SnowWhite权益证明协议。3）Chia的空间证明协议。结果证明， 根据网络延迟归一化的平均区块时间的函数，获得每个协议的最大可容忍对手能力的精确特征。这些协议的安全分析通过一种新颖的方式以同一的方式展现，这种方法将所有攻击减少到一个攻击者和诚实节点的竞赛种。 As a consequence, exact characterization of the maximum tolerable adversary power is obtained for each protocol as a function of the average block time normalized by the network delay. 关键词Proof-of-Work; Proof-of-Stake; Proof-of-Space; Security Analysis 1介绍1.1 背景​ 2008年，中本聪发明了区块链的概念，作为一种维持去中心化账本的技术。这项工作的核心贡献时最长链协议——一种看似简单的共识算法。尽管他是在比特币及其PoW设置的背景下发明的，但是这种最长链协议已经在各种区块链项目中被引用，并扩展到其他更节能的设置，例如Pos。(eg. [BPS16], [KRDO17],[DGKR18],[BGK+18],[FZ18]) and Proof-of-Space (PoSpace) (eg. [AAC+17, CP19, PKF+18]). ​ 用于在无需许可的环境种维护有价值资产的账单，最长链协议最重要的属性就是他的安全性：攻击者需要多少资源来攻击这个协议并且恢复已经确认的协议？中本聪通过提出一个特殊的攻击来分析这个属性：私有的爽滑攻击（图2）。攻击者在竞争中增加一个区块链私有链来尝试超越公共最长链，进而在公共链中一个区块深度为k时替换原有链。设$\lambda_h$和$\lambda_a$分别时诚实节点和攻击者挖矿速率，与他们各种的散列能力成正比。然后从大数定律的论证中可以清晰看出：如果$\lambda_a &gt; \lambda_h$ ，不论k多大，攻击者都有很大的可能成功。相反，如果$\lambda_a &lt; \lambda_h$ ，则攻击者成功的概率随k呈指数下降。当诚实节点之间存在Δ的网络延迟时，该安全条件变成： \lambda_a < \lambda_{growth}(\lambda_h,\Delta),其中$\lambda_{growth}(\lambda_h,\Delta)$​​ 是在最坏情况分支下诚实链的增长率。在一个有很多挖矿能力较小的诚实节点的完全去中心化的背景下，$\lambda_{growth} = \lambda_h/(1+\lambda_h\Delta)$ ，如果设β是攻击者的攻击能力部分，那么公式（1）产生以下条件： \beta < \frac{1-\beta}{1+(1-\beta)\lambda\Delta}其中，λ是总挖矿率，$\lambda\Delta$​ 是每个网络延迟挖掘的块数。$1/(\lambda\Delta)$​​ 是由网络延迟归一化的块速度。公式（2）求解后得到一个安全阈值$\beta_{pa}(\lambda\Delta)$​ ，当$\lambda\Delta$​ 较小时，$\beta_{pa}(\lambda\Delta) ≈ 0.5$​​​ ，这导致中本聪在[Nak08]中的主要主张：只要攻击者的算力低于全网算力的50%并且挖矿率设置的较低， 最长链协议就是安全的。为了加速区块链而设置的更激进的挖矿率降低了安全门槛。因此（2）可以看作是一种安全性和出块速度的权衡。 ​ 私有双花攻击是一种特定的攻击，中本聪仅仅基于这样单独一个特定攻击的分析来声称安全。然而，其他攻击呢？还有其他更严重的攻击嘛？中本聪的工作之后一个相关问题是在最坏的攻击面前识别真正的安全阈值$\beta(\lambda\Delta)$ 。这种开创性的工作[GKL15]通过制定和执行一个PoW最长链协议的正式安全分析首次解决了这个问题。他们使用一个锁步轮转同步模型，这个分析后来扩展到更现实的Δ同步模型[PSS17]。结果显示，当$\lambda\Delta\rightarrow 0$ ，确实$\beta(\lambda\Delta)$ ，接近50%，从而验证了中本聪的直觉。然而，对于$\lambda\Delta &gt; 0 $ ，他们的边界和私有攻击安全阈值之间存在差距，并且该差距随着$\lambda\Delta$ 增大而增大。 1.2 主要贡献 \begin{aligned} & P\left(\hat{B}_{i k} \mid U_{0}, G_{n}, W_{i k}^{\varepsilon}\right) \\ \leq & P\left(D_{i}\left(\sum_{m=i}^{k-1} R_{m}+\Delta+\tau_{i}^{h}\right) \geq(1-\varepsilon) \frac{r_{h}}{\lambda_{h}}(k-i-1) \mid U_{0}, G_{n}, W_{i k}^{\varepsilon}\right) \\ \leq & P\left(D_{i}\left(\sum_{m=i}^{k-1} R_{m}+\Delta+\tau_{i}^{h}\right) \geq(1-\varepsilon) \frac{r_{h}}{\lambda_{h}}(k-i-1)\right.\\ &\left.\quad \mid U_{0}, G_{n}, W_{i k}^{\varepsilon}, \sum_{m=i}^{k-1} R_{m}+\Delta \leq(k-i-1) \frac{r_{h}+\lambda_{a} e}{2 \lambda_{a} e} \frac{1}{\lambda_{h}}\right) \\ &+P\left(\sum_{m=i}^{k-1} R_{m}+\Delta>(k-i-1) \frac{r_{h}+\lambda_{a} e}{2 \lambda_{a} e} \frac{1}{\lambda_{h}} \mid U_{0}, G_{n}, W_{i k}^{\varepsilon}\right) \\ \leq & P\left(\sum_{m=i}^{k-1} R_{m}+\Delta>(k-i-1) \frac{r_{h}+\lambda_{a} e}{2 \lambda_{a} e} \frac{1}{\lambda_{h}} \mid U_{0}, G_{n}, W_{i k}^{\varepsilon}\right) \\ &+\left(\frac{r_{h}+\lambda_{a} e}{2(1-\varepsilon) r_{h}}\right)^{(1-\varepsilon) \frac{r_{h}}{\lambda_{h}}(k-i-1)} \\ \end{aligned}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F%E9%81%8D%E5%8E%86Map%E7%9A%844%E7%A7%8D%E6%96%B9%E5%BC%8F.html</url>
    <content type="text"><![CDATA[遍历Map的4种方式1234567891011121314151617181920212223242526272829public static void main(String[] args)&#123; HashMap&lt;Integer,Integer&gt; map = new HashMap&lt;&gt;(); map.add(1,2); // 1.entrySet遍历，键和值都需要时使用 for( Map.Entry&lt;Integer,Integer&gt; entry : map.entrySet())&#123; System.out.println("key = " + entry.getKey() + ", value = " + entry.getValue()); &#125; // 2.单独遍历 // 遍历键时 for(Integer key : map.keySet())&#123; key &#125; // 遍历值时 for(Integer value : map.values())&#123; &#125; // 3.iterator Iterator&lt;Map.Entry&lt;Integer,Integer&gt;&gt; it = map.entrySet.iterator(); while(it.hasNext())&#123; Map.Entry&lt;Integer,Integer&gt; map = it.next(); Integer key = map.getKey(); Integer value = map.getValue(); &#125; // Java8 lambda表达式,性能低于entrySet,所以更推荐用entrySet的方式 map.forEach((k,v)-&gt;&#123; System.out.println("key = " + k + ", value = " + v); &#125;) &#125;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2FMap.html</url>
    <content type="text"><![CDATA[Map中存储一对数据，即键值对（key-value），其中键是不能重复的，值是可以重复的。键跟值是一一对应的。 遍历方式 通过keySet获取所有的键，根据键遍历map 通过entrySet获取键值对整体的set，遍历set。]]></content>
  </entry>
  <entry>
    <title><![CDATA[java笔记]]></title>
    <url>%2Fjava%E7%AC%94%E8%AE%B0.html</url>
    <content type="text"><![CDATA[String字符串拼接12345678public class test&#123; public static void main(String[] args) &#123; String s1 = "abc"; String s2 = "ab"; String s3 = s2 + "c"; System.out.pringln(s1 == s3); // false &#125;&#125; s1指向字符串常量池中的“abc”，s2指向字符串常量池“ab” s3，当字符串之间使用+拼接时，系统底层会自动创建一个StringBuilder对象（在堆中），然后再调用其append方法完成拼接，然后再调用toString方法转换为String类型，同样在堆中，因此这个过程一共创建了三个对象，一个c，一个StringBuilder，最后一个String。 常量优化机制1234567public class test&#123; public static void main(String[] args) &#123; String s1 = "abc"; String s2 = "a" + "b" +"c"; System.out.pringln(s1 == s2); // true &#125; &#125; 不同于字符串拼接，“a”+”b”+”c”拼接为”abc”，就相当于String s2 = &quot;abc&quot;，同样指向常量池中的”abc” 链式编程对象调用方法后返回对象本身，则可以链式编程，例如 1234StringBuilder sb = new StringBuilder();StringBuilder sb2 = sb.append("abc"); // sb2 == sbStringBuilder sb3 = sb2.append("123"); // sb3 == sb2 == sbStringBuilder sb = sb.append("abc").append("123"); //链式编程 StringBuilder提高效率原理String的拼接String内容不可改变，String拼接时每次都需要系统底层自动创建StringBuilder对象，然后调用StringBuilder的append()方法，最后使用toString()转换为String对象返回，销毁StringBuilder对象。 StringBuilder拼接StringBuilder内容可以更改，都在原来的StringBuilder对象中进行。 循环标号在Java中，可以在循环前加入标号，标号只能被continue和break引用，用于跳出多重循环 12345678lo:while(true) &#123; String choice = sc.next(); switch(chice) &#123; case "1": break lo; &#125;&#125; git 命令 解释 git init 初始化创建仓库 git status 查看git状态 git add 将文件添加到暂存区 git commit 将暂存区提交到历史仓库 git log 查看日志 git reflog 精简日志 git reset —hard ** 切换版本 git branch 分支名 创建分支，创建的新分支包含现有文件 git branch 查看分支 git branch -d 分支名 删除分支 git checkout 分支名 切换分支 git merge 分支名 将分支合并到当前分支 git remote add &lt;远程仓库名称&gt; &lt;远程仓库url&gt; 添加远程仓库 git push -u &lt;仓库名称&gt; &lt;分支名&gt; push到远程仓库 git pull &lt;远程仓库名&gt; &lt;分支名&gt; 从远程仓库拉取文件 生成ssh公钥ssh-keygen -t rsa -C &lt;username&gt; static静态修饰符 特点： 被static修饰的成员被该类的所有成员共享 被static修饰的成员会随着类的加载而加载，优先于对象存在 可以通过类名.**的形式进行调用 注意事项： 静态方法中只能访问静态成员（成员变量，成员方法） 非静态方法中，可以使用静态成员，也可以使用非静态成员 静态方法中，没有this关键字 继承好处： 提高代码复用性 提高代码的可维护性 让类与类之间产生了关系，是多态的基础 弊端： 继承导致子类必须拥有父类非私有属性和方法 特点： 只支持单继承，不支持多继承，但支持多层继承 权限修饰符 修饰符 同一个类中 同一包中子类无关类 不同包中子类 不同包中无关类 private :heavy_check_mark: 默认 :heavy_check_mark: :heavy_check_mark: protected :heavy_check_mark: :heavy_check_mark: :heavy_check_mark: public :heavy_check_mark: :heavy_check_mark: :heavy_check_mark: :heavy_check_mark: private修饰的成员同样会被子类继承，但是对子类不可见，即子类大小包含了父类private成员，可以通过get、set方法获取设置private成员。 方法重写在子父类中 注意事项 父类中私有方法不能被重写 父类非静态方法，子类必须通过非静态方法重写，静态方法不能被重写 子类重写父类时，访问权限必须大于等于父类 继承中构造方法的特点：子类中所有的构造方法默认都会访问父类中无参的构造方法，系统默认构造方法的第一条语句是super()，会访问父类构造方法。 开闭原则对扩展内容开放，对修改内容关闭，尽量在不改变原有代码的前提下完成需求。（人话：扩展代码可以，修改代码不行，保存原有代码，添加新的需求实现代码） 抽象类与抽象方法Java中的抽象方法就是以abstract修饰的方法，这种方法只声明返回的数据类型、方法名称和所需的参数，没有方法体，也就是说抽象方法只需要声明而不需要实现。 当一个方法为抽象方法时，意味着这个方法应该被子类的方法所重写，否则其子类的该方法仍然是abstract的，这个子类由于继承父类，拥有抽象方法，因此它也是抽象类，即声明为abstract。abstract方法只允许声明不能实现。 抽象类注意事项 抽象类不能被实例化 抽象类中有构造方法 抽象类的子类必须重写父类中所有抽象方法，或者子类也是抽象类 如果一个类中含有abstract方法，那么这个类必须用abstract来修饰，当然abstract类也可以没有abstract方法。一个抽象类里面没有一个抽象方法可用来禁止产生这种类的对象 final关键字可以修饰方法类变量 final修饰的方法不能被重写 final修饰的变量是常量，不能再次被赋值 常量命名规范： ​ 如果是一个单词，所有字母大写，如果是多个单词，同样所有单词大写，但中间需要使用下划线分隔 final修饰的类不能被继承 final修饰的成员变量初始化要么是在创建的时候直接给值，要么是在构造方法结束前给值。 代码块 局部代码块 方法内的一对中括号，限定变量的生命周期，及早释放，提高内存利用率。 构造代码块 类中方法外，每次构造方法执行时，都会执行该代码块代码，并且在构造方法执行前执行 作用：将多个构造方法中相同的代码，抽取到构造代码块中，提高代码的复用性。 静态代码块 类中方法外，需要使用static修饰，随着类的加载而加载，并且只执行一次。 作用：类加载时做数据初始化操作。 基本数据类型（8种） 数据类型 字节数 默认值 包装类 byte 1 0 Byte short 2 0 Short int 4 0 Integer long 8 0L Long char 2 ‘u0000’ Character float 4 0.0F Float double 8 0.0D Double boolen 1 false Boolen String等引用类型默认值是null 自动装箱java底层自动调用 valueOf()方法，把一个基本数据类型变成对应的包装类 1Integer i1 = 22; 自动拆箱把一个包装类，变成基本数据类型。 1int i2 = i1; 123Integer i1 = 100;i1 += 200;System.out.println(i1);// 300 上面代码看似简单，但计算过程很重要； 123Integer i1 = 100; //自动装箱，将100转换为Integer类型。i1 += 200; // i1 = i1 + 200 首先自动拆箱，将i1变为int 100，然后相加，最后将结果300自动装箱赋值给i1System.out.println(i1);// 300 注意：Integer是对象，只要是对象，在使用前就必须进行不为null判断。 数据类型转换1234567graph LRchar --&gt; intbyte --&gt; shortshort --&gt; intint --&gt; longlong --&gt; floatfloat --&gt; double 自动提升：两个数值进行二元运算时先将两个操作数转换为同一类型，然后进行运算。 123456789int a = 20_0000_0000;int b = 3;long c;c = a * b;System.out.println(c); //这个结果是错误的//a和b都是int类型，在计算时都使用int类型，计算结果同样使用int类型存储，因为计算结果太大溢出，因此int存储的结果是错误的，再赋值给long类型也是错误的结果。c = (long)a * b;System.out.pringln(c); //这个结果正确//将a强制转换为long后，a和b的运算使用long类型进行，最后使用long存储计算结果，赋值给c，结果正确。 int转String 直接加双引号，10+&quot;&quot; 使用String类中的valueOf()方法。 String转int​ Integer.parseInt()方法，返回值为int类型。 Arrays.binarySearch()返回值 要查找的元素存在，则返回索引， 要查找的元素不存在，返回（-插入点-1） 插入点就是这个元素应该在数组中的位置，因为使用二分查找必须是有序的，因此每个元素都可以有一个确定的位置，即插入点。 为什么要-1，若不减1，插入点可能是0，则不能确定元素是否存在。 switch支持的表达式类型​ int、byte、char、short、枚举类型、字符串（JDK7） 接口接口的定义与特点接口用关键字interface来定义 public interface &lt;Interface_Name&gt;{} 接口不能实例化 接口与类之间是实现关系，通过implements关键字表示 public class &lt;Class_Name&gt; implements &lt;Interface_Name&gt; {} 接口可以多实现。 接口中的变量默认是常量，系统会自动加入三个关键字修饰：public、static、final 接口没有构造方法。 接口中方法没有方法体，默认是public、abstract的，在jdk8后，允许在接口中定义非抽象方法，但需要使用default修饰，这些方法就是默认方法，不强制实现类重写，用于解决接口的升级问题。 接口中默认方法注意事项： 默认方法不是抽象方法，所以不能被强制重写。但可以重写，重写要去掉default。 public可以省略，但default不能。 如果实现了多个接口，接口中有相同的默认方法声明，子类就必须重写默认方法。 JDK8中接口成员的特点： 允许在接口中定义非抽象类型，但需要default修饰，用于解决接口的升级问题。 允许定义static静态方法。public static void &lt;Func_Name&gt;(){} 一个文件中可以有多个类，但只能有一个被public修饰，被public修饰的类必须与文件名保持一致。 接口和抽象类的相同点和区别？相同点: 都不能被实例化。 接口的实现类或抽象类的子类需实现接口或抽象类中相应的方法才能被实例化。 不同点： 接口只能有方法定义，不能有方法的实现，而抽象类可以有方法的定义与实现。 JDK8后可以有默认接口，默认接口有方法体。 实现接口的关键字为implements,继承抽象类的关键字为extends。一个类可以实现多个接口，只能继承一个抽象类。 当子类和父类之间存在逻辑上的层次结构，推荐使用抽象类，有利于功能的累积。当功能不需要，希望支持差别较大的两个或更多对象间的特定交互行为，推荐使用接口。使用接口能降低软件系统的耦合度，便于日后维护或添加删除方法。 类和接口的关系类和类的关系继承关系，只能单继承，但是可以多层继承。 类和接口的关系实现关系，可以单实现，可以多实现，还可以继承的同时实现多个接口。 如果类实现的接口和继承的父类中有相同的函数，则默认是继承来的函数生效。 接口和接口的关系继承关系，可以多继承。 若多个继承的接口有函数代码逻辑冲突，则必须重写。 多态多态的成员访问特点 成员变量：编译看左边（父类），运行看左边（父类） 即：编译和运行使用的都是父类的成员变量。 成员方法：编译看左边（父类），运行看右边（子类） 即：编译时看父类中有没有该方法，运行时看子类中具体的逻辑代码。 多态的好处扩展性提高，定义方法时使用父类作为形式参数，该方法就可以接受任意子类对象。 弊端不能调用子类中特有的方法。 多态中的转型 向上转型 父类引用指向子类对象。 1FuClass f = new ZiClass(); 向下转型 从父类类型转换成子类类型。类似强制类型转换 12FuClass f = new ZiClass();ZiClass z = (ZiClass)f; 内部类定义内部类对象外部类名.内部类名 对象名 = new 外部类对象().new 内部类对象(); 1Outer.Inner i = new Outer().new Inner(); 访问特点：1. 内部类可以使用外部类成员，包括私有成员。 2. 外部类访问内部类成员必须创建对象。 静态成员内部类外部类名.内部类名 对象名 = new 外部类名.内部类名(); 1Outer.Inner oi = new Outer.Inner(); 局部内部类定义方法：在方法内定义类。 123456789101112class Outer&#123; public void method()&#123; class Inner&#123; public void show()&#123; System.out.println("show"); &#125; &#125; Inner i = new Inner(); i.show(); &#125;&#125; 访问方式：只能在方法中创建对象并访问。 匿名内部类将继承\实现，方法重写，创建对象放在了一部进行。 12345678910interface Inter&#123; void show();&#125;new Inter()&#123; @Override public void show()&#123; System.out.println("匿名内部类"); &#125;&#125;.show(); 应用场景：接口的形参是接口或抽象类。 Lambda表达式对匿名内部类进行优化。 1234567891011121314151617public class Test&#123; public static void main(String[] args) &#123; goSwimming(new Inter() &#123; @Override public void learn() &#123; System.out.println("learn"); &#125; &#125;); // 匿名内部类 goSwimming(() -&gt; System.out.println("learn")); // lambda表达式 &#125; public static void goSwimming(Inter inter)&#123; inter.learn(); &#125;&#125;interface Inter&#123; void learn();&#125; 使用前提： 有一个接口（只能是接口） 接口中有且仅有一个抽象方法 Lambda表达式的省略模式 参数类型可以省略，但有多个参数的情况下，不能只省略一个。 如果参数有且只有一个，那么小括号可以省略。 如果函数体只有一条语句，可以省略大括号和分号，甚至return语句。 Lambda表达式和匿名内部类的区别所需类型不同： 匿名内部类可以是接口，也可以是抽象类，还可以是具体类。 Lambda表达式只能是接口。 使用限制不同 如果接口中有且仅有一个抽象方法，可以使用Lambda表达式，也可以使用匿名内部类。 如果接口中多于一个抽象方法，只能使用匿名内部类，而不能使用Lambda表达式。 实现原理不同 匿名内部类编译之后产生一个单独的.class字节码文件 Lambda表达式编译之后，没有一个单独的.class字节码文件。对应的字节码文件会在运行时动态生成。 异常运行时异常和编译时异常运行时异常可以忽略不处理，编译时异常必须处理。 throw和throws的比较 throws用在方法声明后面，跟的是异常的类名；throw在方法体内，跟异常的对象。 throws表示声明一个异常，若交由调用者处理；throw是手动抛出异常，是异常处理。 自定义异常 定义异常类 明确继承关系 构造方法（空参、带参） 集合集合和数组对比 数组长度不可变；集合长度可变，会自动扩容。 数组可以存储基本数据类型和引用数据类型；集合只能存储引用数据类型，如果要存储基本数据类型，就要存对应的包装类。int -&gt; Integer 集合分类1234567891011graph TB集合 --单列--&gt; Collection集合 --多列--&gt; MapCollection --可重复--&gt; ListCollection --不可重复--&gt; SetList --&gt; ArrayListList --&gt; LinkedListSet --&gt; HashSetSet --&gt; TreeSetMap --&gt; HashMapMap --&gt; TreeMap 叶子节点是实现类，其他都是接口。 集合常用方法 方法 描述 boolean add(E e) 添加元素 boolean remove(Object o) 删除元素 boolean removeIf(Predicate&lt;? super E&gt; filter) 指定条件删除，参数是Lambda表达式 contains(Object o) 判断集合是否包含元素 clear() 清空集合 isEmpty() 判断集合是否为空 size() 返回集合元素数量 boolean retainAll(Collection&lt;?&gt; c) 从集合中删除不包含在指定集合中的元素 迭代器集合专用遍历方式 Iterator iterator() 默认指向0索引位置。 方法 方法 描述 boolean hasNext() 判断当前位置是否有元素可以被取出 E next() 获取当前位置元素，并将迭代器移向下一个位置 remove() 删除迭代器指定元素 增强for简化数组和Collection集合的遍历 是JDK5之后出现的，内部原理是一个Iterator迭代器，只有实现了Iterator接口的类才能使用迭代器和增强for List和Set可以使用，Map不能使用。 1234Collection&lt;String&gt; collection = new ArrayList&lt;&gt;();for(String s : collection)&#123; System.out.println(s);&#125; 注意：在增强for中，s只是第三方变量，修改其值并不会改变集合中的元素。 在增强for中使用remove方法出现ConcurrentModificationException异常12345678910111213141516public static void main(String[] args) &#123; String[] strArr = &#123;"111","222","333","333","444"&#125;; List&lt;String&gt; strings = Arrays.asList(strArr); Collection&lt;String&gt; collection = new ArrayList&lt;&gt;(strings); collection.add("aaa"); collection.add("bbb"); collection.add("ccc"); Iterator&lt;String&gt; iterator = collection.iterator(); for (String s : collection) &#123; if("aaa".equals(s))&#123; collection.remove(s); &#125; &#125; String s = collection.toString(); System.out.println(s);&#125; 上面代码使用增强for删除元素，看似没有问题，然而实际运行时会抛出ConcurrentModificationException异常 这是由于增强for循环底层调用的是迭代器的next和hasnext方法来遍历的，移除元素后，无法预知到元素的位置。这也是增强for的缺点，不能获取下标，不能动态删除集合中的内容。 大概意思是说在增强for和迭代器Iterator以及forEach中，不能使用remove删除元素，否则会抛出异常。 解决方法123456789101112131415161718public static void main(String[] args) &#123; String[] strArr = &#123;"111","222","333","333","444"&#125;; List&lt;String&gt; strings = Arrays.asList(strArr); Collection&lt;String&gt; collection = new ArrayList&lt;&gt;(strings); collection.add("aaa"); collection.add("bbb"); collection.add("ccc"); Iterator&lt;String&gt; iterator = collection.iterator(); List&lt;String&gt; removeList = new ArrayList&lt;&gt;(); for (String s : collection) &#123; if("aaa".equals(s))&#123; removeList.add(s); &#125; &#125; collection.removeAll(removeList); String s = collection.toString(); System.out.println(s);&#125; 三种集合遍历方式 普通for循环 123for (int i = 0; i &lt; collection.size(); i++) &#123; &#125; 使用场景：需要操作索引 迭代器Iterator 1234Iterator&lt;String&gt; it = collection.iterator();while(it.hasNext())&#123; System.out.println(it.next());&#125; 使用场景：遍历时删除元素 增强for 123for(String s : collection)&#123; System.out.println(s);&#125; 使用场景：仅遍历 SetTreeSet注意事项：使用TreeSet时，对于自定义类，必须定义排序规则，定义排序规则的方式有两种： 自然排序：自定义类实现Comparable接口，并重写其中的compareTo方法，根据返回值进行排序，返回负数，插入前面；返回0，不插入；返回正数，插入到后面。 12345678910public class Student implements Comparable&lt;Student&gt;&#123; // Comparable中的泛型应该是TreeSet中的数据类型 private String name; private int age; @Override public int compareTo(Student o) &#123; return this.getAge()-o.getAge(); &#125; // 构造方法、get和set方法省略。&#125; 比较器排序：创建TreeSet对象时使用有参构造方法，参数是Comparator对象，重写compare方法，根据返回值进行排序。 1234567891011121314151617181920212223242526public static void main(String[] args) &#123; //有参构造的两种方式 //第一种，Lambda表达式 TreeSet&lt;Student&gt; set = new TreeSet&lt;&gt;((Student s1,Student s2) -&gt; &#123; return s1.getAge()-s2.getAge(); &#125;); //第二种，匿名内部类 TreeSet&lt;Student&gt; ts = new TreeSet&lt;&gt;(new Comparator&lt;Student&gt;() &#123; @Override public int compare(Student o1, Student o2) &#123; // 主要条件：根据age排序 int result = o1.getAge() - o2.getAge(); // 次要条件：根据name排序 result = result == 0 ? o1.getName().compareTo(o2.getName()) : result; return result; &#125; &#125;); Student s1 = new Student("zhangsan", 23); Student s2 = new Student("lisi", 22); Student s3 = new Student("wangwu", 24); set.add(s1); set.add(s2); set.add(s3); System.out.println(set);&#125; 红黑树红黑树添加节点时，默认节点是红色效率高。 红黑树添加节点 HashSet注意事项 Object类中的hashCode方法根据地址值计算hash值，因此可能有相同内容的对象存储到set中，若HashSet中存储自定义类，需要重写hashCode和equals方法。 不能使用索引遍历set。 底层原理 JDK1.7以前，HashSet的底层使用Hash表+链表的形式存储数据，即链地址法。HashSet默认的加载因子是0.75，最大容量是16，因此可以得出HashMap的默认容量是：0.75*16=12，当存储空间&gt;=12时，发生扩容。当数据要添加到set中时，通过hashCode函数计算出数据应该在hash表中的索引，如果该位置当前无数据（null），直接添加，如果该位置不为空，则通过equals方法判断当前数据和hash表中数据是否相等，相等不添加，不等则添加到链表头部。 由于使用链表，当链表长度过长时，添加、查询效率太低，在JDK1.8之后，自动将长度大于等于8的链表转换为红黑树存储。因此在1.8之后，hash表中不仅有链表，还有红黑树。 可变参数Stream流获取方法 单列集合 12HashSet&lt;String&gt; set = new HashSet&lt;String&gt;(Set.of("张三","李四","王五","赵六"));set.stream().forEach(s-&gt; System.out.println(s)); 双列集合 123HashMap&lt;String,Integer&gt; map = new HashMap&lt;&gt;(Map.of("张三",23,"李四",24));map.keySet().stream().forEach(s-&gt;System.out.println(s));//map.entrySet().stream().forEach(s-&gt;System.out.println(s)); 数组 12int[] arr = &#123;1,2,3,4,5&#125;;Arrays.stram(arr).forEach(s-&gt;System.out.println(s)); 同类型数据 1Stram.of(1,2,3,4,5).forEach(s-&gt;System.out.println(s)); IO流 1234graph TBIO流--&gt;字节流IO流--&gt;字符流字节流 Java中泛型必须是引用类型。 BigDecimal精确计算需要使用String进行构造BigDecimal对象。使用double不行。]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[位运算]]></title>
    <url>%2F%E4%BD%8D%E8%BF%90%E7%AE%97.html</url>
    <content type="text"><![CDATA[如何不使用三方变量实现数据交换使用位运算亦或操作 原理： 12a ^ a = 0a ^ 0 = a 因此： 12345int a = 20;int b = 10;a = a ^ b;b = a ^ b; // b = a ^ b ^ b ====&gt; aa = a ^ b; // a = a ^ b ^ a ====&gt; b]]></content>
      <categories>
        <category>位运算</category>
      </categories>
      <tags>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[毕设项目bug总结]]></title>
    <url>%2F%E6%AF%95%E8%AE%BE%E9%A1%B9%E7%9B%AEbug%E6%80%BB%E7%BB%93.html</url>
    <content type="text"><![CDATA[[toc] Content type &#39;multipart/form-data;boundary=--------------------------685456864425903977582571;charset=UTF-8&#39; not supported]开发完接口后使用postman测试，发现报上面错误，刚开始以为是跨域不支持，后来发现不是。 原因是接口controller参数使用了@RequestBody注解，它要求必须通过实体对象传参，不能通过form-data表单提交的方式进行传参。 解决方法 postman请求时改成json方式提交 去掉接口的@RequestBody注解]]></content>
      <categories>
        <category>Springboot</category>
        <category>fabric</category>
      </categories>
      <tags>
        <tag>Springboot</tag>
        <tag>fabric</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[面试]]></title>
    <url>%2F%E9%9D%A2%E8%AF%95.html</url>
    <content type="text"><![CDATA[数据结构 排序算法，快排步骤，稳定排序 数据库 MySQL存储引擎、索引、为什么查主键索引会比较快、hash和b+哪个快 数据库分库查找 MySQL的数据结构 b树和b+树的区别，为什么是b+树 innodb索引怎么实现的 聚簇索引和非聚簇索引 覆盖索引怎么实现 隔离级别 事务的ACID 操作系统 页面置换算法，LRU的实现 内存管理机制：块，页，段，段页 进程切换时机： 操作系统怎么对用户实现并行：单核时间片轮转，多核多进程 CPU调度算法 计算机网络输入网址到网页显示的过程 DNS HTTP OSI每层用了什么协议 应用层：HTTP，HTTPS，ICMP，POP3 表示层 会话层 传输层：TCP，UDP 网络层：IP 数据链路层：ARP 物理层 每次请求http都得重新建立连接嘛：​ http1.0是，1.1keep-alive http和https的区别： http明文传输，有安全隐患，https是在tcp和http中间加入了ssl/tls层，加密传输。 http使用80端口，https使用443端口 http连接建立简单，在tcp三次握手之后就可以进行http报文传输，而https在三次握手之后还需要进行ssl/tls握手才可以进行报文加密传输 https需要向CA申请数字证书，来保证服务器的身份是可信的。 HTTP状态码 状态码 具体含义 常见状态码 1XX 提示信息，表示目前是协议处理的中间状态，还需要后续操作 2XX 成功，报文已经收到并正确处理 200，204，206 3XX 重定向，资源位置发生变化，需要客户端重新发送请求 301，302，304 4XX 客户端请求错误，请求报文有误，服务器无法处理 400，403，404 5XX 服务器内部错误，服务器处理请求时内部发生错误 500，501，502，503 2XX200 ok，最常见的状态码，表示一切正常，如果是非HEAD请求，返回的响应头都会有body数据。 204 No Content，正常请求反应，但是body中无数据 206 Partial Content，应用于HTTP分块下载或断点续传，表示响应返回的body数据并不是资源的全部，而是其中一部分，也是服务器处理成功的状态。 3XX301 Move Permanently，永久重定向，资源不存在，需要用新的url访问。 302 Found，临时重定向，表示资源还在，但是需要用另一个url请求。 304 Not Modified，不具有跳转含义，表示资源未修改，重定向到已缓存文件，也称缓存重定向，用于缓存控制。 4XX400 Bad Request， 403 Forbidden 404 Not Found 5XX500 Internal Server Error 501 Not Implement 502 Bad Gateway 503 Service Unavailable 短链接HTTP常见字段有哪些Java1. Java中thread有几种创建方式，区别是什么2. ThreadPoolExecutioner的参数和工作流程3. Thread Local4. HashMap源码、扩容步骤5. java1.8的hashmap、hashmap resize和1.7有什么区别6. 为什么hashmap计算hashcode要计算hashcode后高位运算再&amp;(old capacity)7. volatile，volatile和锁的区别8. synchronized和reentrantLock区别9. synchronized锁升级过程10. GC11.成员变量和局部变量的区别 类中位置不同：成员变量在类中方法外，局部变量在方法内或方法的形参 内存中位置不同：成员变量在堆空间，局部变量在栈空间 生命周期不同：成员变量的生命周期与对象相同，局部变量随着方法的调用而存在，调用完毕消失。 初始化值不同：成员变量在堆中有默认初始值，局部变量没有默认初始值，必须先定义赋值再使用。 [ ] ### 16. this关键字的作用 可以调用本类的成员 解决局部变量和成员变量的重名问题 代表所在类的对象引用 [x] ### 17.字符串常量池 当使用双引号创建字符串对象的时候，系统会检查字符串是否在字符串常量池中存在，若不存在则创建，存在则不会重新创建，直接复用。 双引号创建的字符串对象在字符串常量池中存储，通过构造方法创建的字符串对象，在堆内存中存储。 从jdk7开始字符串常量池从方法区挪到了堆内存。 [x] ### 18. ==和equals()的区别 区别 ==是关系运算符，equals()是方法，都返回布尔值 Object的==和equals()比较的都是地址，作用相同 ==：基本类型，比较值是否相等；引用类型，比较地址是否相等；不能比较没有父子关系的两个对象。 equals()：JDK中一般的类都已经重写了equals方法，比较的是内容；如果没有重写equals()，将调用父类（默认Object类）的equals()方法，Object的equals(obj)方法比较使用了this==obj，即比较地址值 问题 true，abc存储在字符串常量池中，地址相同，而对于引用类型，==判断地址是否相等。 false，s1的abc在字符串常量池中，而s2new一个新对象有新的地址空间，故地址不同，结果为false。 false，字符串+拼接时，系统底层会自动创建出一个StringBuilder对象，然后调用其append方法完成拼接，最后调用其toString方法转换为String型。 常量优化机制，”a“+”b“+”c“=”abc”变量+string ————&gt;StringBuilderString+String————&gt;常量优化机制 [x] ### 19. switch()支持哪些数据类型，为什么？ 为什么switch不支持long - eycuii - 博客园 (cnblogs.com) switch支持的数据类型 基本数据类型 char byte short int 基本数据类型包装类 Character Byte Short Integer JDK1.5之后，枚举类型enum JDK1.7之后，String 为什么不支持Long原因就是 switch 对应的 JVM 字节码 lookupswitch、tableswitch 指令只支持 int 类型。 下面是 JVM 规范中的说明（https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-3.html#jvms-3.10）： The Java Virtual Machine’s tableswitch and lookupswitch instructions operate only on int data. Because operations on byte, char, or short values are internally promoted to int, a switch whose expression evaluates to one of those types is compiled as though it evaluated to type int. If the chooseNear method had been written using type short, the same Java Virtual Machine instructions would have been generated as when using type int. Other numeric types must be narrowed to type int for use in a switch. Java虚拟机的tableswitch和lookupswitch指令只对int数据进行操作。由于对byte、char或short值的操作在内部被提升为int，因此，如果switch的表达式求值为这些类型之一，则编译时就像求值为int类型一样。如果chooseNear方法是使用类型short编写的，那么会生成与使用类型int相同的Java虚拟机指令。其他数字类型必须缩小为int类型，以便在switch中使用。 byte、char、short 类型在编译期默认提升为 int，并使用 int 类型的字节码指令。所以对这些类型使用 switch，其实跟 int 类型是一样的。 为什么支持Stringswitch 支持 String 其实就是语法糖。编译器会根据字符串的 hashCode 来处理。 例： 123456789101112CopyString a = "aa";switch (a) &#123; case "aa": System.out.println("111"); break; case "AaAa": System.out.println("222"); break; case "AaBB": System.out.println("333"); break;&#125; 反编译后： 1234567891011121314151617181920212223242526CopyString var1 = "aa";byte var3 = -1;switch(var1.hashCode()) &#123; // 第一个switch，根据hashCode计算第二个switch内的位置 case 3104: if (var1.equals("aa")) &#123; var3 = 0; &#125; break; case 2031744: if (var1.equals("AaBB")) &#123; var3 = 2; &#125; else if (var1.equals("AaAa")) &#123; var3 = 1; &#125;&#125;switch(var3) &#123; // 第二个switch，执行原switch的逻辑 case 0: System.out.println("111"); break; case 1: System.out.println("222"); break; case 2: System.out.println("333");&#125; 可以发现，会先根据 hashCode 找出原始 switch 内的位置，再执行原代码逻辑。 为什么用两个 switch ？就是为了减少编译器的工作。 比如 switch 内有的 case 不写 break 等复杂情况，如果想直接根据 hashCode + equals 来只生成一个 switch，编译器就需要考虑各种情况。 所以目前编译器只做位置映射，第二部分直接按原 switch 来生成了。 equals 和 ==一、123456public static void main(String[] args)&#123; String s = "abc"; StringBuilder sb = new StringBuilder("abc"); System.out.println(s.equals(sb)); // false System.out.println(sb.equals(s)); // false&#125; 两个都是false，但原理不同 s.equals(sb)调用的是String类重写的equals方法，方法源码如下： 123456789101112131415161718192021public boolean equals(Object anObject) &#123; if (this == anObject) &#123; return true; &#125; if (anObject instanceof String) &#123; String anotherString = (String)anObject; int n = value.length; if (n == anotherString.value.length) &#123; char v1[] = value; char v2[] = anotherString.value; int i = 0; while (n-- != 0) &#123; if (v1[i] != v2[i]) return false; i++; &#125; return true; &#125; &#125; return false;&#125; String类的equals方法会判断内容是否相同，但必须传入String类型对象，否则会返回false。若传入String对象，则会一一比较对象内部值是否相同。 因此在上例中，传入StringBuilder对象，equals方法直接返回false。 sb.equals(s)，本身在StringBuilder类中，并没有重写equals方法，而StringBuilder类继承自Object类，因此这里调用Object中的equals方法，源码如下： 123public boolean equals(Object obj) &#123; return (this == obj);&#125; Object类equals方法底层还是使用==判断，即判断地址是否相同，因此StringBuilder的equals方法也是判断地址值是否相同，因此返回false。 二、12345678910111213public class Test&#123; public static void main(String[] args) &#123; String a = "Programming"; String b = new String("Programming"); String c = "Program" + "ming"; System.out.println(a == b); //false System.out.println(a == c); //true System.out.println(a.equals(b)); //true System.out.println(a.equals(c)); //true System.out.println(a.intern() == b.intern()); //true &#125;&#125; a和c都在字符串常量池中，但还略有差别，a直接在字符串常量池中创建对象。c常量优化机制，最后生成programming在字符串常量池中存在，则不创建对象，而直接指向字符串常量池中位置。 b指向堆中new的一个String对象。因此a，b地址不同，而引用类型使用==判断地址,所以a == b结果为false，a == c为true；而String重写equals方法，用来判断字符串字面值是否相等，因此两者都为true 最后intern方法，intern() 方法返回字符串对象的规范化表示形式。当且仅当 s.equals(t) 为 true 时，s.intern() == t.intern() 才为 true。 三、String s = new String(&quot;abc&quot;);过程中会创建几个对象。一个或两个 首先，若字符串常量池中存在&quot;abc&quot;，则在堆中new一个新的String对象。共创建一个对象。 若字符串常量池中不存在&quot;abc&quot;，则现在字符串常量池中创建&quot;abc&quot;String对象，然后在堆中new新对象。共创建两个对象。 20.finally中的代码是否一定执行？两种情况不会执行： 在进入try之前出现异常，程序直接结束 在try中强制退出，如使用System.exit(0) 注意：:warning: 当try/catch中有return语句时，finally中的语句会在return之前执行 :rotating_light: 当try、catch、finally中都有return语句时，finally中的return会覆盖try/catch中的return。 :red_circle: try语句块中某一条语句出现异常，则其后面不再执行，直接进入catch语句。 数据类型123456789int a = 20_0000_0000;int b = 30;long c;c = a * b;System.out.println(c); //这个结果是错误的//a和b都是int类型，在计算时都使用int类型，计算结果同样使用int类型存储，因为计算结果太大溢出，因此int存储的结果是错误的，再赋值给long类型也是错误的结果。c = (long)a * b;System.out.println(c); //这个结果正确//将a强制转换为long后，a和b的运算使用long类型进行，最后使用long存储计算结果，赋值给c，结果正确。 Math.round(11.5) 等于多少？Math.round(-11.5)等于多少？Math.round(11.5)返回值是12，Math.round(-11.5)返回值是-11. ==四舍五入的原理是在参数上加0.5然后向下取整== [ ] ### 20.spring boot跨域 12345678910111213141516@Configuration//配置类public class CorsConfig &#123; @Bean public WebMvcConfigurer corsConfigurer() &#123; return new WebMvcConfigurer() &#123; @Override public void addCorsMappings(CorsRegistry registry) &#123; registry.addMapping("/**")//对所有请求路径 .allowedOrigins("*")//允许所有域名 .allowCredentials(true)//允许cookie等凭证 .allowedMethods("GET", "POST", "DELETE", "PUT","PATCH")//允许所有方法 .maxAge(3600); &#125; &#125;; &#125;&#125; [ ] ### 21.String 和 StringBuilder的区别 String不可改变，StringBuilder可以改变。 [x] ### 22.变量和常量比较的方法 String类型变量String s，常量”test“，二者比较有两种方法（字符串不能用==比较），如下： s.equals(“test”) “test”.equals(s) 两种方法都是调用equals()比较，但第一种方法有可能s是空指针，导致出现空指针异常，第二种方法常量调用equals()一定不会出现异常。推荐第二种方法。 redis redis业务场景 Redis为什么可以做缓存，做缓存可能有哪些问题 缓存穿透、缓存雪崩 redis持久化，RDB和AOF的区别 redis事务怎么实现，为什么不支持回滚]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[转发和重定向的区别]]></title>
    <url>%2F%E8%BD%AC%E5%8F%91%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91%E7%9A%84%E5%8C%BA%E5%88%AB.html</url>
    <content type="text"><![CDATA[转发和重定向转发：客户浏览器发送请求，服务器收到请求后调用内部一个方法在容器内部完成请求处理和转发动作，最后将转发到的那个网页资源返回给客户端。 重定向：客户端发送请求，服务器收到请求后返回302/301状态码以及新的位置，客户端发现是302/301后再次向新的地址发送请求。 举个:chestnut:：办理证件 你先去A窗口，A窗口发现你来错地了，你应该去旁边B窗口，但是他能帮你办了，就顺手去B那帮你办了把结果返回给你，这就是转发。 但如果你去A窗口，A跟你说你来错了，让你去C部门，你又去C办，这就是重定向。 答案 重定向是浏览器发送请求并收到相应以后再次向一个新地址发送请求；转发是服务器收到请求后为了完成相应转到另一个资源 重定向中有两次请求对象，不共享数据；转发只产生一次请求对象，且在组件间共享数据 重定向后地址栏地址会改变，而转发不会 重定向的新地址可以是任意地址，转发必须是同一应用内的某个资源。 问题扩展获取servlet的转发和重定向的方式 转发的方法： 通过HttpServletRequest的getRequestDispatch()方法获得 通过ServletContext的getRequestDispatcher()方法获得 重定向的方法： HttpServletResponse的sendRedirect()方法 结合项目使用 重定向可以实现图片的异步上传 一般访问web-inf下的文件，只能通过转发来实现]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ipfs私有网络搭建]]></title>
    <url>%2Fipfs%E7%A7%81%E6%9C%89%E7%BD%91%E7%BB%9C%E6%90%AD%E5%BB%BA.html</url>
    <content type="text"><![CDATA[IPFS（InterPlanetary File System，星际文件系统），是一个旨在创建持久且分布式存储和共享文件的网络传输协议。它是一种内容可寻址的对等超媒体分发协议。在IPFS网络中的节点将构成一个分布式文件系统。它是一个开放源代码项目，自2014年开始由Protocol Labs在开源社区的帮助下发展。其最初由Juan Benet设计。 IPFS安装ipfs官网（需要翻墙），去dist.ipfs.io下载对应版本的安装包，我的环境是windows+wsl，下载了两个系统的命令行版本，下面以wsl ubunut2004为例。 go-ipfs安装包 go-ipfs_v0.8.0_linux-amd64.tar.gz 解压 1tar -zxvf go-ipfs_v0.8.0_linux-amd64.tar.gz 解压后的文件夹为go-ipfs，cd go-ipfs进入该文件夹，文件夹下有一个install.sh的文件，运行该文件 1sudo ./install.sh 该程序将ipfs文件移动到/usr/local/bin下，没有sudo回报权限错误。 1ipfs --version 显示ipfs版本则安装完成。同样在Windows下安装好。 IPFS私有网络配置密钥私有网络所有的节点必须共享同一个密钥，首先我们使用密钥创建工具，创建一个密钥。参考ipfs-swarm-key-gen 安装 1go get -u github.com/Kubuxu/go-ipfs-swarm-key-gen/ipfs-swarm-key-gen 可能下载速度很慢，可以设置go代理。在/etc/profile最后添加export GOPROXY=https://goproxy.cn 上面go get命令会将文件下载到你的GOPATH/bin中，安装完成后，进入GOPATH/bin， 1ipfs-swarm-key-gen &gt; ~/.ipfs/swarm.key 该命令会生成密钥到~/.ipfs下，可能会报错说没有~/.ipfs文件夹，自己先创建好再运行上面命令即可。 密钥生成好后，将该密钥复制到Windows的用户目录（通常为C:\User\Your_Name）下的.ipfs文件夹下。 init分别在Ubuntu和Windows下运行以下命令 12ipfs initipfs bootstrap rm all ipfs init后的默认启动节点是连接ipfs公网的节点，如果要连接私有网络 在每一个节点执行第二条语句，删除掉所有的默认启动节点。 修改配置因为wsl和Windows公用端口号，所以二者不能同时使用默认配置启动，需提前修改一处配置。 修改Windows ipfs配置 在用户目录.ipfs文件夹下有一个config文件，修改其中的5001、8080、4001改为其他未使用端口号。 add然后分别在两个系统中添加对方的节点。 查看Ubuntu的ip地址。123456789ifconfigeth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 172.29.247.157 netmask 255.255.240.0 broadcast 172.29.255.255 inet6 fe80::215:5dff:fef6:3763 prefixlen 64 scopeid 0x20&lt;link&gt; ether 00:15:5d:f6:37:63 txqueuelen 1000 (Ethernet) RX packets 769725 bytes 712542870 (712.5 MB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 370109 bytes 596443776 (596.4 MB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 eth0下的inet就是自己的地址 查看ipfs id123456789ipfs id&#123; "ID": "12D3KooWPJq5t8GR4TkPqbkQcTEuNV4YjGLUGm4efNZ5owBNPNpm", "PublicKey": "CAESIMhyoHz02Bocf8pACjqJ6si9ydWWt5kN5OMPxXprLXU+", "Addresses": null, "AgentVersion": "go-ipfs/0.8.0/", "ProtocolVersion": "ipfs/0.1.0", "Protocols": null&#125; 在Windows中添加Ubuntu节点1ipfs bootstrap add /ip4/172.29.247.157/tcp/4001/ipfs/12D3KooW9qfu5tmdnuUBdS3R9ETsVjWLmuRgE8XhnZez4gJuXnYm ip4后面是ip地址，tcp后面是端口号，ipfs后面是ipfs id，修改为对方对应的数值即可。 接下来查看Windows的ip地址、ipfs id。在Ubuntu中添加Windows节点不再赘述，需要注意的是端口号改为前面你修改过的端口号。 至此配置完成。 启动1ipfs daemon #启动ipfs，可以让他在后台运行。 测试在Windows下向ipfs上传文件，在Ubuntu下载 12ipfs add file added QmSRiccSZ2rX6tocuuA84PhfEBr2MWgVmqsMvHsT4qmMjd file #返回hash值 在Ubuntu中下载文件 12ipfs get QmSRiccSZ2rX6tocuuA84PhfEBr2MWgVmqsMvHsT4qmMjdSaving file(s) to QmSRiccSZ2rX6tocuuA84PhfEBr2MWgVmqsMvHsT4qmMjd 下载后的文件仍是以该hash值命名，只要改一下后缀就可正常使用了。 注意ipfs add命令添加的文件只是暂时保存在ipfs中，GC时会删除，ipfs pin add hashcode会将对应文件永久保存 12ipfs pin add QmSRiccSZ2rX6tocuuA84PhfEBr2MWgVmqsMvHsT4qmMjd #永久保存在网络中ipfs pin rm QmSRiccSZ2rX6tocuuA84PhfEBr2MWgVmqsMvHsT4qmMjd #删除]]></content>
      <categories>
        <category>IPFS</category>
      </categories>
      <tags>
        <tag>IPFS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sed]]></title>
    <url>%2Fsed.html</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[linux命令]]></title>
    <url>%2Flinux%E5%91%BD%E4%BB%A4.html</url>
    <content type="text"><![CDATA[ssh免密登陆在本地生成密钥ssh-keygen连续回车三次，会在c:/user/username/.ssh（username替换成你的用户名）文件夹下生成私钥id_rsa和公钥id_rsa.pub，通过scp命令将公钥id_rsa.pub上传到服务器用户个人目录下的.ssh文件夹下。 将公钥导入到authorized_keys中 很重要 cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys 修改服务器文件权限123~/.ssh权限设置为700 ~/.ssh/authorized_keys的权限设置为600# 这是linux的安全要求，如果权限不对，自动登录将不会生效 修改ssh配置修改服务器的ssh配置vim /etc/ssh/sshd_config，将PubkeyAuthentication改为yes即可。若root用户无法登陆则需修改PermitRootLogin为yes。 用户登陆时，会去登陆账户文件夹下的.ssh文件夹的authorized_keys中验证密钥是否正确，若正确，则可登陆。 创建新用户语法1useradd [-mMnr][-c &lt;备注&gt;][-d &lt;登入目录&gt;][-e &lt;有效期限&gt;][-f &lt;缓冲天数&gt;][-g &lt;群组&gt;][-G &lt;群组&gt;][-s &lt;shell&gt;][-u &lt;uid&gt;][用户帐号] 常用参数 -c&lt;备注&gt; 加上备注文字。备注文字会保存在passwd的备注栏位中。 -d&lt;登入目录&gt; 指定用户登入时的起始目录。 -g&lt;群组&gt; 指定用户所属的群组。 -m 自动建立用户的登入目录。 -r 建立系统帐号。 -u 指定用户ID。 使用添加一般用户 1useradd username 为添加的用户指定相应的用户组 1useradd -g root username 创建一个系统用户 1useradd -r username 为新添加的用户指定home目录 1useradd -d /home/myd username 建立用户且制定ID 1useradd username -u 544 更改密码语法1passwd [-k] [-l] [-u [-f]] [-d] [-S] [username] 常用参数： -d —delete删除密码 -f —force强迫用户下次登录时必须修改口令 -k —keep更新只能发送在过期之后 -l —lock停止账号使用 -S —status显示密码信息 -u —unlock启用已被停止的账户 -x —maximum指定口令最长存活期 -n —minimum指定口令最短存活期 -w —warning口令要到期提前警告的天数 -i —inactive口令过期后多少天停用账户 使用设置密码 1passwd username 删除用户密码 1passwd -d username scp命令Linux scp 命令用于 Linux 之间复制文件和目录。 scp 是 secure copy 的缩写, scp 是 linux 系统下基于 ssh 登陆进行安全的远程文件拷贝命令。 scp 是加密的，rcp 是不加密的，scp 是 rcp 的加强版。 语法123scp [-1246BCpqrv] [-c cipher] [-F ssh_config] [-i identity_file][-l limit] [-o ssh_option] [-P port] [-S program][[user@]host1:]file1 [...] [[user@]host2:]file2 常用参数 -r： 递归复制整个目录。 -q： 不显示传输进度条。 -P port：注意是大写的P, port是指定数据传输用到的端口号 -i identity_file： 从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。适用于禁止ssh密码登陆的情况。 -p：保留原文件的修改时间，访问时间和访问权限。 -C： 允许压缩。（将-C标志传递给ssh，从而打开压缩功能） -F ssh_config： 指定一个替代的ssh配置文件，此参数直接传递给ssh。 上传文件目录 1scp -r local_folder user@ip:path 非目录 1scp local_file user@ip:path 更改最后一个参数的文件名可以实现传输的同时改名。 下载文件将scp的最后两个参数位置调换即可。 1scp -r user@ip:path local_path]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mermaid从入门到如图]]></title>
    <url>%2FMermaid%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.html</url>
    <content type="text"><![CDATA[概述 什么是Mermaid？ Mermaid是一种基于Javascript的绘图工具，使用类似于Markdown的语法，使用户可以方便快捷地通过代码创建图表。 项目地址：https://github.com/mermaid-js/mermaid（需要将梯子设置成全局模式才能访问） 怎么使用Mermaid？ 使用特定的Mermaid渲染器； 使用集成了Mermaid渲染功能的Markdown编辑器，如Typora。使用时，需要将代码块的语言选择为Mermaid。 Typora是宇宙第一笔记软件，不接受反驳 Mermaid能绘制哪些图？ 饼状图：使用pie关键字，具体用法后文将详细介绍 流程图：使用graph关键字，具体用法后文将详细介绍 序列图：使用sequenceDiagram关键字 甘特图：使用gantt关键字 类图：使用classDiagram关键字 状态图：使用stateDiagram关键字 用户旅程图：使用journey关键字 实例：朱元璋家谱简图，圆圈代表皇帝 12345678910graph LRemperor((朱八八))-.子.-&gt;father(朱五四)-.子.-&gt;朱四九-.子.-&gt;朱百六朱雄英--长子--&gt;朱标--长子--&gt;emperoremperor2((朱允炆))--次子--&gt;朱标朱樉--次子--&gt;emperor朱棡--三子--&gt;emperoremperor3((朱棣))--四子--&gt;emperoremperor4((朱高炽))--长子--&gt;emperor3 以上是概述，下面详细介绍饼状图和流程图的语法。其他图的语法可访问上文给出的项目地址，自行学习。（记得挂梯子） 饼状图 在线渲染器：Online FlowChart &amp; Diagrams Editor（需要梯子） 语法 从pie关键字开始图表 然后使用title关键字及其在字符串中的值，为饼图赋予标题。（这是可选的） 数据部分 在&quot; &quot;内写上分区名。 分区名后使用:作为分隔符 分隔符后写上数值，最多支持2位小数——数据会以百分比的形式展示 实例 12345pie title 为什么总是宅在家里？ &quot;喜欢宅&quot; : 15 &quot;天气太热或太冷&quot; : 20 &quot;穷&quot; : 500 流程图 在线渲染器：Online FlowChart &amp; Diagrams Editor（需要挂梯子） 实例123456graph LR A[Start] --&gt; B&#123;Is it?&#125;; B -- Yes --&gt; C[OK]; C --&gt; D[Rethink]; D --&gt; B; B -- No ----&gt; E[End]; 方向用于开头，声明流程图的方向。 graph或graph TB或graph TD：从上往下 graph BT：从下往上 graph LR：从左往右 graph RL：从右往左 结点 无名字的结点：直接写内容，此时结点边框为方形 有名字的结点：节点名后书写内容，内容左右有特定符号，结点边框由符号决定 下面的实例中，没有为graph指定方向，因此默认是从上往下的。但是由于各个结点之前没有箭头，所以他们都处于同一排。 12345678graph 默认方形 id1[方形] id2(圆边矩形) id3([体育场形]) id4[[子程序形]] id5[(圆柱形)] id6((圆形)) 1234567graph id1&#123;菱形&#125; id2&#123;&#123;六角形&#125;&#125; id3[/平行四边形/] id4[\反向平行四边形\] id5[/梯形\] id6[\反向梯形/] 连线样式 实线箭头：分为无文本箭头和有文本箭头，有文本箭头有2种书写格式 12graph LRa--&gt;b--文本1--&gt;c--&gt;|文本2|d 粗实线箭头：分为无文本箭头和有文本箭头 12graph LRa==&gt;b==文本==&gt;c 虚线箭头：分为无文本箭头和有文本箭头 12graph LRa-.-&gt;b-.文本.-&gt;c 无箭头线：即以上三种连线去掉箭头后的形式 12345678graph LRa---bb--文本1!---cc---|文本2|dd===ee==文本3===ff-.-gg-.文本.-h 其他连线：需要将graph关键字改为flowchart，除了新增加的连线形式外，上面三种线的渲染效果也会不同 123456flowchart LR A o--o B B &lt;--&gt; C C x--x D 旧连线 --文本--&gt; 也会不同 延长连线：增加相应字符即可，如下图中的B到E，连线中增加了一个-。字符可多次添加。 123456graph LR A[Start] --&gt; B&#123;Is it?&#125;; B --&gt;|Yes| C[OK]; C --&gt; D[Rethink]; D --&gt; B; B ---&gt;|No| E[End]; 连线形式 直链 12graph LR A -- text --&gt; B -- text2 --&gt; C 多重链：可以使用&amp;字符，或单个描述 123456789graph a --&gt; b &amp; c--&gt; d A &amp; B--&gt; C &amp; D X --&gt; M X --&gt; N Y --&gt; M Y --&gt; N 其他 子图：需要将graph关键字改为flowchart，在代码段的开始加入subgraph，尾部加入end 1234567891011121314flowchart TB c1--&gt;a2 subgraph one a1--&gt;a2 end subgraph two b1--&gt;b2 end subgraph three c1--&gt;c2 end one --&gt; two three --&gt; two two --&gt; c2 注释：在行首加入%%即可。 123456graph LR%%这是一条注释，在渲染图中不可见 A[Hard edge] --&gt;|Link text| B(Round edge) B --&gt; C&#123;Decision&#125; C --&gt;|One| D[Result one] C --&gt;|Two| E[Result two]]]></content>
      <categories>
        <category>typora</category>
      </categories>
      <tags>
        <tag>Mermaid</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux系统下服务器目录权限设置]]></title>
    <url>%2Flinux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%AE%E5%BD%95%E6%9D%83%E9%99%90%E8%AE%BE%E7%BD%AE.html</url>
    <content type="text"><![CDATA[Linux系统下设置合理的服务器目录、文件权限Linux系统设置合理的目录以及文件权限是一个比较头疼的问题（当然我们说的是多用户，单用户的话就无所谓了，都是你的文件，你开心就好），特别是服务器这种涉及到系统安全的目录，我们这里谈论在多用户系统中如何设置一个合理的服务器用户权限。 预备知识权限在terminal中使用ll命令（ll命令是ls -l的别名）查看当前目录下文件的详细信息，大体是这个样子： 12345XXX@iZ2ze9b3o2pb5g31mt7a6wZ:/var/www$ lltotal 12drwxr-xr-x 3 root root 4096 Apr 13 11:30 ./drwxr-xr-x 12 root root 4096 Apr 13 11:30 ../drwxrwx--- 2 root www-data 4096 Apr 14 22:43 html/ 第一栏可以分为四组三组d | rwx | rwx | ---，第一个d表示这是一个目录，若不是目录用-代替，第一组]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP+MySQL乱码问题总结]]></title>
    <url>%2FPHP-MySQL%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98.html</url>
    <content type="text"><![CDATA[在可视化数据库管理软件创建数据库时，会要求我们选择字符集和排序规则，那么什么是字符集和排序规则，我们又该如何选择呢？ 基本概念 字符（charset）：字符指类字形单位或符号，包括字母、数字、运算符号、标点符号和其他符号，以及一些功能性符号。如‘A’，‘B’ 给定一系列字符，对每个字符赋予一个数值，用该数值来代表对应字符，这一数值就是该字符的编码（Encoding） 从一种二进制编码到某类字符符号的映射叫字符集（Charset set），如{0=&gt;’A’,1=&gt;’B’} 排序规则（也叫校对、字符序）是指在同一字符集内的排序规则（比较规则），确定排序规则后，才能在一个字符集上定义什么是等价的字符，以及字符间的大小关系。 字符集和排序规则之间是一个1对n的关系，一个字符集有多个排序规则， 一个排序规则之对应一个字符集。 选择使用我们可以在数据库中使用SHOW CHARACTER SET 查看目前版本数据库支持的字符集、默认排序规则以及最大长度（这里也可以验证上篇文章说的utf8是最长3字节的字符编码，而utf8mb4最长4字节）。 为了获得更好的兼容，字符集我们一般选择utf8mb4 排序规则名称遵从命名惯例，以字符序对应的字符集名称开头；以_ci(case insensitive表示大小写不敏感)、_cs(case sensitive表示大小写敏感)或_bin(表示以字符串编码的二进制来比较大小)，因此，选择排序规则要考虑的一个问题是，是否以大小写敏感的方式比较字符串，或者是以字符串编码的二进制值来比较大小。大小写敏感和二进制排序规则的不同在于：二进制排序规则直接使用字符的字节进行比较，而大小写敏感的排序规则在多字节字符集时有更复杂的比较规则。 排序规则一般选择utf8mb4默认的utf8mb4_0900_ai_ci 我们选择的这两项分别对应数据库的character_set_database和collation_database这两个变量，实际上，MySQL里还有其他一些关于编码的变量，我们可以通过show variables like &#39;%character%&#39; 查看字符集变量，使用show variables like &#39;%collation%&#39; 查看排序规则变量，在MySQL8.0版本中，字符集和排序规则变量如下： 1show variables like '%character%' --这是在navicat环境下 Variable_name Value character_set_client utf8mb4 character_set_connection utf8mb4 character_set_database utf8 character_set_filesystem binary character_set_results utf8mb4 character_set_server utf8mb4 character_set_system utf8 character_set_client变量是客户端请求数据的编码方式， character_set_connect变量是客户端服务端连接通信使用的编码方式， character_set_database就是我们创建数据库时选择的编码方式，如果创建数据库是没有指定，则根据character_set_server来指定 character_set_filesystem文件系统编码 character_set_results服务端查询结果使用的编码方式 character_set_server数据库服务器的编码方式 character_set_system这是个只读数据，总是utf8 其中，character_set_client、character_set_connection、character_set_results在每次客户端连接服务器时，都会根据客户端的要求来改变，如在navicat中默认是utf8mb4，如果使用cmd连接MySQL执行上面的命令，那么这几个变量的值应该是gbk（如果没有调整的话）。当然我们也可以自己指定以我们要求的编码方式连接数据库 1mysql -u root -p pw --default-character-set=latin1 指定以latin1编码连接数据库，那么这三个值就是latin1，也可以再登陆后使用set names utf8来改变。 在客户端与数据库交互时，他们可能使用不同的字符集，这时服务端会进行必要的翻译和转换工作，首先服务端总是假设客户端是按照character_set_client设置的字符集来发送数据和SQL语句的，当服务器接收到客户端的数据时，先将其转换成character_set_connection，然后处理sql语句，产生的结果从character_set_connection转换成character_set_results，然后发回客户端。所以最基本的一点是要保证三个字符集是兼容的，这样才能避免通信时出现问题。如果三者不兼容，可能会出现错误甚至是安全问题。 你以为这样就能解决乱码问题了？ 为什么会出现乱码呢？ 这里我们根据乱码出现的位置分为几种情况： 往数据库存数据乱码 数据库数据正常，显示乱码 对于第一种情况，往往是数据库选择的字符集不支持存入的数据。如character_set_database是latin1,而存入的数据是汉字，那么自然会乱码。 第二种情况可能是character_set_connection和character_set_results不兼容导致的，当然最基本的，如果整个网页都乱码的话，可能是php文件编码和设置的meta charset不兼容导致的。 所以在确保character_set_database支持的情况下，在PHP环境中，连接完数据库之后，使用mysql-&gt;set_charset(’utf8mb4‘)函数指定三个字符集为utf8mb4（PHP手册中不推荐使用mysql-&gt;query(“set names utf8”)方法），这样就保证了连接通信正确，基本就不会出现乱码了。 参考： http://ourmysql.com/archives/314 https://www.cnblogs.com/digdeep/p/5228199.html 高性能MySQL（第3版）]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>编码</tag>
        <tag>PHP</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL中的utf8和utf8mb4]]></title>
    <url>%2FMySql%E4%B8%AD%E7%9A%84utf8%E5%92%8Cutf8mb4.html</url>
    <content type="text"><![CDATA[MySQL中utf8和utf8mb4开始之前先回顾一下UTF-8和Unicode的概念 UTF-8？ 来自百度百科的定义 UTF-8（8位元，Universal Character Set/Unicode Transformation Format）是针对Unicode的一种可变长度字符编码。它可以用来表示Unicode标准中的任何字符，而且其编码中的第一个字节仍与ASCII相容，使得原来处理ASCII字符的软件无须或只进行少部份修改后，便可继续使用。因此，它逐渐成为电子邮件、网页及其他存储或传送文字的应用中，优先采用的编码。 那么什么是Unicode呢？ Unicode（统一码、万国码、单一码）是计算机科学领域里的一项业界标准，包括字符集、编码方案等。Unicode 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。 通俗点讲：早期针对英语设计的ASCII码并不能支持其他语言，各国为了把各自的语言文字输入进计算机来处理，制定了自己的编码规范（如中国的gb2312），而这就导致了同样的数据通过不同的编码打开时的乱码问题。而为了统一所有的语言文字，Unicode应运而生，他把所有的语言统一到一套编码里，解决了乱码的问题，UTF-8是Unicode的一种字符集转换格式（Unicode Transformation Format），也就是怎么将Unicode定义的数字转换成程序数据。UTF-8即以8位也就是一个字节为单位对Unicode进行编码，是Unicode的一种实现方式，除了 UTF-8，还有UTF-16，UTF-32 等都可以实现 Unicode，但是 UTF-8 相对而言是用的最为广泛的。 UTF-8编码的特点是对不同范围的字符使用不同长度的编码，如英文字符“A”只需要8位，则用一个字节，汉字多用三个字节，而极少使用的语言字符则使用4字节编码。每个字符最多用4个字节来编码，这样做就节省空间。 在MySQL中，utf8字符集最大字符长度为3字节，如果遇到4字节的宽字符就会出现插入异常的情况，像emoji表情和很多不常用的汉字都无法使用MySQL的utf8字符集，为了弥补这个缺陷，MySQL在5.5.3版本增加了utf8mb4字符集，mb4就是most byte 4，专门用来兼容4字节的Unicode。也就是说：在MySQL中utf8mb4才是真正的UTF-8，是utf8的超集。 要在MySQL中使用4字节长度的UTF-8字符，需要使用utf8mb4字符集，但只有5.5.3版本之后才支持，为了获得更好的兼容，最好使用utf8mb4而不是utf8，对于char类型数据来说，utf8mb4会多消耗一些空间（每个字符多占用一个字节），MySQL官方建议，可以使用varchar来替代char 参考资料： http://ourmysql.com/archives/1402]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>编码</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP学习笔记]]></title>
    <url>%2FPHP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</url>
    <content type="text"><![CDATA[[TOC] php是弱类型语言，不需生命变量类型 变量名只能包含字母数字下划线，并且以字母和下划线开头，变量名区分大小写，$this 是一个特殊的变量，不能被赋值。变量名可以用中文。 php定义的全局变量在函数内使用时需要加global，在c语言中全局变量可以直接使用而不需要global。 print和echo echo可以输出一个或多个字符串，无返回值，速度比print慢 print只允许输出一个字符串，有返回值1 php从html中分离： 凡是在一对开始和结束标记之外的内容都会被 PHP 解析器忽略，这使得 PHP 文件可以具备混合内容。 可以使 PHP 嵌入到 HTML 文档中去，如下例所示。php可以放在文档的任意位置。 php文件里面可以放html、css、js等前端语言， 使用条件的高级分离术 12345&lt;?php if ($expression == true): ?&gt; This will show if the expression is true.&lt;?php else: ?&gt; Otherwise this will show.&lt;?php endif; ?&gt; 要输出大段文本时，跳出 PHP 解析模式通常比将文本通过 echo或 print输出更有效率。 PHP是最好的语言。 2019软件工程师现状报告显示：开发者最爱Python，最讨厌PHP PHP的九种数据类型 ​ 四种标量类型 boolean（布尔） 以下值转换成布尔型时被认为是false 布尔值false本身 整型、浮点型、字符串零 空字符串 空数组 NULL 负数？字符串“false”？ integer（整型） float（浮点型） 永远不要相信浮点数结果精确到了最后一位，也永远不要比较两个浮点数是否相等。0.1+0.2 ==≠== 0.3 string（字符型） 单引号与双引号区别：双引号会解析特殊字符以及变量，而单引号不会。 拼接符（并置运算符） 将变量$message中的数据更新到id为$id的位置，下列语句能够执行正确的是： $sql = “update message set message = $message where id = $id;”; × $sql = “update message set message = ‘$message’ where id = $id;”; √ $sql = ‘update message set message = ‘.$message.’where id = ‘.$id.’;’; 三种复合类型 array（数组） object（对象） callable（可调用） 两种特殊类型 resource（资源） NULL（无类型） PHP运算符 注释 单行注释仅仅注释到行末或者当前的 PHP 代码块，视乎哪个首先出现。这意味着在 // … ?&gt; 或者 # … ?&gt; 之后的 HTML 代码将被显示出来：?&gt; 跳出了 PHP 模式并返回了 HTML 模式 PHP是现在使用的最广泛的开源脚本语言，零成本，word press就是用php写的一个框架， 兼容几乎所有服务器，apache，iis都可以运行php页面，支持多种数据库，MySQL，Oracle、SQL server、mongobd···容几乎所有服务器 PHP+MySQL常用语句 PHP表单 $_GET和$_POST区别： $_GET传递的数据会显示在url中，可以收藏，能被缓存，传输类型只允许ASCII字符，不安全，数据长度有限制（URL长度最大是2048个字符） $_POST相对安全，数据长度无限制。通过request body传递参数 表单处理 post 和get的区别，$_GET 和 $_POST超全局变量，访问不需要考虑作用域，可以从任何函数文件访问， 表单验证 表单必填 正则表达式 cookie和session前后端验证登录注册模块总结 注册时，注册信息通过前端验证后通过post请求发送到数据库。 服务器再次校验数据是否规范、符合标准。 服务器将用户信息存储到数据库后，告知浏览器注册成功 用户打开登录界面，输入登录信息，向服务器发送post请求 服务器读取本地数据库，比对登录信息是否正确，若错误，告知浏览器登录失败；若正确给浏览器设置cookie 浏览器向服务器发送get请求，访问首页，附上cookie 服务器读取cookie，验证身份后，同意浏览器访问首页 作者：tinaawang 链接：https://www.jianshu.com/p/9a728123fa73 来源：简书 简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。 test PHP 安全 xss 分页分页的两种实现方法 12345 $offset = 10*$page;select * from message limit 10 offset $offset;select * from message limit(10,$offset); 1mysqli_data_seek($res,$offset); include和require​ require 和 include 几乎完全一样，除了处理失败的方式不同之外。require 在出错时产生 E_COMPILE_ERROR 级别的错误。换句话说将导致脚本中止而 include只产生警告（E_WARNING），脚本会继续运行。 ​ 如果文件被包含两次，PHP 5 发出致命错误因为函数已经被定义。 ​ 推荐使用include_once 而不是检查文件是否已包含并在包含文件中有条件返回。 require_once 语句和 require语句完全相同，唯一区别是 PHP 会检查该文件是否已经被包含过，如果是则不会再次包含。 类和对象 类的定义以关键字class开头，后面跟着类型，后面跟着或括号，里面包含类的属性和方法的定义。 类名同样只能包含字母数字下划线，并且以字母或下划线开头。 一个类可以有自己的常量、变量（属性）和函数（方法）。 创建类的实例使用new关键字 new className(); includes 一个类可以在声明中用extends继承另一个类的方法和属性，PHP不支持多重继承，一个类只能继承一个基类。 被继承的方法和属性可以通过用同样的名字覆盖，但是如果父类方法时用了final，则该方法不可覆盖。可以通过parent:: 来访问被覆盖的方法和属性。 覆盖方法时，参数必须保持一致，否则PHP将发出E_STRCT级别的错误。但构造函数例外，构造函数可以在覆盖时使用不同的参数。 ::class关键字可以用于类名的解析，使用ClassName::class可以获取一个字符串，包含了ClassName的完全限定名称，这对使用了命名空间的类尤其重要。 属性 类的变量成员叫做属性，或者叫字段、特征。 声明属性由关键字public、private、protected开头，然后跟一个普通的变量声明来组成。 在类的成员方法里面，可以用 -&gt;（对象运算符）：$this-&gt;property（其中 property 是该属性名）这种方式来访问非静态属性。静态属性则是用 ::（双冒号）：self::$property来访问。 类常量 把类中保持不变的值定义为类常量，在定义和使用常量的时候不需要$; 访问控制 对属性或方法的访问控制，是通过在前面添加关键字 public（公有），protected（受保护）或 private（私有）来实现的。被定义为公有的类成员可以在任何地方被访问。被定义为受保护的类成员则可以被其自身以及其子类和父类访问。被定义为私有的类成员则只能被其定义所在的类访问。 范围解析操作符 一对冒号，可以用于访问静态成员，类常量，还可以用于覆盖类中的属性和方法。 重载 PHP提供的重载是指动态的创建类属性和方法。通过魔术方法实现。 遍历对象 foreach语句，默认情况下，所有可见属性都将被用于便利。（foreach便利所有其能够访问的可见属性）。 魔术方法 PHP将所有以__（两个下划线）开头的类方法保留为魔术方法，所以在定义类方法时，除了上述魔术方法，不要以 __为前缀。 final关键字 PHP5新增，如果父类的方法被声明为final，则子类无法覆盖该方法，如果一个类被声明为final，则该类不能被继承。 属性不能被定义为final，只有类和方法才能被定义为final。 对象比较 当使用比较运算符（==）比较两个对象变量时，比较的原则是：如果两个对象的属性和属性值都相等，并且两个对象是同一个类的实例，那么这两个对象相等。 如果使用全等运算符（===）比较，这两个对象一定要指向某一个类的同一实例。 类型约束 抽象类 定义为抽象的类不能被实例化。 任何一个类，如果它里面至少有一个方法被声明为抽象的，则它必须定义为抽象类 继承一个抽象类的时候，子类必须定义父类中的所有抽象方法；另外，这些方法的访问控制必须和父类中一样（或者更为宽松）。例如某个抽象方法被声明为受保护的，那么子类中实现的方法就应该声明为受保护的或者公有的，而不能定义为私有的。此外方法的调用方式必须匹配，即类型和所需参数数量必须一致。例如，子类定义了一个可选参数，而父类抽象方法的声明里没有，则两者的声明并无冲突。 这也适用于 PHP 5.4 起的构造函数。在 PHP 5.4 之前的构造函数声明可以不一样的。 命名空间 在PHP中，命名空间用来解决在编写类库或应用程序时创建可重用的代码如类或函数时碰到的两类问题： 用户编写的代码与PHP内部的类/函数/常量或第三方类/函数/常量之间的名字冲突。 为很长的标识符名称(通常是为了缓解第一类问题而定义的)创建一个别名（或简短）的名称，提高源代码的可读性。 PHP 命名空间提供了一种将相关的类、函数和常量组合到一起的途径。 虽然任意合法的PHP代码都可以包含在命名空间中，但只有以下类型的代码受命名空间的影响，它们是：类（包括抽象类和traits）、接口、函数和常量。 命名空间通过关键字namespace 来声明。如果一个文件中包含命名空间，它必须在其它所有代码之前声明命名空间，除了一个以外：declare关键字。所有非PHP代码包括空白符都不能出现在命名空间之前 GET和POST网页乱码mysqli_query(“set names utf8”); 指定客户端将用于将SQL语句发送到服务器的字符集。告诉服务器以后从客户端传来的信息是utf-8编码的，指定服务器用于将结果返回客户端的字符集。 mysqli_set_charset($con,’utf8’);这应该是首选的用于改变字符编码的方法，不建议使用mysqli_query()执行SQL请求的SET NAMES …（如 SET NAMES utf8） ::和-&gt;区别:: 访问静态方法或类常量 -&gt;访问非静态]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
</search>
